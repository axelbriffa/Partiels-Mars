%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: Adobe Illustrator Artwork
%%Creator: Adobe Illustrator(R) 25.0
%%For: Tom
%%CreationDate: 4/24/2021
%%BoundingBox: 0 0 464 401
%%HiResBoundingBox: 0 0 463.2183 400.9848
%%CropBox: 0 0 463.2183 400.9848
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 25.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 25.0.0 x60 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 6.0-c002 79.164519, 2020/08/25-17:54:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Meditation practice 1</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2021-04-24T20:18:31+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2021-04-24T20:18:31+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2021-04-24T20:18:31+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator 25.0 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>224</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA4AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYqp&#xA;TXMMWzGrfyjrkowJQShJNQlP2AFHj1OXDEOrHiUGnmbq5+/JiIRayuFCS6n5t0bTbsWtxIxmFOfp&#xA;ryCV6cv7MiZgNcs0YminUNyXjSSKQmNwGRlOxBFQcNAtgKut7cL+1yHgRkTjDLiKumoj9tKe4yBx&#xA;dyeJExzxSfZYE+HfKzEhNr8il2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVz&#xA;MFBJNAOpxVL7i+ZqrF8K/wA3c5fDH3sDJC5axboONa716ZHi3pNbLckh2KvJH0rWtVvLm6htZJBJ&#xA;I7GSlEqWO3JqLmJKYvdwBinM2A9T0uxktNLtbdhvDEkbHr8SqAcujljXN2EcUgKRPE4yzRHmzGMl&#xA;1B448cv5v2rwjvdQ9t8fFHXZfDPTdWivJo9q8l8DkjjBY2jYb2GTYng3gf65TLGQyBV8gl2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuJABJNAOpxVLLq6MrUG0Y6Dx98yYQpgSh8mxdirs&#xA;Vdiq7p16+GU8Rny2i20I8+bDNK0vU7/zNc3GoSO9lp0zCBGPwFgaxhVHwjitG29sqAETQG7iwhKc&#xA;iZH0hkmq69pmkorXkvBn/u41BZ296DtglGzRPv8A2OVLNGAs7dzek63YarA01nJzVDxdSOLKe1R7&#xA;5Z4MT9LGGp4kd+IyIjRr6T9hbSbF8x9rjvuMnGVemQ/UwIvcOqD1+/DwGO8fkvEDzaIplkJiTCUS&#xA;FaG7li2B5L/KcZQBQCjobqKXYGjfynKJQIZgq2QS7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FUDfXFW9Jfsj7fufDLscNrYkoM0qaCg7DLY3W7EvAtW8w6zF5tutSEzpeQXDqgJNFVHIEdP5aChH&#xA;fKCTbrpTPFb3HSNRi1LTLW/i2S5jWQL4EjdfoO2ZANufE2LRlDSvYYLF0ypgd/qmowXF3q1+XT0p&#xA;Wt9KsWJCcx/uxl/aCDevc5i5JEmnH4jG5n4Bf5O816jcXLWl+3rQqjStdMQDEqipLnuuTGThCNPk&#xA;lKVH5soOqxQWl5dzkLBbSSAUpuEou3uz/jgJ4B/SLlcYNk/TF5lMdW8w6pJNHE008h+yv2UXooqd&#xA;lA98EY9A62UpZJWzzQNIt/LWlXN1ezqGK+rdyfsIsYJAHc0qfnlwqAsubp8B5DeRYFrP5r6/PO7a&#xA;SIrSzG8XNOcrAb1ZieIr4U+/NRm10pbAbPT4Oy4RFyNlPvJ/5nT6rqqadqcEUDTiltNETxZvA8id&#xA;28B/tX6bWcR4ZuLrOzuCPHDo9C6/PM6zD+r9zqvq97qEU5DY7jDICRuJ9QQDWx5NEUyUJ8XvYyjT&#xA;smxRUF86fDJ8S+PcZXLHfJkJI5JEdeSGoygima7ArsVdirsVdirsVdirsVdirsVdirsVdiqlczel&#xA;EW/aOy/PJQjZQSlRNTU9cymtrFXjn5p+W3sNYOqQp/od+auw6LP+0D/rfa+/Kckd3Czwo2y/8rL9&#xA;T5OYzPxispplZj0VQBKf+J5PGdm7AfSqaB+Zek6xrI0yO3lhMpItpXoQ/EE/EB9moHvgOQMseYSl&#xA;TMJER9mUMB0qK44o7WeZcjIbNdApT2VpNbvBLCjRSiki06j6MiBxS8gsogRrvStfLVpLYixnkdrZ&#xA;JmkaIN9ociY1dvtEANXxyMY2Se5rOIcIifex/wAy+Z49Mf8ARWg+lFFGP3txEARyPVV7V8T1w+Jt&#xA;ts42XLw+mLCNe1fzBe6VLY/WZriO4dBJGxLg0YEDfoOVMwtbkPBXeXZ9ggzzEnpFW0zytpcsAku4&#xA;3mm6MJQ8agjf4VPHx65qw9kIhj9y36P1qY27BBb3QMZH7Icgmny5HEbFrnGwQ+iIJRPbxTqKCRFe&#xA;n+sK50OOVbHryeOyR3JHRUJLD3GIHhn+iUfUPNoHsemTnA8xzYxl0PJxFMlCQkLRKNFsKCpJahHQ&#xA;eOJkQapQG45XjbkhocJAKLTC3vElorfC/h2PyyiWMhmCiMrS7FXYq7FXYq7FXYq7FXYq7FXYq7FU&#xA;uv5ecvEdE2+nvmRjjQYSKHKkKG7HYfRkhME0iluSQhdU0yz1SwmsbxPUt5low7g9mB7EHcYkWiUQ&#xA;RReeXdjN5Z8neYtFMnKXmlxbzdPUt7h44G28V4kMPceOVVQIcYjhiQl35Q6R9Y1ufUnH7uwjpGf+&#xA;LZqqPuQNlJFkBlpI7mXd+lkI836zqeuRWlhILa1klCKQqs3pg/E7Fw37IJ2yc8pG7GOWU5gBF6T5&#xA;3u7zXjZmFZLSeVlgcfC6IKkMeoPwipyMZ8MWyGczyV0JRWr68lrpmqXNtKGa4kj+qSKe0sKLUe49&#xA;NvuyyPpiuXLzI6sc8ueS7nVI1urpzb2jfYoKu48Vr0HucEYW4+PAZbnks8x3Gl6Lr1podvZmOORF&#xA;ke8ZiWeRyVQeHEEb+5zXa+Q4hGuT1vYeAQiZDrt8llrp9vZ0jtkKRElmHJm3pQfaJ2p2zAJJLvox&#xA;ERsxTXdLEOs2sKmSaO5If94zStyVx8NW5MQB44eZaZjhBe828QggjiXpGioPkopnRnGDGni+M8Vq&#xA;h23GRgeIGMuaZCtw477/AH4wNHhPwWQsWHDfb7sE/SeIcuv60x9QprLmp2KuxVF298y0WXdezdxl&#xA;U8d8mQkj1ZWAKmoPQjKCGbeKuxV2KuxV2KuxV2KuxV2KrZHCRs5/ZFcIFlUnJJJJ6nc5ltTsaSxD&#xA;8zhrJ8t00wSEeqPrYhrz9Hia9N+PKlf6ZCd00Z74dnl/lrVdM06DUZLj60upNFx0uS2coqy7islG&#xA;UkVptuOu2Ub9HGxyABvn0TbUfMuq6xob2us2si3cKk21+I2RXU0LRygDj8RUMCP2gPnlhkSN2RmZ&#xA;Ddm/lJYPLf5djUXALPG17KK05M4pGv0qFGQgfUfc5cPRiB+LBvLeqziy1fUxEBJa24hg41P7+7b0&#xA;k4jr9nllc9yA4uAUJS7h971HT/KOhWiCSKB1uGiKPIztyHqLxYCh49D1pkzHcA97mY8MYgkd33pW&#xA;vk+xh1aC2aR5NPZWnW3kNfjhNOFdtv3tcu4N3H8ECVdGUzTW9rbtLKyxQRLVmOwAGWN5IAeeeYfN&#xA;2n39zGY9MguBbNWGe6UswPioUqVH05jZOGXMW1R7QnD6DSrb61qdnZy20a1im3cKFJ3FDTluNvDN&#xA;H4koggcnvfy8MhjKX1BWtvKYvjoesIpM6XHO5VzssIr8IG38vzqfClM/T6a4wkOd7uo1utIyZIHl&#xA;VD3s8zbPPtg9j0yvJE8xzDZA9Dyd0OJAnGwoPCd3EUwwlxDdEo0XHcV+/IQ9J4fkmW4trLmt2Kt4&#xA;kJVYrl43JX7J6p2yHh7Um0xhnjlWqnfuO4yiUSGQKpkUuxV2KuxV2KuxV2KuxVC6g9Igvdj+Ay3E&#xA;N2Mkuy9g7FXYqhb240yxha8vGit403aZ6LuffxxKCQNyk0f5i+TJJPTXUlDdKtHKq/8ABMgX8cjx&#xA;hh40e9K/zBmaDy/fadGirZzxRtZPHsqyQyq8sJp0+BeS/wCy8Mph9JPenUmhXkgfy202wt/Kzapq&#xA;XFITdmeJ36fuV9NG96Oz0HjggPVfcGGEAY7Pf9yf6v55tLXRxfWEDXjyStDEjH0wSgBZiTvQch2w&#xA;mY4/cGcs4GOx1KhoXmaTW9MTU5rb6rPp90I50BJBR1CswqAaBZK/RlolYtrjk4hfcqebLPWtZuot&#xA;J06ItAgElzKTxTkfsqSevEb0HjleWdbLlhKZoclK3/LOK3EK3c0s93NX0zClYI2UV/esd6eHjmLk&#xA;kSKDlaTSRieOVHh6d/61KTyxrkchjNqzUP2lI4mnetc1xwy7nro9oYSL4mW+XdHki0tA9wsnIlk4&#xA;EOgFegYdd82OnnKEaef7QyRyZSQKVYpIp4zLA4liDMpcAihQ0IIIHfMrHnEnEyYJQNFvL2lvqPcZ&#xA;SPTLyP3tn1DzDhuKfdhn6TxfNY7inA0OSyR4hsiMqLiKHDCXELRKNFrJMXYq7FVyOyMGU0I74kWl&#xA;Mba7WX4W+GTw7H5ZjzhTMFEZWl2KuxV2KuxV2KuxVLtQes3H+Ufr3zIxDZhJC5YxdirsVedfm9pu&#xA;s3X6PNpDLc2ac/USFWfjIaULKtT02BymRJ6OPqYnamLeXvy58yajPFLPbfVLQMpd7n4GK13CpQt0&#xA;8RTImJq2rHglIhmup/lxqF5qV/OuscLXUZGkmtjCWUVPwbepQsu3xbfdthx4/SHIy4iZE3za1nQt&#xA;UOg6Vo9lErvYR/6ZDG6/a+yklGINHKuRkIxJv3ozwPDGI6Bj+oi4NloekwQtLeztckRLT7XrGMkm&#xA;vQel16UyMR6i0zieCMff97LdC8karZ3axi9jezuFKX0HFqMhUg0Hfrsdv4ZZO4Btxacg89urN4vr&#xA;wsTwtkgu1LiKN35q1AQrMygfazFsn3uz4YCQF3H3I6PnwX1ABJQcwpqK96E02wtRq9lK0iukhZbu&#xA;VZ3LNRlTgOBOwIqe2AebLJKJPpFKkMEMESxQRrFEv2Y0AVR32A2wgMZSMjZNlByQy33rRTCW1WOR&#xA;QjxSUZ1XetV6K1aEYKttEhCiKlt1HJTvbeSKVDGnKBqhmrup6jbuDmThydC48gkOoecPLWm3Jt7z&#xA;UIo51+1GKuV9m4BuP05dkoii1DMInmmsUsU0STQuJIpVDxyKahlYVBBwY5cQ3bJCjY5KocrUj9oU&#xA;PfK4x34T0+5lI9R1W9R7jJH0yvofvQN4+Yay5rdirsVdirYNNxiqPtbzlRJT8XZvH55RPH1DMFF5&#xA;UydirsVdirsVdiqUTtymdvEmnyzLiKDWVhxANbqWsKHYq7FUi1PzZbWfmCw0OOP1bu7IaVq0WKPc&#xA;8j4minbKc86iQiM/WAwp/wA47r6lEUs0a+9RvXDAiL0t+PCjluXjXbAMhDjnU7eaa6r53sINZgJi&#xA;eDVYIYjIo+KKaKaNZWgZhuGXlVGIoD1IBORxS6+bbmygSHeAE/8AL+kWYaDVUHLlbLHakilI5ZHn&#xA;LCvd/UWvyyWEcz5tnCNj5Mps3MVwsJhkLSoZPXCj0gAacS1ftHrSmUZMnFJyBj9N2Pd1buJJ7WSe&#xA;6mke4gADQ20UdXQKOLUoavyJr7ZWdmyIE6iNj3k/ile6S4ntSttMbWZuJWUoHKioJHFttxtiWECI&#xA;y9Q4gsv72C1SL1gSs8iwCm279/lkZzEavqyw4jMmugtabd7DT1g0yBWMVBFC7kChb4vjPI9CTkqo&#xA;bJ4+OdzPNfPaQXE8bSgloGWWOjFfioRvQ74kMI5DEGuuzctp6l0k5mkCorIYAR6bcu7CnUdt8Nbq&#xA;J1Eih7+rw/zp+XOoW3mxLbTY2ktNTYyQSHcR71kDnwWta+GXQNuszYCJbci9X02yisdOtrGI1jtY&#xA;kiQnqQihan50y0jhkD0OzmwHp4e5EDw8cOUfxDomB6d7uhycgJR97EExLiN8GOVjfmmYouIIAPjk&#xA;hIFiQ1hQ7FW67Up9OAjdNtYUI6zu60jkO/7LfwOU5IdQzBRuUsnYq7FXYq1I3FGbwBP3YQN1SXMt&#xA;qdirsVdirsVY1qPktLnzKuvwXHpziCSJomWql2iaJHBB2pyG2UZ438URx+vi8igPL/5WaFYASah/&#xA;uRuevxgrEvyQHf8A2Vflk+ADm1Q04HPdmYijRiURVJpWgArQUHTHCKgHJyfUUl0tr2+816iYGf8A&#xA;R1kF9WAMKS3CpSgJHw+BFabA5i8Z4fexHqynf0hlZ+uXOn7E2F3IvfhKY2/4i2V7kOV6Yz/nR+Vr&#xA;Unm+tQxiJ5YnRv8AShxCgrT7Q/yj0pjaOEGJN15Kty94rwi3jR0ZwJyzFSqU+0uxqcJtEBGjZ9zG&#xA;/PFwytZxKaEFpD8xQL/HMHWS5B2vZUL4j8GRQahbSyxQc/8ASJIRcCOh/uyQK1pTqczIyt1k8MgC&#xA;egNJdeX2qRX9qDCiRvPLGSG58oBGWDnYcTzAGWY4mRprymMeGjd80fYCKG1I9eSVVLM8k7BmAJru&#xA;dth2yPDw7FlOXGbAHwU2tInWW6ineYT8ZEBfnGoA/wB1+AbrkscuE2nISQIkVXz+KW2moWN3zNpc&#xA;xXHpnjJ6Tq/E+B4k0OZsgJCnGjPewiD1wY5XHdlMUXHxyOLa49yZ70Xfs/LHlP3rzj7msta3Yq7F&#xA;XYq7FXYqmNndcx6bn4x0PiMoyQrdmCisqZOxV2KqN43G3f32+85PGN0HklWZLW7FXYq7FXYqoX19&#xA;DZWxmlqQSFVR1JO9PwynJL1AfFkZCMST7kiuPN3+k2cMMJRXMst5M26xwW8ZkbfxalBkcuT07NWL&#xA;Lch+OTzbyxqGsa55utnu7yd4Uka6nUyMUWOL94VpWgU0C0yuZIi4+EmWSz73rvki0vYNPSYPHKLu&#xA;4uJ9QkfkH5s37sRjcUHQ1yuV25+DhMCTfET/AG2n7rLcTwyQyxPZcXWYCpZidhxZTTY9ci3bAEEH&#xA;iW+pB++sbM8bq3jBSNvUWNeQPp1IoCu37ONqIUBI/Sfc1I1za2SSMjTXHwCZInqOTUDFTKfsg+OP&#xA;IMgIylV0PP8AYxzXNOvr/U5HklSO2QCO2llKorMRUIvTkSa5hZsUpy8naaTPDHjAAuR5196c6NLd&#xA;JbrY3AljngjX45AojJNQFUg1bjTfMnFYiAebgaoRMjMEUSrkxQwWzaqyfWpHEIaP1OBkkOyrWp3p&#xA;3y0SIaTjEpHgGw33rkui00C7uy8UX1adVA4l/Ub4aMJKniR4YkkndjcQAY3xdf0UvMfq2US6ZcRw&#xA;RKVCPGqyJwQ0KKK07U9sHTZldSPGCT8nmEXkjzDafmBcapYOttphuTI7lwTJE5DSoEFepqBy+eZe&#xA;KJoF1pxEZLHJ6GaU98OO7Pdblz5D3Nfs5I/X8F/h+Lh0OCf1R+Kx+ktZa1uxV2KuxV2KuxVtWKsG&#xA;BoRuDiQqbW8wljDd+jD3zFlGi2AqmRS7FULqBpCB4tluLmxkl+Xli7EK1ihLtT1yKwcRhPVlYVK1&#xA;oAPc0OV5C1zzCKpp2rW18pCfBKu7Rt1p4jxyUZAphkElLXfUijgukjWVbZ+TxOKqQwpUj2ygjiuT&#xA;LP6QPJI7e0t7y0uRd1jTUn+qj0iFIV95ONQ23RcgBcgGnH9JJ/i2/WjdP8k6JpFnc/o2ErdTRGMz&#xA;uxdyPtcd9gCQOgyyUAZUOjcMQjA1zKA0zzMdDV5LiQpYLUzDiWIPQUA360yHCCd3GxZjHY8lWD8z&#xA;9EFr6WjxEcW/uxA4X4qk8QlamuDwwOTkZdbxb8z5sstdcgnEE0kyJaTQCQyPIEdZSd4ylAemUE0d&#xA;3Ox4+OFxBJ93RTvdd0qKaCWO+VY4yxmjSMSmQU2HLqtDvkTMd7kYtJkII4N/lSBvPOeny/u0szPw&#xA;KyRmULxqDsw6kEZE5Q5GLszINzKvcl2p+a9QvLdoUjSJWKnYsG+Fgw+JSpHTIyyEuVh7NhA2TfyS&#xA;mPVvM2oeYoVg1B7WC4Co8cSqBF6fKRzxYMvJlHHp39sv08hI0ebq+0tBLERKBPB18mQeavNV7olh&#xA;CYGElzM3FPVHIcVFWY0p7ffmVPFEOqy5jEMTt/zM1W2WJHjt4LCNgZUt4uJEfKr8BypU75VGADSd&#xA;dORuTMdF8yaPrNnJd2M4eKHaYMCrJtX4gfbvmZEitm+MxLdK9Y892+nam1l9UaVYuIllDhSKgMaK&#xA;RvSvcjKMeTb3ljn1AjLhrkyWCeOe3jniPKOVQ6N4qwqMmN5+4N9+geaXa95gs9FgikuEeQzMVREp&#xA;X4RUncjxwSl6/cGGTIIQ36lX0rVrLVLUXNo5ZK8WVhRlbrRhloNsYTEhYS8+cdFGq/o4u/qc/T9a&#xA;g9Ln0pWteu3SmDjF0w8aN0nwAIJJoR0HjiZEGqbwFuSYuxV2KtqrN0FaYDIDmkC1a0m9KUV+y2zf&#xA;1yM42FBTTMZsdiqC1I/3Y+Z/Vl2FjJA5cwdirsVSrWNEF6wmicJOBQ8vskD9WQnC2rJi4t0o06wu&#xA;INSRmYcYaySGNlY8VG4oDXfpmPOwGvDjPHv03ZBFqUVxAr+jKwkHxKEYjfqKkAHMiJAjTf4nFvXN&#xA;LNU06YS24s4n9O2NVjCmlWbkSG75RGP8THPA2BHohvPms3UGhXUGlswvSyxOwqpRGPxMGNBU9OuS&#xA;hLYnqU6nJXpHRgWnw6zqehTaUbWQ3wCpCXBUOvIU+NqLsB44ALcEAnZcdI1Hy5cwW96hVCo5zwHk&#xA;Kvv4VND127YyFKcZEqT62BZUO5VRy5Huzdf15qybNvo2LGMcBEdBSIwMlGM8ZUjOxVWAPiARQ4si&#xA;r4sWqUZXU8ZENUcdVI6EYQaNolEEUeRYxq76o9/NJqNw1xI7Exu2yhOyqo2AHtmwhl4xfV4XtPSS&#xA;w5KO8TyP47mOalfesRbQfGCQGI35HsBk3XgM48r6Nd6D5auJr5TDc6zNBBHbtsyxBjXkOxZWbbtt&#xA;kyKiXKhHhjv1S7zCzPr2ok7n6zKo+QcgfqyqHINOc/vJe8vVdHtpLbSLK3kFJIoUVx4MFFR9+XYh&#xA;z97saqMR5MQ/Mtyz2A/ZT1l/2VIyfwIyuX1n4ONq+Ufj+hF6GdN0vyhc6lYyytNJEPWEgAVZwOIC&#xA;bCo5P75OBIBWHDGFhhmh2EuoatbW6AktIGkbwRTVj92RiLLi443Knr800METSzOI4kFXdjQAe5OZ&#xA;LsiaYnffmPYxTFLS1a5jGxlZvTB/1RxY/fTKzkcaWpHQMn06+hv7GG8hBEcy8gD1HYg/I5YDbkRl&#xA;YtEYpbBI6YDEHmkFrChNbOX1IRX7S7H6MxsgotgKtkEpfqJ/fKPBf45kYuTCSEyxioX14lpbPOyl&#xA;gtPhHiTTBI0GM5ULSAa3rF7L6dogSvZRUge7NtlXGTycfxZS5Jvb6cVi538puH6sHJ9NfkvT78sE&#xA;e9uEO/dA6nfrJYCGzUKtxJ6UXH4eQX7RFOxJAzHnLilQ6LOfo2/iNJxEIrO0UOwWKBByb2UZblNR&#xA;rvbsYEdzyCTJrs1zcSSIPTtbZGkI/ac9FBPux6ZVlntQaYZSZE9BuitNsobXTne94kzfHcepQih6&#xA;A1/zrl8I0EQjQsoD61FqF3HY2kCR2oNXbgAeI3NNvhyN8Rpr4uI0OSM1qwtk06eQO8fBCYxyqORF&#xA;AByrSvtTBmAED7nO0uIHLD+sGNZp3snYqpv9uM+5H4E/wxSqYodiqxobZ5Eee3juUQ7wyqGVgRQj&#xA;f8DlmOfCbcfVaaOaHDL+wprdah5N8vWkN9bWMK3FxX6tFbxIJmI2YV/ZC1+Kp2zbCcasPH54DDIi&#xA;Q3DEtc8xXutahFKkZRISPq1utWINak7UqTTK5S4nAnlMizCz8oq/mCfV7qnotJ61tB35OAxLg/ys&#xA;enjjgjtu5ksP7wyPvT/Ur+3sLGS8nNI4lqR3J7KPcnJxNSk3ZJARBYPp9je+abGQzN6bJemZpiDx&#xA;9OVKMqeJXgu2U1c/e4kYnJD3S+9NPOUC2ug2mkWMZ/fSrHFEu5KrVvpPKmXz5UnMKiIhd5astM0O&#xA;BvVmWfVJR+9jgBldR2QKnI/M4xAC4oiHvSrzIvmrWZuCWM0Vip/dQmgJ/wAp9+v6sjKy15eOXTZD&#xA;ab+X+r3Eim842kP7VSHcj2C1H3nEYyxjp5Hns9CsrOCztIrWAcYoVCoD127n3OXAU5sRQpWxS7FX&#xA;Yqi9OkpKU7MPxGVZRsyimGUM0svjW5b2AH4Zk4+TCXND5Ni4gEEEVB6g4q0iRovFECj2FB+GCt/J&#xA;RVIHW4buawaO2FWJHNRsSvcDBMGtmvKCRspWWkuJ4HlAEdpEqxp4yNu7fe2Y+EdT1ZnHuP6Ib8xi&#xA;c6YViUsGdfUpv8I3/XTJZN5e5c1jH7yh/L+mkWjyToV9SRSFYUqqbjbw5H8MEI3P3MMMKhv1P3JZ&#xA;reqPd3BjQ0t4zRR/MR+0f4ZKcrcfLks+SMskbStDvNVaP1JkgeZI/FY1LAf7KmTgKFtuOPDElhNg&#xA;NW1GRdW1mZpbh2Bt7cmkcSMR9lOgJH4e+Y2eRMS39lyMtTG/P7inma57d2KoecsxNP2CABUirN7j&#xA;fYYQLNMM2UY4GR5BckpCgseSfzHqp8G/ridmcZCQBHIquBW8VSHzRpU88H1uzYrcQirIP21+Xjl2&#xA;HJwmjydR2t2f48OKP1x+0d36lfQINU8vWttqGqxuiX+zGI8Jo1XdeQ+zVga8T4ZsR6XkQDDc9Wca&#xA;bq1hqyFNP1SZnt29GSqICWZS6lg8X8oNCKDbGBqRF83NEhOIIPLZZ5h0q6n0WblMbyW3YXESSKgB&#xA;4AhhRVANVJpUdcGUUQfgiUCYEc63QflbXrPUP9Ea5mgnKFEtT6KpTxiaOOM1HgcZmxtzDDTZQTRP&#xA;NNrry3p1zGVm9WSTiVWWSWSQrXuA5K9vDLQARbKWIcixnT/Ntzo9/JpeqRo0MLlPXhQIQOzcFABB&#xA;HtXIidbFx45jE0WcRSxyxJLEweNwGRhuCDuCMtcsFfiUuIoaVr74ImwpDWFDsVdiqrbtxnQ+9Pv2&#xA;yMxskJtmK2JVc1aeQgbA7/qzJiQAGBCjk2LsVdirY65GZqJLKIsuPU4MYqIWZslx7ZHHzJ82U+QD&#xA;j0GMPqksuQSWHyxbJc+o8heEGqxEfgTXfCMYtxRgFqnmK+a2tBCg+K4qtfBQPi/XhnKgnNOgxMqz&#xA;DYV4kE+w5DMTN9Jbeyv8Yj8fuKrmve3diqCubmK3jWSUkBpD09qgfwy3APU6ztnJw6c+dBU0iSPV&#xA;Li5jsm5TW0aySwsKF1JI+H3FP1Zk5MHFuObpux+0DA8Evo+79i/+63APpd17r9Hh7dsweT1oNqoI&#xA;IqNwehxQ3iqW+Zb/AFJ9PtbLZrGJyzN1cELRF/1RU5m4c1jhLzXbmiIHiR5fxfr/AFqv5dPw8wSD&#xA;kQs1uyso6MVZSpP+qOVPnlxB5jmHR6OVSo8izrV9f0fRo1k1K6S3V9kU1Zmp1oihmP3ZfIiUfe5Z&#xA;mIHd5hrFqdO1QSWj0gk43NjKv++3+JCD/k9Mx4SsOvzQ4JbcuYeqaVem+0u1vCKNNGrOP8qm/wCO&#xA;XYjR4fk7Hi4oiTA/zDsGh1dLsD93dRirf5afCR/wPHHIN3A1MalbK/JkF1D5et0uQVYlmjVuoRmJ&#xA;X+uWQ5ORgBEd07yTa7FXYq7FVyqDXcCgrvkZyroyAtoGhB8MkxTrMNtSeRqyOfEk/jmWBya7WYUO&#xA;xV2KtjqMry/SWeP6g7LByYlx65Xi5fEs8nNx7fLHHzPvWfT3NZY1oe9sLa8jCTrXjurA0Ir4YDEF&#xA;jKAlzYtq8lvblrK0HGJXX15DuzsrA0J8BmJqPpIDd2bIR1MQPxsUJmtezaxVKdYtpLrTkt4HSO7Y&#xA;x+m8hoApDFyKA1b4QMytMOZef9ocnojHvN/L+13lDS7ny/qMl+04uJJYmieOhA+JlavImv7PhmZG&#xA;VPM45cJtOtQvjcy/WPSSN/8AdvGoDAdzXuPHKM+Pi3HN3XZ/a5xnhn9H3fsQdvPC0SzQOHtn3BXc&#xA;KT/DMAinrIzEhYNhE4qskjSWNo3FVYUIwolEEUeSjo82keWkvNWv5wZUHpWtqv235b1Wvc0p7d82&#xA;WnyAizzeO1mhGmmT/CeX6mL+ab5vM2mReYFThdWj/VL+BSSFR2Z7d1r2NSp9xgBo04GU+JHj6jY/&#xA;oZdpHlfVtU8uW8N+n1SSJhJavJu6xyf3iMvUb/Ev8MJgQb6FnDCZwo9OX6Uwg8/eUtNurXQ4JZJ1&#xA;Qpb/AFmNVMStULVnJWu/UqDlmQituYbMeaMTw9OTLJIoJ1AkRZFBqAwDUYH37jLgQRbOUehX4Vdi&#xA;rsVdirsVdirsVTpjRSfAVzDDakuZjU7FW8VaxVsdcjkFxIZRNEOPXGBuIKyFEuPb5ZDF1Hmyn09z&#xA;j0GMdpkLL6Q1lrW7FWL6toFyr3NxGymAB5qkmopViKZjZsfpKdJjI1ET/SCV5qntlkpIicjqFP6s&#xA;UhB+YPL15qehg2qKzRzMBVlU8+Mfp7sQKfbX6a9Mz9NH0X5vK9v3LJHyH6U58neTrnT9NkbXZTLP&#xA;JQrEZCVhRR05VpU9+2ZYgK3dViwd/NJvOdncTzRWmhTAWrI31ublUVJpQNTw8MxsmaA5bubDsbNM&#xA;7DhHn+rmgtB0htMidPrBueZ3jUfAOvQk0775hZMnF0ej7P0B08a4jL7vgnUalY1U9QKZW55XYoQW&#xA;p2FjexRw3jRpGZECyS14qzHiK8WRqb9mGW4T6w4PaeOM8EuLpv8AH8bMi0PSbXQZDGNGWBJiqyXl&#xA;tI08exqrSCUiVADv0YL45sskaFgbh5TCBE1XNjOvfmH5hk1tbDStPljS0nAnh4F5pgjUKEKG4q1O&#xA;334zlxig0nNIS2HJAt+VWp3WuT+lS00ZnEkM0n2/TcBuAjry5JXieVMjjiZBE9MeLb6XqiT2tlbx&#xA;LJcLSMCP1JmWrMop8R2HLuclAVcXMkdgVVJY5V5xsHU/tKQR+GXhhdrsVdirsVdirsVXIKsB4kDE&#xA;qmd5Jwgbxb4R9OY2MWWwpVmS1uxVsEggjqMEhYpINOJqa4QKFKS1ihs+PjlWLa49zZk3373dvliN&#xA;pnzU7x9zh0IxybES+Cx3BDWWtbsVUryMy2c8Q6vG6j6VIyMxYIbMMuGYPcQwdTVQfEVzRvaLJv7p&#xA;x1qCPv2xUMv8taLY32jq84Zj6slKGg68cy8MiIvNdqQEs2/cEl8021zHqzwSTM0IVHhDb/CVpUA/&#xA;DXkrdsqzzkTu7TsyMBiBA36pV6MfVhyP+Vv+vKXY2qYoWvJGn22C/MgYqvsEfUGcWI+semeMjIRx&#xA;U9aFjQV9sthhlLkHGyazFDnIfewz8wLu7g1JtId14QBGlCVoXZQwFTStAR2zKhg4DvzeY7V7TOX0&#xA;R2h9pemeQ9Tk1bypaS3J9SVVaCZjvy9M8QT41WlczYmw4mKVxYvreuQaR5tNrqsUd7ot+iSukqBx&#xA;DLUxSPHUGn7yNiw+nMfEa2PRjmlU9+RZB5q8ny6xplsmk372ggUiKL1HMEiN8QDUJ6djvttkuH1E&#xA;Dru2ZcfFAUeTBJPLGu2HlTWLHULRl+rTQXlq6/GjGphk4stR9lwfoyEokSDQIHw5A9KLGNFbWvr8&#xA;a6OZheMRwEBIY796dvGu2SF9HGjd7Poe0FwLWEXJBuRGvrleheg5U+nMl2QVcVdirYJBqMEog80g&#xA;01hQq2q8rhB4Gv3b5GZ2SFfUXq6p4Cp+nIYh1TJB5axdirsVdirsVXDcU+kZVP0ni+bZHcU0PDxw&#xA;5RtY5hEDvR6u3ByW04+RRvEuI79jkccuh5hMx1HItZYwdirA+BQmM9YyUPzU0P6s0chRp7WErAPe&#xA;pzU4b92UfewyLMM88nuq6CG7LJJX/gsycXJ5ztL++PwQlxZW2o3VybxC8iMAjhmUhGUED4SOjVzN&#xA;GCJ5hwcWryQsRNBLZfKMZf8Ad3LBK/ZcFiPp5DB+VimWt1B/jP2JlaaHplvCEMCSt1aSRQzE/SDT&#xA;LI4YDoEfmsvWcvmpap5X0HVLdbe8s0aNDyThWMqemxTicnwR7mnKTk+okovTdMsNMtFtLGBYLdOi&#xA;L4nqSTUk+5yQFMYxAFB5x51/LvzDqfmO41CwVJra54EszhTGVVUIavb4a7ZTMbuNkwyMrDO/K2hL&#xA;oeiW+nBxI8dWlkGwZ3NWp7dhlsRQb4Q4RTzf82bIWt3p4ryMguX5U7SXDS0r7epmKR6i1aoUI/H7&#xA;2efl690/k3TjcghwjBOXUxh2Ef8AwlKe2WD6o/Fvwf3e7Ih3yWTmPe2w5H3NZa1uxV2KuxV2KuxV&#xA;GadHV2fwFB9OVZT0ZRUbpuVw58DT7tsnAbIKjkkNsxJqfwwRjSSbawodirsVdiRaQWzvuPpymJ4T&#xA;wn4M5Di3DfUe+P0H+ifsT9Q82gex6ZKcTzHNjGXQ8nEUyUJiSJRprJMWF6jGY9RukPX1Wb/g/jH/&#xA;ABLNPnFTL12ilxYYny+7ZBzfYH+sv/EhlLlBP7DzDb2OgrbRD1LlpJGYGoUfGev9mZ2AUAXk+1c4&#xA;GaQ67fcEPc3urWkqXDSfHMiPKtBxFS3FafJcyiSHUSlIbplpnmGK5dYZ1EUzbKR9lj4e2TjO22Ga&#xA;9im+TbnYq7FVwZgCAaA9RgMQUgrcKFG8sLG8CLd20VwIzyQSorhW8RyBocqxC7PeWeUDYdyuAAtA&#xA;KDoB7DHnP3BPKPvd0Hzx5z/qryj72sta29qHbfscFG0tYUNgdfbATRTTWFDfXFU2tovSiC9+rfM5&#xA;izlZbAEpY1YnxNcyg1tYq7FXYq7FW6DiDXfwwcW9JprChvBKIIopBI5NihPgcqIkNj6h9rZYO/Iu&#xA;IB7iuVxmY7AEhkYg9RbYB+YyM8oJ2FH5MowIHeHUXHxZ9KPzXw49WJeYohHqrkGolRH+ndP+NMw8&#xA;3FxXLm9B2dIHFQ6H9qVSn4R7sv6xlLnhkXlvhNbLQOvpM3JuEXBiXJpUqX6e+ZmHFIxt5bWzic8u&#xA;e3u7vmnMieq8qJMA3BRx4qeJJNGNfHwyZFc4tH1cpJSdO1cTKJIra4TkKyFFBA8dgh+7BEx8w0HF&#xA;kvcRPw/sT0qAAT37DMiMpXsbbCB1FLaeByfiEcx+lHADyLqHJRyRPIsTAhrJsVw23P0DKZS4/SOX&#xA;UtoHDuWgK5KcxEMYxMi2ffp2GVQJ5DcnmWyQHM8mia5fCIiKapSstZJi7FXYq7FXYqjbG2NRK42/&#xA;YH8cpyT6M4hHZSySTMxqdirsVdirsVdirsVdirsVdirsVdirH/NMVHtpgNjzjZvfZlH4NmDrY8i7&#xA;vsef1R+KQSCvH/WGa93oZnpYWLSbYnYCFXb6V5Hpm6wioD3PH6uV5ZH+kUD5fu3ubu+mbq5QgeAH&#xA;IAfdjA2S4GGVklO6nDLHE8w5QmQ3yyo6YdDTMZj1dVfDEQyDkbUygejgV8TgnGZ5iJTExHUt8hlY&#xA;wy6j7WZyBqo8K5OOKffQYGce63cj8ssGCPXdicp6bLcuAprJXMVJ2FBkYAjmppbkkOxV2KrkjdzR&#xA;FJPtgJASjrewCkNLuey9splk7mQii8qZOxVJ5V4yMvgSMywbDWVmFC4leIFNx1ORETd2yJFLckxd&#xA;irsVdirsVdirsVdirsVS3zFB6mmO4FWhZZB8hsx/4EnMfVRuB8nP7NycOYee34+LELgkKpHY1/A5&#xA;qXqQzh7Vv0YbWM0YQ+kp/wBjxzeCNRp4nMeMk99oHy5p9zbRzGZCjyMAF6mi132+eRgK5uPhgRzT&#xA;5LO4b9mg8TtkjkAb6Vl01/2nA+Qr/TIHKnhVF06EdWY/dkfFKeFeLG2H7NfpOR8Qp4Q39Ttv5B95&#xA;x8QrQd9Ttv5B95x8QrQaNlbfy0+k4+IV4QtOnwH+YfTh8Uo4Wv0dF/M34f0w+KV4Wv0an85x8Urw&#xA;tjToe7Mfu/pj4pXhVFs7df2Kn33yJyFNBWAAFAKDwGQS7FXYq7FUv1CIhxIOjbH5jL8UtqYSCEy1&#xA;i7FXYq7FXYq7FXYq5miSPkzUavTtTI+ri8mW1KDXiD7IJ/DJ0xUzeP2UDDSrTdTeIH0Y0q+KC6vQ&#xA;0XWNwVckbUOxyrJOIFFnCwbHRzeSNOWKolmdwPssV4k+BooP45ro4gC7SXaeUitgio7cihaQv+Az&#xA;POS+Tq+FEpI6CiGnyAys7pXi6nH7X4DBSVwvJh4H6MaVet8f2k+44KVVS6ibavE++NKq4FdirsVd&#xA;irsVdirsVdirsVdirsVdirToroVYVBwg0qV3Fs8Lb7p2bMmMwWshSqcIAC21hQ2NsSLS5mLEk9Tg&#xA;jGhSk21hQ7FVOaESAb0I6YVQzWsw6Dl8sNq2tldt/upgPEig/HImYCaRENgFYNL8QHVBt+OVTyEj&#xA;ZkAmSXSooVIgqjoAf7MxuAs7aa7mPQhfkP61w8C2o5Yh2KuxVsKx6AnFV6wTHoh+nb9eC1VUsmP2&#xA;zQeA642qLAoAPDIq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq4gEUIqPDFUNJYQtutUPt0+7LBlIY8K&#xA;g2nSj7LA/OoyYyhHCsNjceAP05LxAvCXCxuPAD6Rj4gXhK4adMepUff/AEweKF4VRdN/mf6AMicq&#xA;eFVWwtx1Bb5n+mROUp4VZIo0+yoHyGQJJTS7ArqDFWuCfyj7sVa9KL+RfuGKu9KL+RfuGKu9OP8A&#xA;lH3DFWwqjoBireKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kv/2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:747c59d9-b9a2-5044-8ddf-a74561c55235</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:747c59d9-b9a2-5044-8ddf-a74561c55235</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:4bddcca5-b20c-4f4e-8d36-e1bd949a0432</stRef:instanceID>
            <stRef:documentID>xmp.did:4bddcca5-b20c-4f4e-8d36-e1bd949a0432</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:81483a5f-77ba-4b88-a8d7-98000c3e65e1</stEvt:instanceID>
                  <stEvt:when>2021-03-22T21:05:30+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015.3 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4bddcca5-b20c-4f4e-8d36-e1bd949a0432</stEvt:instanceID>
                  <stEvt:when>2021-04-24T20:16:17+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator 25.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:747c59d9-b9a2-5044-8ddf-a74561c55235</stEvt:instanceID>
                  <stEvt:when>2021-04-24T20:18:31+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator 25.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>500.000000</stDim:w>
            <stDim:h>500.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1  -1  scale 0 -400.985 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 400.985 li
463.218 400.985 li
463.218 0 li
cp
clp
149.026 388.846 mo
193.398 376.852 236.176 346.986 317.52 350.489 cv
364.617 352.517 446.382 371.434 461.133 277.238 cv
473.509 198.203 429.049 147.261 374.264 104.43 cv
293.375 41.1907 191.748 -24.8234 114.171 9.32208 cv
26.7429 47.8025 25.6633 172.137 13.4919 274.955 cv
12.367 284.458 -61.6091 445.784 149.026 388.846 cv
false sop
/0 
[/DeviceRGB] /CSA add_res
.898039 .917647 .996078 rgb
f
224.181 231.329 mo
151.023 156.716 112.969 105.633 96.9397 60.5183 cv
98.1868 60.0754 li
114.148 104.996 152.111 155.935 225.127 230.403 cv
224.181 231.329 li
cp
.345098 .521569 .478431 rgb
f
106.567 82.6228 mo
98.3269 75.9768 82.2961 55.846 90.2639 46.0935 cv
98.2312 36.3416 105.874 57.6477 106.372 69.7761 cv
106.705 77.9016 106.567 82.6228 106.567 82.6228 cv
cp
f
117.308 102.378 mo
111.975 93.0481 109.777 79.7874 116.119 68.6755 cv
119.847 62.1448 133.613 67.571 124.25 82.6516 cv
117.36 93.7498 117.308 102.378 117.308 102.378 cv
cp
f
116.816 101.396 mo
101.382 86.0608 84.863 83.009 81.5554 91.8977 cv
78.2483 100.787 92.4607 103.211 99.9216 100.944 cv
107.383 98.676 116.816 101.396 116.816 101.396 cv
cp
f
130.867 123.296 mo
122.856 105.012 128.404 92.3718 134.785 89.0398 cv
141.167 85.7073 150.457 93.1189 141.767 102.964 cv
132.556 113.399 130.867 123.296 130.867 123.296 cv
cp
f
147.708 145.739 mo
140.665 115.44 158.191 104.02 163.332 109.005 cv
168.473 113.99 161.072 122.231 155.408 129.412 cv
149.744 136.594 147.708 145.739 147.708 145.739 cv
cp
f
165.528 167.242 mo
157.501 134.978 172.38 119.404 180.694 122.422 cv
189.009 125.441 186.77 132.294 174.484 144.491 cv
162.06 156.825 165.528 167.242 165.528 167.242 cv
cp
f
130.542 122.775 mo
106.955 103.215 90.2605 115.163 93.8928 125.061 cv
97.5251 134.958 111.726 122.558 119.283 122.932 cv
126.84 123.306 130.542 122.775 130.542 122.775 cv
cp
f
146.498 144.077 mo
133.496 135.469 113.091 132.079 107.352 141.377 cv
101.614 150.675 112.3 155.847 120.052 150.892 cv
131.649 143.48 146.498 144.077 146.498 144.077 cv
cp
f
186.95 190.909 mo
179.386 176.177 184.738 147.61 198.866 143.749 cv
212.996 139.887 209.906 156.741 199.86 166.116 cv
189.814 175.492 186.95 190.909 186.95 190.909 cv
cp
f
211.599 217.496 mo
199.143 193.246 213.69 167.696 229.482 164.136 cv
245.274 160.577 238.105 180.102 223.375 191.067 cv
208.644 202.031 211.599 217.496 211.599 217.496 cv
cp
f
162.831 165.001 mo
131.842 152.548 119.003 168.046 123.239 176.508 cv
127.475 184.969 162.831 165.001 162.831 165.001 cv
cp
f
186.088 191.45 mo
165.957 177.111 139.894 185.275 140.155 198.096 cv
140.416 210.918 159.09 196.898 166.645 194.602 cv
174.201 192.305 186.088 191.45 186.088 191.45 cv
cp
f
211.498 217.547 mo
186.633 209.777 152.294 217.169 158.053 230.949 cv
163.148 243.139 173.57 235.033 189.434 221.16 cv
198.197 213.498 211.498 217.547 211.498 217.547 cv
cp
f
230.011 229.891 mo
197.653 178.025 178.243 138.739 168.929 106.256 cv
160.188 75.7766 159.626 49.4319 167.106 20.8362 cv
168.386 21.1711 li
153.581 77.7722 169.415 130.263 231.135 229.19 cv
230.011 229.891 li
cp
.462745 .65098 .6 rgb
f
163.224 44.1804 mo
155.152 21.262 163.14 6.24195 171.822 10.2712 cv
183.966 15.9075 163.224 44.1804 163.224 44.1804 cv
cp
f
162.429 65.9949 mo
173.803 43.1672 186.092 35.7556 192.29 40.0847 cv
198.489 44.4143 195.218 50.2097 181.065 57.1692 cv
166.912 64.1287 162.429 65.9949 162.429 65.9949 cv
cp
f
162.327 63.2742 mo
155.77 48.6677 139.795 37.8948 132.798 49.5862 cv
125.801 61.2776 148.314 57.113 153.558 58.5935 cv
158.547 60.0017 162.327 63.2742 162.327 63.2742 cv
cp
f
166.877 95.7664 mo
168.98 69.2659 189.576 52.782 198.801 63.407 cv
208.026 74.0325 187.925 75.1506 180.321 81.6033 cv
172.717 88.0554 166.877 95.7664 166.877 95.7664 cv
cp
f
130.85 83.9456 mo
133.344 71.6843 157.948 72.8987 166.423 94.1042 cv
166.423 94.1042 157.351 87.0554 143.852 92.05 cv
130.353 97.0442 129.795 89.135 130.85 83.9456 cv
cp
f
179.946 135.71 mo
171.27 114.606 185.668 95.0515 198.261 92.7781 cv
210.855 90.5046 211.465 101.285 207.438 107.081 cv
203.41 112.877 193.536 113.537 187.647 122.155 cv
181.757 130.772 179.946 135.71 179.946 135.71 cv
cp
f
175.86 126.543 mo
161.443 108.817 142.6 106.408 138.174 120.215 cv
133.747 134.021 154.699 122.02 162.558 123.124 cv
170.418 124.229 175.86 126.543 175.86 126.543 cv
cp
f
193.311 165.175 mo
195.305 123.36 218.576 117.252 224.627 126.317 cv
230.676 135.383 211.298 143.947 205.192 148.393 cv
197.436 154.039 193.311 165.175 193.311 165.175 cv
cp
f
211.564 197.862 mo
209.133 170.86 221.817 149.896 234.714 147.975 cv
247.609 146.054 242.981 159.961 229.99 172.764 cv
216.999 185.567 211.564 197.862 211.564 197.862 cv
cp
f
206.018 188.292 mo
186.968 175.909 156.946 182.876 163.1 197.684 cv
169.253 212.492 189.092 191.223 196.144 190.212 cv
203.197 189.201 206.018 188.292 206.018 188.292 cv
cp
f
193.311 165.175 mo
190.182 155.151 162.263 138.137 149.978 151.343 cv
137.692 164.548 162.681 167.155 173.159 165.437 cv
183.637 163.719 193.311 165.175 193.311 165.175 cv
cp
f
226.261 221.684 mo
225.041 198.863 240.379 194.018 244.007 195.226 cv
247.635 196.433 241.53 204.761 234.643 209.74 cv
227.845 214.655 226.261 221.684 226.261 221.684 cv
cp
f
221.8 215.413 mo
209.552 204.16 189.982 207.722 192.482 219.887 cv
194.982 232.052 212.58 213.605 217.492 214.358 cv
222.405 215.111 221.8 215.413 221.8 215.413 cv
cp
f
221.214 233.301 mo
194.16 213.256 127.013 182.879 66.51 211.38 cv
65.946 210.183 li
93.8625 197.032 125.335 194.784 159.489 203.499 cv
186.174 210.31 209.278 222.81 222.001 232.237 cv
221.214 233.301 li
cp
.623529 .780392 .741176 rgb
f
233.008 226.366 mo
232.391 176.746 268.101 133.936 268.462 133.51 cv
269.472 134.364 li
269.115 134.787 233.721 177.232 234.332 226.35 cv
233.008 226.366 li
cp
.345098 .521569 .478431 rgb
f
254.194 155.538 mo
256.209 136.866 260.545 127.523 271.302 127.154 cv
282.058 126.785 275.603 139.669 267.469 145.898 cv
259.333 152.129 254.194 155.538 254.194 155.538 cv
cp
f
242.033 180.907 mo
257.667 158.612 277.091 151.961 285.812 161.943 cv
294.535 171.925 269.01 169.211 259.596 171.755 cv
250.183 174.3 242.033 180.907 242.033 180.907 cv
cp
f
235.249 204.92 mo
246.823 187.341 271.186 180.146 279.296 185.034 cv
287.405 189.922 278.332 205.642 260.83 204.585 cv
243.327 203.529 235.249 204.92 235.249 204.92 cv
cp
f
243.086 178.709 mo
248.052 160.568 231.687 153.017 221.482 155.792 cv
211.263 158.571 211.666 166.226 221.971 169.025 cv
228.538 170.808 235.075 167.421 239.882 173.477 cv
242.48 176.752 243.086 178.709 243.086 178.709 cv
cp
f
235.479 204.817 mo
235.882 193.022 215.31 174.036 200.849 183.602 cv
187.633 192.344 196.158 202.891 213.603 198.96 cv
225.077 196.374 235.479 204.817 235.479 204.817 cv
cp
f
80.1296 205.585 mo
71.2629 204.986 47.6882 210.74 55.2483 216.782 cv
62.8083 222.823 80.1296 205.585 80.1296 205.585 cv
cp
.623529 .780392 .741176 rgb
f
104.409 199.729 mo
94.2336 201.548 69.0408 194.004 79.7156 183.62 cv
90.3909 173.237 104.409 199.729 104.409 199.729 cv
cp
f
104.409 199.729 mo
89.7302 211.676 74.1697 225.135 85.9602 228.681 cv
97.7507 232.227 104.409 199.729 104.409 199.729 cv
cp
f
130.002 199.263 mo
108.762 190.432 103.539 172.449 115.325 167.683 cv
127.112 162.916 130.002 199.263 130.002 199.263 cv
cp
f
138.843 200.317 mo
125.243 204.102 102.807 218.924 111.654 229.046 cv
120.5 239.168 138.843 200.317 138.843 200.317 cv
cp
f
155.697 203.406 mo
141.783 184.295 136.486 169.561 147.29 166.609 cv
158.095 163.656 155.697 203.406 155.697 203.406 cv
cp
f
159.022 204.387 mo
143.762 212.782 122.914 230.779 133.346 238.028 cv
143.778 245.277 159.022 204.387 159.022 204.387 cv
cp
f
181.847 211.101 mo
165.669 197.28 163.54 171.89 177.143 173.395 cv
190.746 174.9 181.847 211.101 181.847 211.101 cv
cp
f
183.51 212.536 mo
167.647 224.635 141.586 244.296 156.476 250.258 cv
171.366 256.221 183.51 212.536 183.51 212.536 cv
cp
f
196.007 217.618 mo
189.704 205.531 195.584 178.02 209.49 181.641 cv
223.397 185.261 196.007 217.618 196.007 217.618 cv
cp
f
206.338 223.406 mo
200.846 223.006 171.886 239.142 179.901 247.854 cv
187.916 256.565 206.338 223.406 206.338 223.406 cv
cp
f
360.465 282.253 mo
312.896 276.819 254.543 251.277 165.343 196.845 cv
166.033 195.716 li
255.057 250.04 313.251 275.528 360.615 280.938 cv
360.465 282.253 li
cp
.345098 .521569 .478431 rgb
f
336.759 277.863 mo
345.093 284.391 368.322 295.464 376.024 285.501 cv
383.726 275.538 361.245 272.901 349.317 275.154 cv
341.326 276.663 336.759 277.863 336.759 277.863 cv
cp
f
315.088 271.858 mo
325.381 274.948 338.796 274.096 348.189 265.409 cv
353.711 260.304 345.317 248.117 332.739 260.643 cv
323.482 269.86 315.088 271.858 315.088 271.858 cv
cp
f
316.156 272.115 mo
334.579 283.691 341.28 299.094 333.367 304.323 cv
325.454 309.55 319.885 296.252 320.41 288.472 cv
320.935 280.692 316.156 272.115 316.156 272.115 cv
cp
f
291.65 263.369 mo
311.27 267.048 322.332 258.79 324.138 251.821 cv
325.944 244.852 316.628 237.475 308.998 248.162 cv
300.911 259.49 291.65 263.369 291.65 263.369 cv
cp
f
265.985 252.029 mo
297.092 252.052 304.261 232.401 298.245 228.517 cv
292.228 224.633 285.871 233.704 280.152 240.843 cv
274.434 247.982 265.985 252.029 265.985 252.029 cv
cp
f
241.015 239.522 mo
274.258 240.06 286.072 222.049 281.256 214.631 cv
276.438 207.212 270.267 210.94 261.157 225.662 cv
251.945 240.548 241.015 239.522 241.015 239.522 cv
cp
f
292.23 263.569 mo
316.61 282.132 308.738 301.093 298.275 299.788 cv
287.813 298.484 296.689 281.851 294.619 274.573 cv
292.55 267.295 292.23 263.569 292.23 263.569 cv
cp
f
267.877 252.832 mo
279.198 263.556 287.106 282.669 279.344 290.359 cv
271.58 298.047 264.13 288.804 267.207 280.133 cv
271.81 267.164 267.877 252.832 267.877 252.832 cv
cp
f
213.123 223.993 mo
229.182 228.037 255.805 216.377 256.378 201.74 cv
256.95 187.105 241.229 193.918 234.363 205.821 cv
227.497 217.724 213.123 223.993 213.123 223.993 cv
cp
f
181.659 205.982 mo
208.095 212.642 229.702 192.705 229.606 176.517 cv
229.51 160.329 212.106 171.72 204.749 188.545 cv
197.391 205.369 181.659 205.982 181.659 205.982 cv
cp
f
243.806 241.643 mo
262.932 269.022 250.732 285.028 241.533 282.81 cv
232.333 280.593 243.806 241.643 243.806 241.643 cv
cp
f
212.791 224.956 mo
231.304 241.331 229.232 268.564 216.683 271.203 cv
204.134 273.843 213.577 252.488 214.109 244.608 cv
214.641 236.729 212.791 224.956 212.791 224.956 cv
cp
f
181.633 206.091 mo
194.815 228.561 195.363 263.683 180.638 261.182 cv
167.614 258.97 173.157 246.988 183.092 228.401 cv
188.579 218.136 181.633 206.091 181.633 206.091 cv
cp
f
310.365 222.728 mo
306.867 222.728 303.303 222.632 299.66 222.444 cv
265.913 220.701 223.26 210.659 165.429 190.842 cv
165.858 189.589 li
276.162 227.388 330.872 230.967 382.672 203.77 cv
383.287 204.941 li
360.129 217.101 337.264 222.728 310.365 222.728 cv
cp
.462745 .65098 .6 rgb
f
361.422 213.991 mo
385.57 216.683 398.4 205.51 392.515 197.963 cv
384.284 187.404 361.422 213.991 361.422 213.991 cv
cp
f
340.349 219.69 mo
360.02 203.457 364.468 189.813 358.851 184.751 cv
353.234 179.689 348.327 184.184 344.741 199.543 cv
341.156 214.902 340.349 219.69 340.349 219.69 cv
cp
f
343.022 219.175 mo
358.732 222.266 372.833 235.398 363.022 244.853 cv
353.212 254.308 352.187 231.436 349.561 226.66 cv
347.064 222.119 343.022 219.175 343.022 219.175 cv
cp
f
310.342 222.075 mo
335.683 214.046 347.094 190.26 334.661 183.672 cv
322.228 177.083 325.675 196.918 321.105 205.781 cv
316.536 214.646 310.342 222.075 310.342 222.075 cv
cp
f
329.989 254.505 mo
341.371 249.308 334.635 225.613 312.064 222.143 cv
312.064 222.143 320.978 229.39 319.159 243.667 cv
317.341 257.946 325.172 256.704 329.989 254.505 cv
cp
f
268.479 218.36 mo
290.997 222.048 306.798 203.608 306.17 190.826 cv
305.542 178.045 294.902 179.884 290.165 185.115 cv
285.427 190.346 287.013 200.115 279.947 207.798 cv
272.882 215.481 268.479 218.36 268.479 218.36 cv
cp
f
278.332 220.271 mo
298.854 230.315 305.454 248.128 293.003 255.556 cv
280.552 262.985 287.514 239.865 284.665 232.457 cv
281.815 225.05 278.332 220.271 278.332 220.271 cv
cp
f
236.759 211.99 mo
277.045 200.609 277.742 176.559 267.546 172.711 cv
257.348 168.863 253.379 189.675 250.426 196.627 cv
246.676 205.457 236.759 211.99 236.759 211.99 cv
cp
f
200.795 201.584 mo
227.649 197.859 245.21 180.77 244.17 167.773 cv
243.131 154.776 230.627 162.423 221.087 177.969 cv
211.547 193.514 200.795 201.584 200.795 201.584 cv
cp
f
211.369 204.827 mo
227.733 220.59 227.721 251.41 211.906 248.758 cv
196.091 246.106 212.334 221.978 211.728 214.879 cv
211.121 207.781 211.369 204.827 211.369 204.827 cv
cp
f
236.759 211.99 mo
247.229 212.775 270.105 236.133 260.013 251.082 cv
249.922 266.031 241.742 242.276 241.051 231.68 cv
240.36 221.084 236.759 211.99 236.759 211.99 cv
cp
f
174.271 192.642 mo
196.779 188.68 198.036 172.645 196.041 169.384 cv
194.046 166.122 187.311 173.948 184.015 181.781 cv
180.761 189.513 174.271 192.642 174.271 192.642 cv
cp
f
181.386 195.573 mo
195.114 204.965 196.061 224.835 183.645 225.145 cv
171.23 225.455 185.229 204.148 183.387 199.532 cv
181.544 194.917 181.386 195.573 181.386 195.573 cv
cp
f
221.657 346.226 mo
220.364 345.947 li
234.473 280.573 189.726 222.013 164.093 200.182 cv
164.951 199.174 li
177.007 209.442 194.398 229.128 207.056 253.589 cv
223.255 284.894 228.168 316.062 221.657 346.226 cv
cp
.623529 .780392 .741176 rgb
f
168.186 187.127 mo
167.903 185.834 li
215.906 175.34 249.254 131.282 249.585 130.839 cv
250.645 131.631 li
250.311 132.078 216.666 176.529 168.186 187.127 cv
cp
.345098 .521569 .478431 rgb
f
232.406 150.502 mo
250.14 144.324 258.264 137.992 256.196 127.429 cv
254.127 116.867 243.034 126.064 238.801 135.395 cv
234.567 144.726 232.406 150.502 232.406 150.502 cv
cp
f
210.436 168.075 mo
228.627 147.812 230.723 127.389 219.03 121.145 cv
207.337 114.901 215.741 139.154 215.387 148.899 cv
215.033 158.643 210.436 168.075 210.436 168.075 cv
cp
f
188.573 180.103 mo
203.087 164.86 204.597 139.502 198.005 132.705 cv
191.413 125.908 178.146 138.295 183.126 155.107 cv
188.106 171.92 188.573 180.103 188.573 180.103 cv
cp
f
212.34 166.553 mo
228.892 157.62 239.941 171.859 239.541 182.427 cv
239.14 193.009 231.592 194.345 226.539 184.937 cv
223.32 178.943 225.144 171.809 218.159 168.493 cv
214.383 166.701 212.34 166.553 212.34 166.553 cv
cp
f
188.622 179.856 mo
200.022 176.802 223.16 192.557 217.105 208.804 cv
211.572 223.653 199.373 217.728 199.265 199.845 cv
199.195 188.084 188.622 179.856 188.622 179.856 cv
cp
f
222.935 331.37 mo
225.521 339.873 225.235 364.138 217.643 358.137 cv
210.051 352.136 222.935 331.37 222.935 331.37 cv
cp
.623529 .780392 .741176 rgb
f
223.16 306.396 mo
223.685 316.719 236.72 339.56 244.426 326.817 cv
252.133 314.073 223.16 306.396 223.16 306.396 cv
cp
f
223.16 306.396 mo
214.834 323.393 205.235 341.589 199.119 330.903 cv
193.004 320.217 223.16 306.396 223.16 306.396 cv
cp
f
217.838 281.359 mo
231.235 300.056 249.932 301.086 251.916 288.529 cv
253.899 275.97 217.838 281.359 217.838 281.359 cv
cp
f
214.817 272.982 mo
214.198 287.086 204.822 312.288 192.965 305.954 cv
181.108 299.621 214.817 272.982 214.817 272.982 cv
cp
f
208.003 257.261 mo
229.761 266.503 245.31 268.338 245.748 257.146 cv
246.186 245.953 208.003 257.261 208.003 257.261 cv
cp
f
206.297 254.242 mo
201.562 271.004 188.736 295.376 179.319 286.849 cv
169.902 278.323 206.297 254.242 206.297 254.242 cv
cp
f
194.604 233.522 mo
211.72 246.164 236.935 242.507 232.399 229.595 cv
227.864 216.682 194.604 233.522 194.604 233.522 cv
cp
f
192.831 232.226 mo
184.625 250.41 171.353 280.237 162.184 267.076 cv
153.014 253.916 192.831 232.226 192.831 232.226 cv
cp
f
185.06 221.198 mo
198.258 224.612 223.731 212.673 217.066 199.943 cv
210.4 187.213 185.06 221.198 185.06 221.198 cv
cp
f
177.089 212.441 mo
178.718 217.7 169.535 249.555 159.239 243.713 cv
148.944 237.871 177.089 212.441 177.089 212.441 cv
cp
f
221.854 319.113 mo
227.755 319.113 234.134 319.54 241.071 320.615 cv
248.309 321.734 256.797 324.221 265.783 326.855 cv
291.821 334.484 324.227 343.981 344.794 324.362 cv
369.912 300.399 348.764 261.597 338.602 242.949 cv
337.494 240.916 336.537 239.159 335.759 237.646 cv
319.313 205.643 322.334 191.44 325 178.909 cv
327.245 168.35 329.184 159.231 320.178 141.219 cv
300.607 102.08 278.728 70.3953 256.906 49.5911 cv
235.915 29.5784 216.193 21.261 201.375 26.1692 cv
190.883 29.6443 181.108 38.3713 173.106 51.407 cv
164.257 65.823 157.57 85.1448 153.232 108.835 cv
151.833 116.479 151.052 124.368 150.298 131.997 cv
149.309 141.996 148.287 152.336 145.859 162.319 cv
143.761 170.943 140.166 180.086 136.36 189.767 cv
126.143 215.754 114.563 245.209 125.515 279.299 cv
130.423 294.576 145.016 319.289 165.105 324.756 cv
171.472 326.488 179.026 324.99 188.589 323.092 cv
197.832 321.258 208.64 319.113 221.854 319.113 cv
cp
312.385 338.307 mo
296.694 338.307 279.912 333.39 265.136 329.06 cv
256.225 326.449 247.808 323.983 240.719 322.885 cv
218.65 319.471 202.23 322.729 189.036 325.346 cv
179.178 327.303 171.391 328.849 164.502 326.974 cv
143.53 321.267 128.388 295.756 123.326 280.003 cv
112.123 245.131 123.863 215.271 134.221 188.926 cv
137.998 179.321 141.564 170.247 143.625 161.775 cv
146.016 151.949 147.03 141.692 148.011 131.771 cv
148.77 124.095 149.555 116.158 150.971 108.421 cv
155.361 84.4504 162.149 64.8635 171.147 50.2043 cv
179.436 36.7004 189.639 27.635 200.653 23.9876 cv
216.542 18.7239 236.544 27.0022 258.492 47.927 cv
280.505 68.9124 302.546 100.817 322.234 140.192 cv
331.6 158.923 329.486 168.864 327.248 179.387 cv
324.536 192.137 321.732 205.321 337.802 236.596 cv
338.568 238.084 339.519 239.829 340.62 241.85 cv
351.056 260.999 372.773 300.846 346.381 326.024 cv
336.809 335.155 324.947 338.307 312.385 338.307 cv
cp
.996078 .917647 .854902 rgb
f
187.697 322.386 mo
193.597 322.386 199.977 322.814 206.913 323.888 cv
214.151 325.007 222.638 327.494 231.624 330.127 cv
257.664 337.759 290.071 347.256 310.636 327.635 cv
335.755 303.673 314.607 264.871 304.444 246.223 cv
303.336 244.19 302.379 242.433 301.601 240.919 cv
285.156 208.917 288.177 194.714 290.843 182.183 cv
293.088 171.624 295.027 162.506 286.021 144.493 cv
266.45 105.354 244.571 73.6692 222.748 52.865 cv
201.758 32.8533 182.035 24.5349 167.218 29.4431 cv
156.726 32.9182 146.951 41.6453 138.949 54.6804 cv
130.099 69.0969 123.413 88.4187 119.075 112.109 cv
117.676 119.753 116.895 127.642 116.141 135.271 cv
115.152 145.271 114.13 155.61 111.701 165.593 cv
109.603 174.217 106.009 183.36 102.202 193.041 cv
91.9856 219.029 80.405 248.483 91.3577 282.573 cv
96.2654 297.85 110.859 322.563 130.948 328.031 cv
137.316 329.762 144.869 328.264 154.431 326.366 cv
163.675 324.531 174.482 322.386 187.697 322.386 cv
cp
278.227 341.581 mo
262.536 341.582 245.756 336.663 230.977 332.333 cv
222.067 329.723 213.65 327.256 206.562 326.158 cv
184.491 322.742 168.072 326.001 154.879 328.62 cv
145.02 330.577 137.234 332.124 130.344 330.248 cv
109.372 324.54 94.2302 299.031 89.1692 283.277 cv
77.9661 248.405 89.7058 218.544 100.063 192.199 cv
103.84 182.594 107.407 173.521 109.468 165.049 cv
111.858 155.223 112.872 144.966 113.853 135.045 cv
114.613 127.369 115.398 119.432 116.814 111.695 cv
121.203 87.7244 127.991 68.1375 136.989 53.4783 cv
145.279 39.9744 155.482 30.9089 166.495 27.2615 cv
182.385 21.9983 202.386 30.2766 224.335 51.2014 cv
246.347 72.1868 268.389 104.091 288.077 143.465 cv
297.443 162.197 295.329 172.137 293.091 182.661 cv
290.379 195.411 287.574 208.594 303.645 239.869 cv
304.41 241.358 305.361 243.103 306.463 245.123 cv
316.899 264.273 338.616 304.12 312.223 329.298 cv
302.653 338.428 290.788 341.581 278.227 341.581 cv
cp
f
205.936 324.144 mo
211.837 324.144 218.216 324.572 225.153 325.646 cv
232.391 326.765 240.879 329.252 249.865 331.885 cv
275.903 339.517 308.309 349.011 328.877 329.393 cv
353.995 305.43 332.846 266.627 322.683 247.98 cv
321.575 245.947 320.618 244.191 319.841 242.677 cv
303.396 210.674 306.417 196.471 309.082 183.941 cv
311.328 173.382 313.267 164.262 304.26 146.251 cv
284.69 107.111 262.811 75.4265 240.988 54.6223 cv
219.997 34.6101 200.275 26.2917 185.457 31.2004 cv
174.966 34.6755 165.19 43.4026 157.188 56.4382 cv
148.339 70.8542 141.653 90.176 137.315 113.866 cv
135.915 121.51 135.135 129.399 134.381 137.029 cv
133.392 147.028 132.369 157.367 129.941 167.35 cv
127.843 175.974 124.248 185.118 120.442 194.799 cv
110.225 220.786 98.6443 250.241 109.597 284.33 cv
114.505 299.607 129.098 324.321 149.188 329.787 cv
155.554 331.52 163.109 330.022 172.671 328.123 cv
181.914 326.289 192.722 324.144 205.936 324.144 cv
cp
296.467 343.339 mo
280.777 343.339 263.995 338.421 249.218 334.091 cv
240.307 331.48 231.89 329.014 224.801 327.916 cv
202.731 324.502 186.312 327.759 173.119 330.378 cv
163.26 332.334 155.473 333.881 148.584 332.005 cv
127.612 326.297 112.47 300.787 107.408 285.033 cv
96.2053 250.163 107.945 220.303 118.303 193.958 cv
122.079 184.352 125.646 175.279 127.707 166.806 cv
130.097 156.981 131.112 146.722 132.093 136.802 cv
132.852 129.127 133.637 121.189 135.054 113.452 cv
139.443 89.4817 146.231 69.8948 155.229 55.2356 cv
163.519 41.7322 173.721 32.6663 184.735 29.0188 cv
200.624 23.7546 220.626 32.0344 242.574 52.9583 cv
264.587 73.9441 286.629 105.848 306.316 145.222 cv
315.682 163.954 313.568 173.895 311.33 184.418 cv
308.618 197.168 305.814 210.352 321.885 241.627 cv
322.65 243.115 323.601 244.86 324.702 246.879 cv
335.138 266.03 356.856 305.877 330.463 331.055 cv
320.891 340.187 309.029 343.339 296.467 343.339 cv
cp
f
61.8372 86.5232 mo
59.0574 82.741 65.1536 81.9695 66.4646 83.6804 cv
68.3318 86.1165 64.3967 90.0066 61.8372 86.5232 cv
cp
1 1 .976471 rgb
f
64.0735 83.0803 mo
63.2893 83.0803 62.4851 83.2708 61.9612 83.6643 cv
60.9485 84.4246 61.449 85.5544 62.0476 86.3684 cv
62.9114 87.5437 63.8201 87.7029 64.4392 87.6335 cv
65.3025 87.532 66.1296 86.8801 66.4968 86.0115 cv
66.8191 85.2498 66.7317 84.4578 66.2571 83.8391 cv
65.8743 83.3396 64.9875 83.0803 64.0735 83.0803 cv
cp
64.1921 88.1707 mo
63.2419 88.1707 62.3401 87.6492 61.6262 86.678 cv
60.1663 84.6907 61.1545 83.6165 61.6472 83.2463 cv
63.0183 82.217 65.7888 82.3689 66.6721 83.5212 cv
67.2634 84.2932 67.3752 85.2751 66.9783 86.2146 cv
66.533 87.2668 65.5603 88.0276 64.4997 88.1521 cv
64.3967 88.1643 64.2942 88.1707 64.1921 88.1707 cv
cp
.941176 .901961 .862745 rgb
f
32.4197 353.848 mo
29.6814 350.122 35.6868 349.363 36.9783 351.048 cv
38.8171 353.448 34.9412 357.28 32.4197 353.848 cv
cp
1 1 .976471 rgb
f
32.6301 353.694 mo
33.4802 354.851 34.3757 355.007 34.9822 354.938 cv
35.8318 354.838 36.6453 354.198 37.0061 353.343 cv
37.323 352.594 37.2371 351.816 36.7707 351.207 cv
36.0715 350.293 33.6619 350.197 32.5442 351.035 cv
31.5496 351.782 32.0417 352.893 32.6301 353.694 cv
cp
34.74 355.475 mo
33.802 355.475 32.9128 354.96 32.2092 354.002 cv
30.7688 352.042 31.7444 350.982 32.2307 350.617 cv
33.5823 349.603 36.3142 349.753 37.1853 350.889 cv
37.7693 351.651 37.8796 352.618 37.4875 353.546 cv
37.0486 354.583 36.0891 355.334 35.0432 355.457 cv
34.9416 355.469 34.8401 355.475 34.74 355.475 cv
cp
.941176 .901961 .862745 rgb
f
31.8523 378.659 mo
30.4211 376.711 33.5603 376.314 34.2356 377.195 cv
35.1975 378.449 33.1711 380.453 31.8523 378.659 cv
cp
1 1 .976471 rgb
f
33.011 377.011 mo
32.6321 377.011 32.241 377.102 31.9924 377.288 cv
31.6404 377.552 31.6643 377.961 32.0632 378.504 cv
32.3874 378.946 32.7766 379.149 33.178 379.105 cv
33.5788 379.058 33.9636 378.752 34.1355 378.347 cv
34.2224 378.141 34.324 377.74 34.0281 377.354 cv
33.8552 377.127 33.4407 377.011 33.011 377.011 cv
cp
33.0647 379.634 mo
32.5344 379.634 32.0344 379.347 31.6418 378.813 cv
30.823 377.698 31.3948 377.083 31.6789 376.87 cv
32.446 376.295 33.9441 376.385 34.4431 377.035 cv
34.7766 377.471 34.8396 378.023 34.6164 378.55 cv
34.3704 379.133 33.8293 379.555 33.239 379.623 cv
33.0647 379.634 li
cp
.941176 .901961 .862745 rgb
f
71.5784 379.726 mo
69.2297 376.531 74.3811 375.878 75.489 377.323 cv
77.0666 379.382 73.7414 382.669 71.5784 379.726 cv
cp
1 1 .976471 rgb
f
71.7888 379.572 mo
72.3581 380.346 73.0476 380.71 73.7722 380.624 cv
74.488 380.539 75.1741 379.999 75.4788 379.278 cv
75.7449 378.649 75.6731 377.994 75.2815 377.484 cv
74.6916 376.713 72.6545 376.632 71.7078 377.343 cv
70.8787 377.965 71.2942 378.899 71.7888 379.572 cv
cp
73.5681 381.158 mo
72.7522 381.158 71.9792 380.712 71.3679 379.88 cv
70.1125 378.173 70.968 377.244 71.3943 376.925 cv
72.5666 376.045 74.9392 376.178 75.6965 377.165 cv
76.2053 377.829 76.3015 378.674 75.9597 379.482 cv
75.5788 380.384 74.7439 381.036 73.8332 381.143 cv
73.5681 381.158 li
cp
.941176 .901961 .862745 rgb
f
120.959 371.067 mo
118.249 367.378 124.193 366.626 125.471 368.294 cv
127.292 370.67 123.455 374.462 120.959 371.067 cv
cp
1 1 .976471 rgb
f
121.17 370.912 mo
122.01 372.056 122.897 372.217 123.496 372.142 cv
124.335 372.043 125.139 371.41 125.497 370.566 cv
125.81 369.824 125.725 369.055 125.264 368.453 cv
124.573 367.551 122.19 367.454 121.084 368.284 cv
120.101 369.023 120.588 370.12 121.17 370.912 cv
cp
123.256 372.679 mo
122.327 372.679 121.446 372.17 120.749 371.221 cv
119.322 369.28 120.289 368.229 120.771 367.866 cv
122.11 366.861 124.816 367.009 125.679 368.135 cv
126.258 368.89 126.366 369.85 125.978 370.769 cv
125.543 371.796 124.593 372.539 123.556 372.661 cv
123.456 372.673 123.356 372.679 123.256 372.679 cv
cp
.941176 .901961 .862745 rgb
f
336.269 143.387 mo
334.323 140.739 338.591 140.199 339.509 141.397 cv
340.815 143.102 338.061 145.825 336.269 143.387 cv
cp
1 1 .976471 rgb
f
337.842 141.05 mo
337.308 141.05 336.76 141.18 336.403 141.448 cv
335.875 141.845 335.901 142.445 336.48 143.232 cv
336.941 143.86 337.496 144.159 338.082 144.086 cv
338.659 144.018 339.213 143.581 339.459 142.998 cv
339.585 142.7 339.732 142.117 339.302 141.556 cv
339.046 141.222 338.454 141.05 337.842 141.05 cv
cp
337.917 144.618 mo
337.226 144.618 336.574 144.242 336.058 143.542 cv
334.995 142.094 335.726 141.304 336.09 141.031 cv
337.098 140.274 339.063 140.386 339.717 141.238 cv
340.148 141.802 340.229 142.517 339.94 143.201 cv
339.618 143.964 338.912 144.515 338.142 144.605 cv
337.917 144.618 li
cp
.941176 .901961 .862745 rgb
f
428.969 189.113 mo
426.301 185.482 432.153 184.742 433.412 186.384 cv
435.204 188.722 431.427 192.457 428.969 189.113 cv
cp
1 1 .976471 rgb
f
429.179 188.958 mo
430.007 190.083 430.88 190.234 431.466 190.169 cv
432.291 190.072 433.082 189.448 433.432 188.617 cv
433.741 187.89 433.657 187.134 433.204 186.543 cv
432.524 185.656 430.181 185.561 429.094 186.377 cv
428.129 187.101 428.607 188.181 429.179 188.958 cv
cp
431.23 190.705 mo
430.314 190.705 429.446 190.203 428.759 189.268 cv
427.351 187.353 428.304 186.316 428.78 185.959 cv
430.099 184.969 432.767 185.115 433.619 186.225 cv
434.189 186.969 434.297 187.916 433.914 188.822 cv
433.485 189.835 432.549 190.568 431.526 190.687 cv
431.427 190.699 431.328 190.705 431.23 190.705 cv
cp
.941176 .901961 .862745 rgb
f
390.519 228.536 mo
388.463 225.738 392.973 225.167 393.944 226.433 cv
395.326 228.236 392.414 231.115 390.519 228.536 cv
cp
1 1 .976471 rgb
f
390.73 228.382 mo
391.221 229.05 391.813 229.367 392.437 229.29 cv
393.052 229.218 393.643 228.752 393.906 228.131 cv
394.04 227.814 394.196 227.192 393.737 226.592 cv
393.228 225.928 391.47 225.864 390.652 226.475 cv
389.947 227.004 390.305 227.804 390.73 228.382 cv
cp
392.261 229.823 mo
391.536 229.823 390.85 229.429 390.308 228.691 cv
389.192 227.172 389.958 226.343 390.339 226.058 cv
391.398 225.262 393.466 225.38 394.151 226.274 cv
394.604 226.865 394.69 227.616 394.386 228.334 cv
394.048 229.135 393.306 229.714 392.498 229.81 cv
392.261 229.823 li
cp
.941176 .901961 .862745 rgb
f
22.2385 246.285 mo
20.2512 243.58 24.6101 243.03 25.5476 244.252 cv
26.8826 245.994 24.0691 248.776 22.2385 246.285 cv
cp
1 1 .976471 rgb
f
23.844 243.893 mo
23.2991 243.893 22.738 244.026 22.3718 244.301 cv
21.8298 244.707 21.8557 245.323 22.4495 246.131 cv
22.9221 246.774 23.4919 247.077 24.0906 247.005 cv
24.6824 246.936 25.2497 246.488 25.5022 245.891 cv
25.6311 245.585 25.7815 244.987 25.3401 244.411 cv
25.0784 244.07 24.4719 243.893 23.844 243.893 cv
cp
23.9221 247.537 mo
23.2185 247.537 22.5535 247.154 22.0286 246.44 cv
20.9446 244.966 21.6882 244.16 22.0583 243.883 cv
23.0867 243.112 25.0896 243.226 25.7551 244.093 cv
26.1951 244.667 26.2781 245.397 25.9831 246.094 cv
25.655 246.87 24.9358 247.432 24.1516 247.524 cv
23.9221 247.537 li
cp
.941176 .901961 .862745 rgb
f
43.6663 136.476 mo
42.1374 134.396 45.4905 133.972 46.2117 134.913 cv
47.2385 136.253 45.0745 138.392 43.6663 136.476 cv
cp
1 1 .976471 rgb
f
43.8767 136.322 mo
44.2268 136.797 44.6413 137.023 45.0842 136.97 cv
45.5183 136.919 45.9353 136.589 46.1213 136.149 cv
46.2156 135.927 46.3254 135.49 46.0041 135.072 cv
45.6516 134.612 44.3772 134.569 43.8049 134.998 cv
43.4197 135.287 43.4441 135.733 43.8767 136.322 cv
cp
44.9612 137.5 mo
44.4001 137.5 43.8713 137.197 43.4558 136.631 cv
42.5911 135.454 43.1926 134.805 43.4914 134.58 cv
44.3039 133.971 45.8904 134.065 46.4192 134.754 cv
46.7707 135.213 46.8381 135.796 46.6023 136.352 cv
46.3415 136.97 45.7693 137.416 45.1453 137.489 cv
44.9612 137.5 li
cp
.941176 .901961 .862745 rgb
f
30.053 308.144 mo
28.01 305.364 32.491 304.797 33.4543 306.054 cv
34.8269 307.845 31.9348 310.704 30.053 308.144 cv
cp
1 1 .976471 rgb
f
31.7024 305.677 mo
31.1409 305.677 30.5627 305.815 30.1858 306.098 cv
29.4871 306.622 29.8425 307.415 30.2639 307.99 cv
30.7507 308.652 31.3328 308.962 31.9578 308.891 cv
32.5681 308.819 33.154 308.357 33.4143 307.74 cv
33.5476 307.426 33.7029 306.808 33.2468 306.213 cv
32.9768 305.861 32.3508 305.677 31.7024 305.677 cv
cp
31.7839 309.424 mo
31.0627 309.424 30.3806 309.031 29.8425 308.298 cv
28.7327 306.788 29.4934 305.964 29.8723 305.68 cv
30.9255 304.889 32.9797 305.006 33.6619 305.895 cv
34.1121 306.483 34.1975 307.23 33.8957 307.945 cv
33.5593 308.74 32.8225 309.316 32.0188 309.409 cv
31.7839 309.424 li
cp
.941176 .901961 .862745 rgb
f
42.0217 179.757 mo
40.2566 177.355 44.1277 176.865 44.9602 177.951 cv
46.1457 179.498 43.6472 181.969 42.0217 179.757 cv
cp
1 1 .976471 rgb
f
43.4441 177.668 mo
42.9641 177.668 42.4709 177.782 42.1575 178.017 cv
41.6916 178.367 41.7165 178.9 42.2322 179.602 cv
42.6448 180.163 43.1355 180.427 43.6628 180.366 cv
44.1785 180.306 44.6726 179.916 44.8928 179.394 cv
45.0046 179.129 45.136 178.61 44.7527 178.11 cv
44.5295 177.819 43.9958 177.668 43.4441 177.668 cv
cp
43.5163 180.898 mo
42.8826 180.898 42.2834 180.553 41.8113 179.911 cv
40.8337 178.581 41.5085 177.851 41.844 177.599 cv
42.7673 176.907 44.5686 177.011 45.1677 177.792 cv
45.5647 178.311 45.6404 178.969 45.3743 179.598 cv
45.0784 180.297 44.4309 180.802 43.7239 180.885 cv
43.5163 180.898 li
cp
.941176 .901961 .862745 rgb
f
77.2244 329.906 mo
75.1257 327.049 79.7283 326.467 80.718 327.759 cv
82.1282 329.598 79.157 332.535 77.2244 329.906 cv
cp
1 1 .976471 rgb
f
78.9187 327.365 mo
78.3396 327.365 77.7444 327.507 77.3562 327.798 cv
76.6335 328.34 77.0002 329.159 77.4348 329.75 cv
77.9368 330.433 78.5388 330.752 79.1814 330.68 cv
79.8113 330.606 80.4148 330.129 80.6838 329.494 cv
80.821 329.169 80.9817 328.531 80.511 327.918 cv
80.2322 327.554 79.5862 327.365 78.9187 327.365 cv
cp
79.0017 331.212 mo
78.2639 331.212 77.5652 330.811 77.0139 330.06 cv
75.8777 328.514 76.655 327.671 77.0422 327.38 cv
78.1003 326.586 80.2419 326.708 80.926 327.6 cv
81.387 328.201 81.4744 328.966 81.1648 329.698 cv
80.8201 330.512 80.0657 331.103 79.2424 331.198 cv
79.0017 331.212 li
cp
.941176 .901961 .862745 rgb
f
250.127 330.583 mo
248.028 327.728 252.632 327.146 253.621 328.438 cv
255.031 330.277 252.06 333.214 250.127 330.583 cv
cp
1 1 .976471 rgb
f
251.821 328.044 mo
251.242 328.044 250.647 328.185 250.26 328.477 cv
249.537 329.019 249.903 329.837 250.338 330.429 cv
250.84 331.112 251.441 331.429 252.084 331.359 cv
252.715 331.284 253.318 330.808 253.587 330.172 cv
253.723 329.847 253.885 329.21 253.414 328.597 cv
253.135 328.233 252.489 328.044 251.821 328.044 cv
cp
251.905 331.892 mo
251.167 331.892 250.468 331.489 249.917 330.739 cv
248.78 329.192 249.558 328.349 249.946 328.059 cv
251.004 327.264 253.144 327.386 253.829 328.279 cv
254.29 328.88 254.377 329.645 254.067 330.375 cv
253.723 331.192 252.968 331.781 252.145 331.877 cv
251.905 331.892 li
cp
.941176 .901961 .862745 rgb
f
179.835 327.38 mo
178.445 325.49 181.493 325.104 182.149 325.959 cv
183.082 327.177 181.114 329.122 179.835 327.38 cv
cp
1 1 .976471 rgb
f
180.045 327.226 mo
180.358 327.651 180.733 327.85 181.12 327.806 cv
181.508 327.76 181.879 327.466 182.044 327.073 cv
182.128 326.875 182.226 326.49 181.941 326.118 cv
181.652 325.74 180.529 325.64 179.975 326.055 cv
179.637 326.309 179.661 326.702 180.045 327.226 cv
cp
181.011 328.335 mo
180.494 328.335 180.007 328.055 179.624 327.534 cv
178.825 326.448 179.384 325.846 179.662 325.637 cv
180.41 325.076 181.87 325.165 182.356 325.801 cv
182.681 326.225 182.743 326.763 182.526 327.277 cv
182.285 327.846 181.758 328.257 181.182 328.324 cv
181.011 328.335 li
cp
.941176 .901961 .862745 rgb
f
346.592 91.7053 mo
344.368 88.6794 349.245 88.0627 350.294 89.4309 cv
351.787 91.3801 348.639 94.4919 346.592 91.7053 cv
cp
1 1 .976471 rgb
f
346.802 91.5505 mo
347.337 92.2791 347.979 92.6213 348.667 92.5417 cv
349.34 92.4626 349.985 91.9539 350.271 91.2756 cv
350.521 90.6843 350.454 90.0701 350.086 89.5901 cv
349.531 88.8665 347.613 88.7917 346.721 89.4597 cv
345.946 90.0422 346.337 90.9182 346.802 91.5505 cv
cp
348.475 93.0754 mo
347.698 93.0754 346.962 92.6511 346.381 91.8601 cv
345.185 90.2327 346.002 89.3474 346.408 89.0422 cv
347.524 88.2053 349.781 88.3323 350.501 89.2722 cv
350.986 89.905 351.078 90.7097 350.753 91.4792 cv
350.389 92.3381 349.594 92.9587 348.728 93.0603 cv
348.475 93.0754 li
cp
.941176 .901961 .862745 rgb
f
64.196 223.579 mo
62.5559 221.348 66.1526 220.893 66.9265 221.902 cv
68.0281 223.339 65.7063 225.635 64.196 223.579 cv
cp
1 1 .976471 rgb
f
65.5193 221.656 mo
65.0769 221.656 64.6223 221.762 64.3332 221.979 cv
63.9099 222.296 63.9348 222.782 64.4065 223.425 cv
64.7859 223.942 65.2385 224.188 65.7185 224.127 cv
66.1916 224.073 66.6448 223.714 66.8469 223.236 cv
66.9495 222.993 67.0691 222.518 66.719 222.062 cv
66.5144 221.794 66.0251 221.656 65.5193 221.656 cv
cp
65.5847 224.658 mo
64.9895 224.658 64.428 224.336 63.9856 223.734 cv
63.0676 222.485 63.7038 221.798 64.0198 221.561 cv
64.8845 220.91 66.572 221.011 67.134 221.743 cv
67.5071 222.231 67.5779 222.848 67.3284 223.439 cv
67.051 224.095 66.4431 224.57 65.7795 224.647 cv
65.5847 224.658 li
cp
.941176 .901961 .862745 rgb
f
128.218 330.049 mo
126.578 327.818 130.175 327.363 130.948 328.371 cv
132.05 329.809 129.728 332.104 128.218 330.049 cv
cp
1 1 .976471 rgb
f
128.428 329.895 mo
128.808 330.411 129.262 330.655 129.74 330.598 cv
130.213 330.542 130.666 330.184 130.868 329.705 cv
130.971 329.463 131.091 328.988 130.74 328.531 cv
130.357 328.03 128.974 327.983 128.355 328.448 cv
127.932 328.766 127.956 329.252 128.428 329.895 cv
cp
129.606 331.128 mo
129.011 331.128 128.449 330.806 128.007 330.203 cv
127.089 328.954 127.725 328.268 128.041 328.031 cv
128.906 327.382 130.593 327.48 131.155 328.212 cv
131.529 328.699 131.599 329.318 131.35 329.909 cv
131.072 330.565 130.465 331.039 129.801 331.116 cv
129.606 331.128 li
cp
.941176 .901961 .862745 rgb
f
93.2327 294.354 mo
91.5925 292.122 95.1892 291.667 95.9631 292.677 cv
97.0647 294.114 94.7429 296.409 93.2327 294.354 cv
cp
1 1 .976471 rgb
f
94.5559 292.431 mo
94.1135 292.431 93.6589 292.536 93.3699 292.753 cv
92.9465 293.071 92.9714 293.557 93.4431 294.199 cv
93.8225 294.716 94.2766 294.961 94.7551 294.903 cv
95.2283 294.847 95.6814 294.489 95.8835 294.01 cv
95.9861 293.767 96.1057 293.292 95.7556 292.836 cv
95.551 292.569 95.0618 292.431 94.5559 292.431 cv
cp
94.6213 295.433 mo
94.0261 295.433 93.4646 295.111 93.0222 294.508 cv
92.1042 293.259 92.74 292.573 93.0564 292.335 cv
93.9211 291.686 95.6086 291.785 96.1706 292.518 cv
96.5437 293.005 96.6145 293.622 96.365 294.214 cv
96.0876 294.869 95.4797 295.344 94.8162 295.421 cv
94.6213 295.433 li
cp
.941176 .901961 .862745 rgb
f
429.461 277.821 mo
427.389 275.002 431.931 274.428 432.908 275.702 cv
434.3 277.517 431.368 280.415 429.461 277.821 cv
cp
1 1 .976471 rgb
f
429.672 277.666 mo
430.165 278.337 430.76 278.653 431.391 278.581 cv
432.011 278.508 432.606 278.039 432.871 277.413 cv
433.007 277.093 433.165 276.465 432.701 275.862 cv
432.188 275.194 430.417 275.125 429.594 275.743 cv
428.883 276.277 429.244 277.083 429.672 277.666 cv
cp
431.215 279.114 mo
430.485 279.114 429.795 278.716 429.25 277.975 cv
428.127 276.447 428.896 275.613 429.279 275.325 cv
430.325 274.542 432.44 274.661 433.116 275.543 cv
433.571 276.138 433.658 276.893 433.352 277.616 cv
433.011 278.422 432.265 279.004 431.452 279.1 cv
431.215 279.114 li
cp
.941176 .901961 .862745 rgb
f
123.129 57.5144 mo
121.559 55.3777 125.003 54.9417 125.744 55.9085 cv
126.799 57.2849 124.575 59.4827 123.129 57.5144 cv
cp
1 1 .976471 rgb
f
124.397 55.6829 mo
123.976 55.6829 123.543 55.7835 123.267 55.99 cv
122.868 56.2903 122.892 56.7512 123.34 57.3601 cv
123.7 57.8508 124.129 58.0823 124.586 58.0291 cv
125.035 57.9763 125.466 57.6355 125.657 57.1809 cv
125.755 56.9509 125.868 56.5002 125.536 56.0676 cv
125.343 55.8137 124.878 55.6829 124.397 55.6829 cv
cp
124.459 58.5588 mo
123.885 58.5588 123.344 58.2483 122.919 57.6697 cv
122.033 56.4651 122.648 55.8015 122.954 55.5725 cv
123.786 54.947 125.411 55.0447 125.951 55.7498 cv
126.311 56.219 126.38 56.8152 126.138 57.3845 cv
125.872 58.0164 125.286 58.4729 124.647 58.5481 cv
124.459 58.5588 li
cp
.941176 .901961 .862745 rgb
f
121.51 98.9202 mo
119.675 96.4236 123.699 95.9148 124.564 97.0437 cv
125.797 98.6516 123.199 101.219 121.51 98.9202 cv
cp
1 1 .976471 rgb
f
121.72 98.7654 mo
122.152 99.3523 122.667 99.6287 123.217 99.5647 cv
123.756 99.5012 124.273 99.0925 124.504 98.5476 cv
124.621 98.2698 124.758 97.7258 124.357 97.2024 cv
123.92 96.6326 122.348 96.5759 121.645 97.1042 cv
121.155 97.4719 121.18 98.0305 121.72 98.7654 cv
cp
123.063 100.096 mo
122.407 100.096 121.788 99.7395 121.3 99.075 cv
120.288 97.6995 120.985 96.9465 121.331 96.6863 cv
122.287 95.968 124.152 96.0754 124.772 96.885 cv
125.182 97.4207 125.26 98.1003 124.985 98.7507 cv
124.679 99.4749 124.009 99.9973 123.278 100.084 cv
123.063 100.096 li
cp
.941176 .901961 .862745 rgb
f
298.08 119.827 mo
295.425 116.215 301.247 115.479 302.499 117.113 cv
304.282 119.439 300.524 123.154 298.08 119.827 cv
cp
1 1 .976471 rgb
f
300.217 116.55 mo
299.47 116.55 298.704 116.732 298.205 117.106 cv
297.246 117.826 297.721 118.899 298.29 119.673 cv
299.112 120.791 299.981 120.946 300.563 120.876 cv
301.384 120.78 302.17 120.16 302.519 119.334 cv
302.825 118.611 302.742 117.859 302.292 117.271 cv
301.927 116.797 301.086 116.55 300.217 116.55 cv
cp
300.329 121.412 mo
299.417 121.412 298.553 120.913 297.869 119.982 cv
296.469 118.076 297.418 117.044 297.891 116.689 cv
299.205 115.704 301.859 115.848 302.707 116.953 cv
303.274 117.694 303.382 118.636 303 119.537 cv
302.573 120.546 301.64 121.275 300.624 121.395 cv
300.525 121.406 300.427 121.412 300.329 121.412 cv
cp
.941176 .901961 .862745 rgb
f
146.528 95.8289 mo
144.151 92.5945 149.364 91.9353 150.485 93.3977 cv
152.081 95.4807 148.717 98.8069 146.528 95.8289 cv
cp
1 1 .976471 rgb
f
148.443 92.9202 mo
147.781 92.9202 147.1 93.0813 146.656 93.4148 cv
145.815 94.0461 146.237 94.9915 146.738 95.6741 cv
147.467 96.6648 148.235 96.802 148.748 96.74 cv
149.473 96.655 150.168 96.1067 150.477 95.3762 cv
150.747 94.738 150.674 94.075 150.277 93.5569 cv
149.956 93.1379 149.212 92.9202 148.443 92.9202 cv
cp
148.541 97.2751 mo
147.716 97.2751 146.935 96.824 146.317 95.9836 cv
145.049 94.2576 145.912 93.3201 146.343 92.9968 cv
147.528 92.1072 149.926 92.24 150.692 93.239 cv
151.206 93.9104 151.303 94.7634 150.958 95.5798 cv
150.572 96.4919 149.729 97.1511 148.809 97.2595 cv
148.541 97.2751 li
cp
.941176 .901961 .862745 rgb
f
335.795 197.477 mo
333.015 193.694 339.112 192.923 340.423 194.634 cv
342.29 197.07 338.355 200.96 335.795 197.477 cv
cp
1 1 .976471 rgb
f
336.006 197.323 mo
336.87 198.498 337.782 198.656 338.397 198.587 cv
339.26 198.486 340.088 197.833 340.455 196.965 cv
340.777 196.203 340.689 195.411 340.216 194.793 cv
339.505 193.865 337.053 193.765 335.919 194.618 cv
334.906 195.378 335.407 196.508 336.006 197.323 cv
cp
338.15 199.124 mo
337.2 199.124 336.299 198.603 335.585 197.631 cv
334.124 195.644 335.112 194.57 335.605 194.2 cv
336.976 193.171 339.747 193.322 340.631 194.475 cv
341.221 195.247 341.334 196.229 340.936 197.168 cv
340.491 198.22 339.518 198.981 338.458 199.106 cv
338.355 199.118 338.253 199.124 338.15 199.124 cv
cp
.941176 .901961 .862745 rgb
f
248.532 122.046 mo
246.516 119.303 250.936 118.744 251.886 119.985 cv
253.241 121.751 250.387 124.571 248.532 122.046 cv
cp
1 1 .976471 rgb
f
248.742 121.891 mo
249.221 122.544 249.801 122.852 250.41 122.78 cv
251.01 122.709 251.588 122.254 251.844 121.647 cv
251.975 121.337 252.128 120.729 251.679 120.144 cv
251.182 119.495 249.464 119.43 248.665 120.031 cv
248.113 120.445 248.139 121.071 248.742 121.891 cv
cp
250.239 123.312 mo
249.526 123.312 248.852 122.924 248.321 122.2 cv
247.224 120.708 247.977 119.894 248.351 119.613 cv
249.39 118.831 251.42 118.947 252.094 119.826 cv
252.539 120.407 252.624 121.145 252.325 121.85 cv
251.993 122.636 251.264 123.205 250.47 123.298 cv
250.239 123.312 li
cp
.941176 .901961 .862745 rgb
f
172.916 68.8591 mo
170.317 65.3225 176.017 64.6013 177.243 66.2009 cv
178.989 68.4788 175.309 72.116 172.916 68.8591 cv
cp
1 1 .976471 rgb
f
173.126 68.7043 mo
173.929 69.7971 174.777 69.947 175.347 69.8801 cv
176.149 69.7859 176.916 69.1804 177.258 68.3738 cv
177.556 67.6677 177.475 66.9333 177.035 66.3601 cv
176.375 65.4978 174.098 65.4065 173.042 66.2 cv
172.106 66.9016 172.571 67.9495 173.126 68.7043 cv
cp
175.118 70.4163 mo
174.223 70.4163 173.376 69.9265 172.705 69.0139 cv
171.331 67.1438 172.263 66.1306 172.728 65.7815 cv
174.016 64.8157 176.619 64.9587 177.45 66.0422 cv
178.007 66.7693 178.112 67.6931 177.739 68.5769 cv
177.321 69.5671 176.406 70.282 175.408 70.3992 cv
175.311 70.4104 175.214 70.4163 175.118 70.4163 cv
cp
.941176 .901961 .862745 rgb
f
296.477 68.8997 mo
293.781 65.2307 299.694 64.4827 300.967 66.1423 cv
302.777 68.5051 298.961 72.2786 296.477 68.8997 cv
cp
1 1 .976471 rgb
f
296.687 68.7454 mo
297.524 69.8826 298.406 70.0378 299.001 69.969 cv
299.836 69.8708 300.635 69.2405 300.99 68.4001 cv
301.302 67.6643 301.218 66.8992 300.759 66.301 cv
300.071 65.4041 297.702 65.3083 296.602 66.1331 cv
295.625 66.866 296.109 67.9583 296.687 68.7454 cv
cp
298.762 70.5056 mo
297.838 70.5056 296.961 69.9988 296.266 69.0544 cv
294.846 67.1218 295.808 66.0754 296.289 65.7151 cv
297.622 64.7151 300.314 64.8635 301.174 65.9836 cv
301.749 66.7346 301.858 67.6897 301.471 68.6038 cv
301.039 69.6272 300.093 70.3665 299.061 70.4875 cv
298.962 70.4998 298.861 70.5056 298.762 70.5056 cv
cp
.941176 .901961 .862745 rgb
f
383.864 135.357 mo
382.182 133.069 385.87 132.602 386.664 133.637 cv
387.793 135.111 385.413 137.465 383.864 135.357 cv
cp
1 1 .976471 rgb
f
385.22 133.379 mo
384.765 133.379 384.298 133.487 384.001 133.71 cv
383.563 134.038 383.588 134.54 384.075 135.202 cv
384.466 135.734 384.934 135.986 385.426 135.926 cv
385.913 135.869 386.38 135.5 386.588 135.007 cv
386.694 134.757 386.817 134.267 386.456 133.796 cv
386.246 133.521 385.742 133.379 385.22 133.379 cv
cp
385.288 136.457 mo
384.679 136.457 384.105 136.127 383.653 135.512 cv
382.716 134.235 383.364 133.534 383.687 133.292 cv
384.571 132.629 386.297 132.729 386.871 133.478 cv
387.252 133.976 387.325 134.607 387.069 135.211 cv
386.786 135.881 386.165 136.366 385.487 136.446 cv
385.288 136.457 li
cp
.941176 .901961 .862745 rgb
f
359.46 264.773 mo
357.305 261.842 362.03 261.244 363.046 262.57 cv
364.493 264.458 361.444 267.473 359.46 264.773 cv
cp
1 1 .976471 rgb
f
359.67 264.618 mo
360.187 265.322 360.81 265.655 361.469 265.575 cv
362.119 265.499 362.74 265.008 363.017 264.353 cv
363.258 263.783 363.193 263.192 362.839 262.73 cv
362.302 262.03 360.451 261.958 359.591 262.605 cv
358.844 263.164 359.222 264.009 359.67 264.618 cv
cp
361.285 266.109 mo
360.529 266.109 359.814 265.697 359.249 264.927 cv
358.087 263.346 358.882 262.484 359.277 262.187 cv
360.361 261.375 362.553 261.497 363.254 262.411 cv
363.725 263.027 363.814 263.809 363.498 264.557 cv
363.145 265.391 362.373 265.994 361.53 266.094 cv
361.285 266.109 li
cp
.941176 .901961 .862745 rgb
f
297.34 167.896 mo
295.867 165.891 299.097 165.483 299.793 166.389 cv
300.782 167.68 298.697 169.742 297.34 167.896 cv
cp
1 1 .976471 rgb
f
298.531 166.193 mo
298.139 166.193 297.736 166.286 297.479 166.479 cv
297.113 166.754 297.137 167.178 297.551 167.741 cv
297.885 168.197 298.281 168.411 298.705 168.363 cv
299.12 168.314 299.518 167.998 299.697 167.577 cv
299.787 167.365 299.891 166.948 299.585 166.548 cv
299.406 166.314 298.976 166.193 298.531 166.193 cv
cp
298.587 168.892 mo
298.044 168.892 297.532 168.598 297.13 168.051 cv
296.291 166.909 296.875 166.279 297.166 166.061 cv
297.951 165.471 299.488 165.562 300 166.23 cv
300.342 166.676 300.406 167.24 300.177 167.781 cv
299.925 168.378 299.371 168.81 298.765 168.882 cv
298.587 168.892 li
cp
.941176 .901961 .862745 rgb
f
369.01 184.513 mo
366.411 180.977 372.111 180.256 373.338 181.856 cv
375.083 184.134 371.404 187.771 369.01 184.513 cv
cp
1 1 .976471 rgb
f
369.22 184.359 mo
370.024 185.452 370.871 185.601 371.441 185.535 cv
372.243 185.441 373.01 184.836 373.352 184.029 cv
373.65 183.322 373.57 182.588 373.13 182.014 cv
372.469 181.154 370.193 181.061 369.136 181.854 cv
368.201 182.556 368.666 183.604 369.22 184.359 cv
cp
371.213 186.071 mo
370.318 186.071 369.47 185.581 368.8 184.668 cv
367.426 182.798 368.358 181.785 368.823 181.436 cv
370.11 180.47 372.714 180.613 373.545 181.697 cv
374.102 182.424 374.207 183.347 373.833 184.232 cv
373.415 185.221 372.5 185.937 371.502 186.054 cv
371.405 186.065 371.308 186.071 371.213 186.071 cv
cp
.941176 .901961 .862745 rgb
f
95.4705 229.603 mo
93.7053 227.2 97.5769 226.711 98.4094 227.797 cv
99.595 229.344 97.0964 231.815 95.4705 229.603 cv
cp
1 1 .976471 rgb
f
96.8933 227.514 mo
96.4133 227.514 95.9202 227.628 95.6067 227.864 cv
95.1409 228.213 95.1658 228.746 95.6814 229.448 cv
96.094 230.01 96.5886 230.274 97.1121 230.212 cv
97.6277 230.153 98.1218 229.761 98.342 229.24 cv
98.4543 228.976 98.5847 228.455 98.2019 227.956 cv
97.9788 227.664 97.4446 227.514 96.8933 227.514 cv
cp
96.9656 230.743 mo
96.3313 230.743 95.7322 230.4 95.26 229.756 cv
94.2825 228.426 94.9573 227.698 95.2932 227.446 cv
96.2165 226.753 98.0173 226.857 98.6169 227.638 cv
99.0139 228.156 99.0891 228.815 98.823 229.444 cv
98.5276 230.143 97.8796 230.649 97.1726 230.732 cv
96.9656 230.743 li
cp
.941176 .901961 .862745 rgb
f
71.6711 50.114 mo
69.5583 47.2395 74.1916 46.6531 75.1882 47.9534 cv
76.6072 49.8049 73.6164 52.7615 71.6711 50.114 cv
cp
1 1 .976471 rgb
f
71.8816 49.9592 mo
72.3874 50.6472 72.9954 50.9724 73.6413 50.8953 cv
74.2756 50.821 74.884 50.3406 75.155 49.7004 cv
75.3904 49.1428 75.3269 48.5642 74.9807 48.1126 cv
74.4563 47.4275 72.6438 47.3586 71.803 47.9915 cv
71.0745 48.5383 71.4436 49.3635 71.8816 49.9592 cv
cp
73.4607 51.4285 mo
72.718 51.4285 72.0154 51.0237 71.4602 50.2688 cv
70.3176 48.7131 71.0998 47.8655 71.4895 47.5735 cv
72.5535 46.7752 74.7078 46.8972 75.3957 47.7947 cv
75.8591 48.3997 75.947 49.1682 75.636 49.9041 cv
75.2893 50.7244 74.5305 51.3171 73.7019 51.4143 cv
73.4607 51.4285 li
cp
.941176 .901961 .862745 rgb
f
183.065 28.073 mo
184.434 23.804 178.68 24.9563 178.012 26.9036 cv
177.061 29.676 181.804 32.0042 183.065 28.073 cv
cp
1 1 .976471 rgb
f
181.302 25.4192 mo
180.061 25.4192 178.553 26.1296 178.259 26.988 cv
178.019 27.6887 178.179 28.4275 178.699 29.0164 cv
179.293 29.6882 180.237 30.0256 181.044 29.8562 cv
181.618 29.7361 182.392 29.3147 182.817 27.9929 cv
183.11 27.0789 183.219 25.9104 182.081 25.533 cv
181.846 25.4553 181.581 25.4192 181.302 25.4192 cv
cp
180.607 30.4236 mo
179.763 30.4236 178.904 30.0369 178.307 29.3621 cv
177.66 28.6287 177.462 27.7014 177.765 26.8186 cv
178.216 25.5022 180.687 24.5188 182.246 25.0374 cv
182.808 25.2234 184.036 25.9001 183.314 28.1521 cv
183.065 28.0725 li
183.314 28.1521 li
182.923 29.3709 182.156 30.1575 181.151 30.3674 cv
180.972 30.4055 180.79 30.4236 180.607 30.4236 cv
cp
.941176 .901961 .862745 rgb
f
91.4021 126.409 mo
92.5129 122.945 87.843 123.88 87.301 125.46 cv
86.529 127.71 90.3791 129.599 91.4021 126.409 cv
cp
1 1 .976471 rgb
f
89.9646 124.303 mo
88.9773 124.303 87.7815 124.865 87.5481 125.545 cv
87.3596 126.096 87.4861 126.678 87.8957 127.142 cv
88.3655 127.674 89.1086 127.941 89.7512 127.808 cv
90.4016 127.672 90.8865 127.16 91.1531 126.329 cv
91.384 125.609 91.4734 124.689 90.5881 124.395 cv
90.4001 124.333 90.1872 124.303 89.9646 124.303 cv
cp
89.407 128.366 mo
88.7082 128.366 87.9968 128.046 87.5041 127.488 cv
86.9661 126.879 86.802 126.109 87.0544 125.375 cv
87.4275 124.287 89.4665 123.473 90.7522 123.899 cv
91.2219 124.054 92.2502 124.619 91.6506 126.489 cv
91.3279 127.495 90.6916 128.145 89.8586 128.32 cv
89.7102 128.351 89.5588 128.366 89.407 128.366 cv
cp
.941176 .901961 .862745 rgb
f
116.897 177.51 mo
118.008 174.046 113.339 174.981 112.797 176.561 cv
112.025 178.811 115.874 180.7 116.897 177.51 cv
cp
1 1 .976471 rgb
f
115.46 175.404 mo
114.473 175.404 113.277 175.966 113.044 176.645 cv
112.855 177.197 112.981 177.779 113.391 178.243 cv
113.862 178.775 114.609 179.043 115.247 178.909 cv
115.897 178.773 116.382 178.261 116.649 177.43 cv
116.88 176.71 116.969 175.789 116.083 175.495 cv
115.895 175.433 115.683 175.404 115.46 175.404 cv
cp
114.903 179.467 mo
114.204 179.467 113.492 179.146 113 178.589 cv
112.462 177.98 112.298 177.21 112.55 176.476 cv
112.923 175.387 114.961 174.572 116.248 174.999 cv
116.718 175.155 117.746 175.719 117.146 177.589 cv
116.823 178.595 116.187 179.246 115.354 179.42 cv
115.206 179.451 115.054 179.467 114.903 179.467 cv
cp
.941176 .901961 .862745 rgb
f
125.107 25.3962 mo
126.289 21.7087 121.318 22.7043 120.741 24.386 cv
119.92 26.781 124.018 28.7922 125.107 25.3962 cv
cp
1 1 .976471 rgb
f
123.579 23.1389 mo
122.521 23.1389 121.239 23.7415 120.988 24.4709 cv
120.785 25.0632 120.921 25.6887 121.362 26.1877 cv
121.866 26.759 122.668 27.0466 123.353 26.9021 cv
124.052 26.7561 124.572 26.2078 124.858 25.3167 cv
125.106 24.5427 125.201 23.553 124.246 23.2361 cv
124.044 23.1692 123.817 23.1389 123.579 23.1389 cv
cp
122.983 27.4626 mo
122.244 27.4626 121.491 27.1238 120.97 26.5334 cv
120.402 25.8899 120.228 25.0764 120.494 24.3015 cv
120.89 23.1492 123.048 22.2898 124.41 22.74 cv
124.906 22.9045 125.989 23.5002 125.355 25.4758 cv
125.014 26.5408 124.341 27.2292 123.46 27.4138 cv
123.304 27.4465 123.144 27.4626 122.983 27.4626 cv
cp
.941176 .901961 .862745 rgb
f
123.597 137.567 mo
124.443 134.93 120.888 135.642 120.475 136.845 cv
119.888 138.558 122.819 139.996 123.597 137.567 cv
cp
1 1 .976471 rgb
f
122.512 136.029 mo
121.788 136.029 120.89 136.442 120.722 136.93 cv
120.535 137.474 120.801 137.886 120.975 138.084 cv
121.319 138.473 121.863 138.668 122.328 138.572 cv
122.8 138.472 123.153 138.098 123.349 137.488 cv
123.592 136.729 123.461 136.26 122.958 136.093 cv
122.824 136.049 122.673 136.029 122.512 136.029 cv
cp
122.079 139.12 mo
121.53 139.12 120.97 138.868 120.583 138.43 cv
120.158 137.949 120.029 137.341 120.229 136.76 cv
120.528 135.887 122.097 135.259 123.123 135.597 cv
123.498 135.722 124.32 136.171 123.846 137.647 cv
123.593 138.435 123.092 138.946 122.435 139.083 cv
122.318 139.108 122.198 139.12 122.079 139.12 cv
cp
.941176 .901961 .862745 rgb
f
85.0979 177.51 mo
86.1516 174.224 81.7229 175.111 81.2087 176.61 cv
80.4768 178.743 84.1277 180.535 85.0979 177.51 cv
cp
1 1 .976471 rgb
f
83.7331 175.526 mo
82.8025 175.526 81.6755 176.054 81.4558 176.694 cv
81.2126 177.404 81.5564 177.94 81.7825 178.196 cv
82.2253 178.698 82.928 178.948 83.5295 178.823 cv
84.1413 178.696 84.5979 178.214 84.8494 177.43 cv
85.0666 176.753 85.1516 175.887 84.322 175.613 cv
84.1443 175.553 83.9436 175.526 83.7331 175.526 cv
cp
83.2063 179.379 mo
82.5398 179.379 81.8611 179.074 81.3913 178.542 cv
80.8777 177.961 80.7214 177.226 80.9617 176.525 cv
81.3249 175.465 83.2346 174.701 84.4866 175.116 cv
84.9358 175.265 85.9192 175.805 85.3469 177.59 cv
85.0393 178.549 84.4319 179.168 83.637 179.335 cv
83.4954 179.365 83.3508 179.379 83.2063 179.379 cv
cp
.941176 .901961 .862745 rgb
f
386.355 309.92 mo
387.316 306.926 383.279 307.734 382.81 309.1 cv
382.143 311.045 385.471 312.678 386.355 309.92 cv
cp
1 1 .976471 rgb
f
385.108 308.135 mo
384.269 308.135 383.255 308.61 383.057 309.185 cv
382.84 309.82 383.147 310.301 383.35 310.531 cv
383.75 310.981 384.38 311.209 384.922 311.095 cv
385.47 310.981 385.881 310.546 386.107 309.841 cv
386.39 308.957 386.233 308.409 385.64 308.213 cv
385.48 308.159 385.299 308.135 385.108 308.135 cv
cp
384.632 311.647 mo
384.017 311.647 383.392 311.366 382.959 310.876 cv
382.486 310.34 382.342 309.662 382.563 309.015 cv
382.898 308.039 384.655 307.335 385.805 307.717 cv
386.221 307.855 387.133 308.354 386.604 310 cv
386.321 310.882 385.761 311.453 385.029 311.607 cv
384.898 311.634 384.765 311.647 384.632 311.647 cv
cp
.941176 .901961 .862745 rgb
f
352.668 339.108 mo
353.922 335.197 348.65 336.252 348.038 338.036 cv
347.167 340.576 351.512 342.709 352.668 339.108 cv
cp
1 1 .976471 rgb
f
351.05 336.698 mo
349.921 336.698 348.552 337.342 348.285 338.121 cv
348.067 338.755 348.213 339.424 348.683 339.957 cv
349.223 340.568 350.078 340.875 350.811 340.72 cv
351.332 340.612 352.034 340.229 352.42 339.028 cv
352.668 339.108 li
352.42 339.028 li
352.684 338.199 352.786 337.141 351.76 336.801 cv
351.546 336.731 351.303 336.698 351.05 336.698 cv
cp
350.416 341.283 mo
349.636 341.283 348.843 340.926 348.293 340.303 cv
347.693 339.625 347.51 338.768 347.791 337.95 cv
348.208 336.736 350.486 335.827 351.925 336.305 cv
352.445 336.478 353.585 337.106 352.917 339.187 cv
352.556 340.311 351.846 341.037 350.919 341.232 cv
350.754 341.267 350.585 341.283 350.416 341.283 cv
cp
.941176 .901961 .862745 rgb
f
301.865 305.186 mo
303.292 300.739 297.297 301.939 296.6 303.968 cv
295.609 306.857 300.552 309.281 301.865 305.186 cv
cp
1 1 .976471 rgb
f
300.03 302.41 mo
298.732 302.41 297.155 303.155 296.847 304.053 cv
296.595 304.785 296.763 305.56 297.307 306.176 cv
297.929 306.879 298.916 307.234 299.761 307.055 cv
300.363 306.929 301.174 306.489 301.617 305.107 cv
301.924 304.15 302.039 302.925 300.844 302.53 cv
300.598 302.448 300.321 302.41 300.03 302.41 cv
cp
299.303 307.624 mo
298.427 307.624 297.535 307.222 296.917 306.522 cv
296.244 305.761 296.039 304.799 296.353 303.883 cv
296.822 302.517 299.389 301.495 301.009 302.033 cv
301.591 302.227 302.864 302.928 302.114 305.266 cv
301.709 306.531 300.911 307.348 299.869 307.567 cv
299.683 307.606 299.494 307.624 299.303 307.624 cv
cp
.941176 .901961 .862745 rgb
f
416.34 315.487 mo
417.236 312.693 413.469 313.447 413.033 314.721 cv
412.41 316.535 415.514 318.059 416.34 315.487 cv
cp
1 1 .976471 rgb
f
415.192 313.841 mo
414.42 313.841 413.459 314.283 413.28 314.806 cv
413.08 315.39 413.363 315.832 413.551 316.044 cv
413.919 316.46 414.502 316.67 414.998 316.565 cv
415.504 316.459 415.882 316.058 416.092 315.406 cv
416.352 314.593 416.21 314.089 415.668 313.909 cv
415.525 313.863 415.364 313.841 415.192 313.841 cv
cp
414.731 317.115 mo
414.154 317.115 413.566 316.851 413.159 316.39 cv
412.713 315.885 412.577 315.245 412.786 314.636 cv
413.1 313.718 414.753 313.053 415.833 313.413 cv
416.225 313.544 417.086 314.015 416.589 315.566 cv
416.323 316.395 415.796 316.932 415.105 317.076 cv
414.982 317.103 414.857 317.115 414.731 317.115 cv
cp
.941176 .901961 .862745 rgb
f
202.681 355.734 mo
203.577 352.941 199.812 353.695 199.374 354.969 cv
198.752 356.783 201.857 358.307 202.681 355.734 cv
cp
1 1 .976471 rgb
f
201.534 354.089 mo
200.761 354.089 199.801 354.531 199.621 355.054 cv
199.421 355.637 199.705 356.079 199.892 356.291 cv
200.26 356.708 200.842 356.915 201.34 356.813 cv
201.846 356.707 202.224 356.306 202.433 355.655 cv
202.694 354.841 202.551 354.337 202.009 354.157 cv
201.867 354.111 201.705 354.089 201.534 354.089 cv
cp
201.073 357.363 mo
200.495 357.363 199.907 357.098 199.5 356.637 cv
199.054 356.132 198.918 355.493 199.127 354.883 cv
199.442 353.966 201.094 353.302 202.174 353.661 cv
202.567 353.792 203.427 354.263 202.93 355.814 cv
202.664 356.643 202.138 357.18 201.447 357.324 cv
201.324 357.35 201.199 357.363 201.073 357.363 cv
cp
.941176 .901961 .862745 rgb
f
252.686 58.1008 mo
254.012 53.9661 248.439 55.0823 247.792 56.968 cv
246.871 59.6536 251.466 61.9085 252.686 58.1008 cv
cp
1 1 .976471 rgb
f
250.978 55.5383 mo
249.779 55.5383 248.323 56.2244 248.039 57.053 cv
247.807 57.7283 247.963 58.4412 248.464 59.009 cv
249.037 59.658 249.947 59.9836 250.727 59.8201 cv
251.282 59.7039 252.029 59.2976 252.438 58.0208 cv
252.72 57.1394 252.827 56.0125 251.731 55.6487 cv
251.504 55.573 251.248 55.5383 250.978 55.5383 cv
cp
250.305 60.3855 mo
249.486 60.3855 248.651 60.01 248.072 59.3547 cv
247.443 58.6423 247.251 57.7415 247.545 56.8835 cv
247.983 55.6047 250.384 54.6511 251.895 55.1526 cv
252.442 55.3342 253.637 55.9919 252.935 58.1804 cv
252.556 59.363 251.81 60.1272 250.835 60.3313 cv
250.661 60.3679 250.483 60.3855 250.305 60.3855 cv
cp
.941176 .901961 .862745 rgb
f
220.382 31.0188 mo
221.171 28.5603 217.857 29.2239 217.472 30.3455 cv
216.924 31.9421 219.656 33.283 220.382 31.0188 cv
cp
1 1 .976471 rgb
f
219.368 29.6018 mo
218.7 29.6018 217.873 29.9812 217.718 30.4304 cv
217.548 30.9294 217.791 31.3074 217.951 31.489 cv
218.266 31.8469 218.766 32.0256 219.196 31.9373 cv
219.629 31.8464 219.953 31.5012 220.134 30.9392 cv
220.357 30.2429 220.238 29.8127 219.781 29.6609 cv
219.657 29.6204 219.517 29.6018 219.368 29.6018 cv
cp
218.967 32.4832 mo
218.45 32.4832 217.923 32.2468 217.559 31.8347 cv
217.159 31.3816 217.037 30.8079 217.225 30.261 cv
217.507 29.4397 218.98 28.8445 219.946 29.1658 cv
220.3 29.2834 221.077 29.7073 220.631 31.0984 cv
220.393 31.8396 219.922 32.3191 219.302 32.449 cv
219.192 32.4719 219.08 32.4832 218.967 32.4832 cv
cp
.941176 .901961 .862745 rgb
f
447.463 242.587 mo
448.817 238.364 443.123 239.504 442.462 241.43 cv
441.521 244.174 446.215 246.478 447.463 242.587 cv
cp
1 1 .976471 rgb
f
445.718 239.964 mo
444.49 239.964 443 240.666 442.709 241.516 cv
442.471 242.207 442.631 242.938 443.144 243.519 cv
443.731 244.185 444.663 244.519 445.462 244.35 cv
446.029 244.231 446.795 243.815 447.214 242.508 cv
447.504 241.605 447.612 240.45 446.488 240.077 cv
446.256 239.999 445.993 239.964 445.718 239.964 cv
cp
445.03 244.916 mo
444.194 244.916 443.343 244.533 442.752 243.865 cv
442.111 243.139 441.915 242.22 442.215 241.345 cv
442.662 240.042 445.108 239.068 446.653 239.581 cv
447.21 239.766 448.427 240.437 447.712 242.667 cv
447.324 243.873 446.563 244.653 445.569 244.862 cv
445.391 244.899 445.211 244.916 445.03 244.916 cv
cp
.941176 .901961 .862745 rgb
f
98.9343 93.9441 mo
100.196 90.0105 94.8933 91.0725 94.2781 92.8665 cv
93.4016 95.4211 97.7727 97.5667 98.9343 93.9441 cv
cp
1 1 .976471 rgb
f
97.3074 91.5188 mo
96.1716 91.5188 94.7942 92.1672 94.5251 92.9514 cv
94.3064 93.5896 94.4524 94.2629 94.9265 94.7996 cv
95.4685 95.4133 96.3303 95.7229 97.0671 95.5671 cv
97.592 95.4578 98.2981 95.073 98.6858 93.864 cv
98.9529 93.031 99.0544 91.9661 98.0212 91.6233 cv
97.8059 91.5515 97.5627 91.5188 97.3074 91.5188 cv
cp
96.6692 96.1306 mo
95.886 96.1306 95.0876 95.7712 94.5349 95.1458 cv
93.9333 94.4641 93.7493 93.6028 94.031 92.782 cv
94.4499 91.5603 96.7419 90.6472 98.1858 91.1272 cv
98.7092 91.301 99.8542 91.9309 99.1829 94.0242 cv
98.8205 95.1536 98.1077 95.8835 97.1746 96.0789 cv
97.0085 96.1135 96.8391 96.1306 96.6692 96.1306 cv
cp
.941176 .901961 .862745 rgb
f
218.951 92.4651 mo
217.186 90.0632 221.057 89.5735 221.889 90.6599 cv
223.075 92.2068 220.576 94.677 218.951 92.4651 cv
cp
1 1 .976471 rgb
f
220.374 90.3762 mo
219.893 90.3762 219.401 90.4905 219.087 90.7258 cv
218.621 91.0759 218.646 91.6086 219.162 92.3103 cv
219.574 92.8718 220.065 93.1355 220.593 93.075 cv
221.108 93.0144 221.602 92.6243 221.822 92.1028 cv
221.934 91.8376 222.065 91.3181 221.682 90.8186 cv
221.459 90.5271 220.925 90.3762 220.374 90.3762 cv
cp
220.446 93.6062 mo
219.812 93.6062 219.213 93.262 218.74 92.6199 cv
217.763 91.2893 218.437 90.5598 218.773 90.3083 cv
219.696 89.6145 221.499 89.72 222.097 90.5007 cv
222.494 91.0193 222.57 91.6775 222.303 92.3064 cv
222.008 93.0056 221.36 93.511 220.653 93.594 cv
220.446 93.6062 li
cp
.941176 .901961 .862745 rgb
f
55.4978 277.965 mo
53.0793 274.674 58.383 274.003 59.5237 275.491 cv
61.1482 277.612 57.7248 280.995 55.4978 277.965 cv
cp
1 1 .976471 rgb
f
55.7082 277.811 mo
56.4504 278.82 57.2307 278.956 57.7576 278.898 cv
58.4968 278.81 59.2053 278.252 59.5203 277.507 cv
59.7961 276.856 59.7214 276.179 59.3162 275.651 cv
58.7063 274.855 56.6028 274.772 55.6262 275.505 cv
54.7673 276.15 55.1965 277.115 55.7082 277.811 cv
cp
57.5461 279.432 mo
56.7082 279.432 55.9148 278.974 55.2869 278.119 cv
53.9988 276.366 54.8757 275.415 55.3122 275.087 cv
56.5173 274.184 58.9538 274.319 59.7312 275.332 cv
60.2537 276.015 60.3523 276.881 60.0017 277.71 cv
59.6101 278.637 58.7532 279.306 57.8181 279.416 cv
57.7273 279.427 57.637 279.432 57.5461 279.432 cv
cp
.941176 .901961 .862745 rgb
f
206.542 392.371 mo
184.55 392.371 164.535 390.979 149.565 388.699 cv
170.752 382.902 191.613 373.076 216.521 364.802 cv
258.19 365.615 290.507 371.455 290.507 378.538 cv
290.507 386.178 252.915 392.371 206.542 392.371 cv
.938977 .937009 .958662 rgb
f
149.565 388.699 mo
132.97 386.172 122.577 382.555 122.577 378.538 cv
122.577 370.899 160.169 364.705 206.542 364.705 cv
209.918 364.705 213.249 364.738 216.521 364.802 cv
191.613 373.076 170.752 382.902 149.565 388.699 cv
.843137 .858823 .952941 rgb
f
219.337 92.5383 mo
218.71 92.533 218.111 92.2854 217.489 92.2078 cv
216.633 92.0999 215.762 92.3162 214.904 92.2263 cv
211.988 91.9231 199.677 84.9338 214.414 74.2849 cv
232.775 61.0164 227.054 92.6096 219.337 92.5383 cv
cp
.572549 .258824 .184314 rgb
f
194.684 87.0989 mo
198.452 91.3113 205.531 90.0012 203.632 80.0916 cv
202.245 72.8557 188.412 80.0886 194.684 87.0989 cv
cp
.737255 .4 .309804 rgb
f
235.168 114.438 mo
225.613 107.473 216.609 107.462 220.603 89.9041 cv
203.969 88.5916 li
203.056 101.661 203.917 102.604 198.209 107.337 cv
196.951 108.379 188.978 112.641 188.978 112.641 cv
201.306 123.718 224.203 123.234 235.168 114.438 cv
cp
.984314 .603922 .545098 rgb
f
220.15 92.1467 mo
219.676 95.2209 219.372 97.4875 219.891 100.385 cv
213.844 96.1267 205.289 98.4875 203.805 91.1091 cv
203.283 88.5164 210.334 100.246 220.15 92.1467 cv
cp
.92549 .47451 .360784 rgb
f
200.172 63.8342 mo
192.718 88.8191 212.365 106.708 223.511 87.5125 cv
243.624 52.8718 206.239 43.4988 200.172 63.8342 cv
cp
.984314 .603922 .545098 rgb
f
215.995 87.7815 mo
208.579 87.6541 li
208.417 87.6511 208.298 87.803 208.343 87.9578 cv
208.852 89.6873 211.246 93.5032 216.167 88.1848 cv
216.306 88.0339 216.2 87.7849 215.995 87.7815 cv
cp
1 1 1 rgb
f
219.38 69.7996 mo
217.86 69.9651 217.987 71.1799 219.123 71.425 cv
231.233 74.0378 223.145 69.3894 219.38 69.7996 cv
cp
.737255 .4 .309804 rgb
f
207.767 68.7683 mo
209.23 69.2117 208.881 70.3821 207.719 70.4133 cv
195.335 70.7454 204.142 67.6702 207.767 68.7683 cv
cp
f
212.606 82.5295 mo
212.541 82.5237 li
211.204 82.2712 210.494 82.1169 210.228 81.6277 cv
209.982 81.176 210.195 80.6531 210.581 79.7039 cv
211.013 78.6453 211.665 77.0452 212.187 74.4314 cv
212.224 74.2429 212.406 74.1189 212.597 74.1584 cv
212.785 74.196 212.907 74.3796 212.87 74.5681 cv
212.335 77.2463 211.668 78.8835 211.227 79.9666 cv
210.961 80.6179 210.751 81.1326 210.84 81.2947 cv
210.96 81.5164 211.908 81.6956 212.671 81.8391 cv
212.86 81.8748 212.984 82.0569 212.948 82.2458 cv
212.916 82.4128 212.771 82.5295 212.606 82.5295 cv
cp
.92549 .47451 .360784 rgb
f
221.699 76.8699 mo
220.287 76.8699 218.728 76.2542 218.002 75.6599 cv
217.779 75.4773 217.746 75.1482 217.928 74.925 cv
218.111 74.7009 218.44 74.6692 218.663 74.8513 cv
219.584 75.6042 221.965 76.2224 222.94 75.5071 cv
223.174 75.3357 223.5 75.3875 223.671 75.6199 cv
223.841 75.8528 223.791 76.1794 223.558 76.3499 cv
223.051 76.7214 222.393 76.8699 221.699 76.8699 cv
cp
.219608 .156863 .137255 rgb
f
205.995 75.1482 mo
205.152 75.1482 204.186 74.8982 203.103 74.3972 cv
202.842 74.2761 202.727 73.9661 202.848 73.7043 cv
202.969 73.4421 203.281 73.3284 203.542 73.449 cv
205.375 74.2952 206.684 74.3264 207.546 73.5403 cv
207.759 73.3469 208.09 73.3616 208.284 73.5745 cv
208.478 73.7874 208.463 74.1179 208.25 74.3123 cv
207.639 74.8694 206.885 75.1482 205.995 75.1482 cv
cp
f
228.185 96.8748 mo
228.132 96.8708 li
227.941 96.8416 227.811 96.6633 227.84 96.4734 cv
228.401 92.8459 229.061 89.4749 229.643 86.5007 cv
230.747 80.8547 231.701 75.9783 231.572 71.6067 cv
231.188 58.5466 226.297 51.6082 222.226 49.6345 cv
220.885 48.9841 219.666 48.9055 218.967 49.4246 cv
218.473 49.7908 218.284 50.4309 218.418 51.2761 cv
218.449 51.4661 218.319 51.6443 218.129 51.6746 cv
217.937 51.7073 217.761 51.5759 217.731 51.3855 cv
217.555 50.2839 217.846 49.3884 218.551 48.8655 cv
219.463 48.1887 220.95 48.2419 222.53 49.0076 cv
226.777 51.0662 231.875 58.2146 232.269 71.5867 cv
232.4 76.0354 231.439 80.9475 230.326 86.6345 cv
229.717 89.7473 229.087 92.9661 228.529 96.5798 cv
228.502 96.7517 228.354 96.8748 228.185 96.8748 cv
cp
.737255 .4 .309804 rgb
f
218.228 52.344 mo
218.015 52.3328 217.868 52.1677 217.88 51.9758 cv
218.032 49.3337 216.048 48.0911 214.357 47.5144 cv
214.176 47.4524 214.078 47.2546 214.14 47.072 cv
214.202 46.8904 214.4 46.7918 214.583 46.8552 cv
217.296 47.781 218.714 49.6135 218.575 52.0159 cv
218.564 52.2009 218.41 52.344 218.228 52.344 cv
cp
f
219.042 56.8293 mo
219.556 60.9768 216.115 61.4285 213.118 61.51 cv
203.631 61.7693 199.023 73.7151 198.803 77.7561 cv
191.937 61.3674 206.82 44.4397 216.168 48.6604 cv
218.967 49.9246 218.73 54.3088 219.042 56.8293 cv
cp
f
228.897 76.5632 mo
226.518 75.4158 225.497 80.6262 225.063 83.2244 cv
224.206 88.3459 232.645 78.3699 228.897 76.5632 cv
cp
.984314 .603922 .545098 rgb
f
197.868 71.1941 mo
200.49 70.8708 199.785 76.1331 199.364 78.7336 cv
198.532 83.8591 193.739 71.7034 197.868 71.1941 cv
cp
f
227.085 81.7102 mo
227.73 81.1687 227.794 80.1687 227.803 79.2742 cv
227.806 79.0212 228.187 79.0271 228.184 79.2776 cv
228.151 82.6355 226.492 82.2053 227.085 81.7102 cv
cp
.92549 .47451 .360784 rgb
f
227.078 98.1531 mo
228.909 81.0793 235.026 72.0007 227.831 57.2258 cv
223.828 49.0066 218.281 48.3577 217.47 51.7073 cv
217.346 52.221 226.708 101.611 227.078 98.1531 cv
cp
.737255 .4 .309804 rgb
f
208.101 61.8904 mo
207.854 61.7888 li
207.718 61.6526 207.718 61.4324 207.854 61.2957 cv
210.246 58.9006 211.786 58.8596 213.276 58.8201 cv
214.085 58.7981 214.848 58.7776 215.774 58.3875 cv
216.418 58.116 217.154 57.53 217.285 56.7004 cv
217.316 56.51 217.495 56.3787 217.684 56.4109 cv
217.874 56.4407 218.004 56.6194 217.973 56.8093 cv
217.826 57.7395 217.087 58.5901 216.045 59.0295 cv
214.998 59.4705 214.132 59.4939 213.295 59.5164 cv
211.879 59.554 210.542 59.5901 208.347 61.7883 cv
208.101 61.8904 li
cp
.572549 .258824 .184314 rgb
f
199.197 64.8689 mo
199.135 64.8635 li
198.946 64.8298 198.82 64.6497 198.853 64.4597 cv
199.447 61.114 201.479 58.2146 203.271 55.656 cv
203.382 55.4988 203.599 55.4607 203.757 55.5706 cv
203.914 55.6814 203.952 55.8982 203.842 56.0559 cv
202.091 58.5554 200.106 61.3879 199.539 64.5818 cv
199.509 64.7502 199.362 64.8689 199.197 64.8689 cv
cp
f
200.381 68.5735 mo
200.311 68.5662 li
200.122 68.5276 200.001 68.344 200.039 68.1555 cv
200.629 65.2605 201.056 64.5608 202.629 62.8235 cv
202.758 62.6809 202.978 62.6692 203.121 62.7991 cv
203.263 62.928 203.275 63.1482 203.145 63.2908 cv
201.739 64.845 201.307 65.4207 200.721 68.2942 cv
200.688 68.4597 200.543 68.5735 200.381 68.5735 cv
cp
f
227.084 59.1658 mo
226.946 59.1658 226.814 59.0823 226.76 58.9451 cv
225.33 55.3113 222.205 51.6394 219.426 51.7097 cv
219.258 51.7205 219.073 51.5667 219.067 51.3743 cv
219.06 51.1819 219.21 51.0208 219.402 51.0139 cv
222.581 50.8816 225.91 54.8835 227.408 58.6897 cv
227.479 58.8689 227.391 59.071 227.212 59.1418 cv
227.084 59.1658 li
cp
f
222.658 72.6453 mo
222.5 72.6453 222.357 72.5369 222.32 72.3762 cv
221.094 67.1345 220.706 64.0437 220.449 61.9988 cv
220.227 60.2336 220.116 59.3474 219.66 58.5979 cv
219.56 58.4334 219.613 58.219 219.777 58.1189 cv
219.941 58.0198 220.156 58.072 220.255 58.2356 cv
220.789 59.1126 220.914 60.1072 221.14 61.9119 cv
221.395 63.9426 221.781 67.0115 222.998 72.2175 cv
223.042 72.405 222.926 72.592 222.738 72.636 cv
222.658 72.6453 li
cp
f
228.012 77.6877 mo
227.953 77.6829 li
227.764 77.6501 227.636 77.4705 227.669 77.2805 cv
227.695 77.1277 li
228.417 72.906 229.317 67.6521 227.322 63.1672 cv
227.244 62.9915 227.323 62.7859 227.499 62.7073 cv
227.675 62.6296 227.881 62.7087 227.959 62.8845 cv
230.039 67.5618 229.12 72.9309 228.382 77.2454 cv
228.355 77.3982 li
228.326 77.5681 228.179 77.6877 228.012 77.6877 cv
cp
f
226.495 89.5139 mo
226.32 89.5139 226.169 89.3821 226.149 89.2039 cv
225.77 85.7996 225.196 82.3782 224.442 79.0344 cv
224.4 78.8464 224.518 78.6604 224.705 78.6179 cv
224.892 78.5759 225.08 78.6936 225.122 78.8811 cv
225.881 82.2498 226.46 85.697 226.842 89.1267 cv
226.863 89.3181 226.725 89.49 226.534 89.5115 cv
226.495 89.5139 li
cp
f
216.946 54.1624 mo
216.841 54.1467 li
216.657 54.0886 216.556 53.8933 216.613 53.7097 cv
217.183 51.8992 216.156 50.9221 215.196 50.4211 cv
213.133 49.3455 209.423 49.5759 208.033 51.3796 cv
207.916 51.532 207.697 51.5598 207.545 51.4426 cv
207.393 51.3254 207.364 51.1067 207.482 50.9543 cv
209.108 48.843 213.208 48.5989 215.518 49.803 cv
217.185 50.6726 217.827 52.1731 217.278 53.9187 cv
217.231 54.0671 217.094 54.1624 216.946 54.1624 cv
cp
f
195.493 84.8547 mo
195.319 84.8079 li
194.411 84.2834 194.071 83.3826 194.361 82.2717 cv
194.698 80.9758 195.869 79.6438 196.681 79.6326 cv
196.885 79.6077 197.031 79.7834 197.034 79.9763 cv
197.037 80.1682 196.883 80.3264 196.691 80.3293 cv
196.326 80.3342 195.329 81.3176 195.034 82.447 cv
194.825 83.2498 195.038 83.8411 195.667 84.2048 cv
195.834 84.301 195.891 84.5144 195.795 84.6804 cv
195.73 84.7922 195.614 84.8547 195.493 84.8547 cv
cp
f
200.261 86.613 mo
200.021 86.5173 li
198.917 85.4675 198.26 83.9309 198.265 82.4075 cv
198.266 82.2151 198.422 82.0598 198.614 82.0598 cv
198.807 82.0608 198.963 82.217 198.962 82.4094 cv
198.958 83.7454 199.533 85.092 200.501 86.0125 cv
200.64 86.1453 200.646 86.3655 200.513 86.5051 cv
200.445 86.5769 200.353 86.613 200.261 86.613 cv
cp
f
198.778 88.1716 mo
198.721 88.1672 li
197.724 88.0046 196.801 87.4026 196.25 86.5554 cv
196.146 86.3943 196.192 86.1785 196.353 86.0735 cv
196.514 85.9685 196.73 86.0144 196.835 86.176 cv
197.28 86.8611 198.027 87.3484 198.833 87.4797 cv
199.023 87.5105 199.152 87.6897 199.121 87.8796 cv
199.093 88.0505 198.945 88.1716 198.778 88.1716 cv
cp
f
198.251 77.7307 mo
198.14 77.7307 198.031 77.678 197.964 77.5803 cv
197.258 76.5549 196.937 74.5261 198.02 73.5505 cv
198.161 73.4216 198.382 73.4324 198.511 73.5764 cv
198.64 73.719 198.629 73.9392 198.486 74.0681 cv
197.709 74.7683 198.002 76.408 198.538 77.1848 cv
198.647 77.3435 198.607 77.5603 198.448 77.6692 cv
198.251 77.7307 li
cp
.92549 .47451 .360784 rgb
f
219.572 293.449 mo
212.739 306.947 213.016 312.781 209.274 313.662 cv
206.245 314.376 205.174 282.26 207.215 279.085 cv
208.31 277.381 214.984 279.574 216.195 280.039 cv
222.662 282.52 231.9 279.708 238.785 278.948 cv
240.433 278.766 239.812 289.793 239.609 290.508 cv
219.576 289.892 221.005 290.618 219.572 293.449 cv
cp
1 1 .968627 rgb
f
209.072 278.794 mo
208.305 278.794 207.729 278.931 207.508 279.274 cv
205.785 281.954 206.347 309.47 208.91 313.095 cv
208.953 313.154 209.099 313.351 209.194 313.323 cv
211.186 312.853 211.987 310.716 213.581 306.46 cv
214.765 303.298 216.388 298.967 219.26 293.292 cv
219.372 293.072 219.466 292.864 219.554 292.668 cv
220.676 290.191 220.944 289.594 239.329 290.151 cv
239.662 288.14 239.722 279.552 238.824 279.293 cv
237.079 279.487 235.198 279.809 233.207 280.151 cv
227.474 281.133 220.978 282.246 216.07 280.365 cv
214.481 279.755 211.107 278.794 209.072 278.794 cv
cp
209.172 314.023 mo
208.933 314.023 208.634 313.91 208.342 313.496 cv
205.587 309.602 205.073 281.773 206.922 278.897 cv
208.321 276.725 216.239 279.683 216.319 279.714 cv
221.05 281.528 227.446 280.432 233.089 279.464 cv
235.091 279.12 236.982 278.797 238.747 278.602 cv
238.924 278.583 239.18 278.617 239.415 278.896 cv
240.742 280.465 240.143 289.904 239.944 290.603 cv
239.87 290.865 li
239.598 290.857 li
221.393 290.296 221.137 290.86 220.189 292.955 cv
220.097 293.159 219.999 293.376 219.883 293.606 cv
217.027 299.247 215.412 303.557 214.234 306.704 cv
212.552 311.193 211.708 313.446 209.353 314.001 cv
209.172 314.023 li
cp
.933333 .894118 .85098 rgb
f
187.495 370.062 mo
175.463 379.233 169.676 380.019 169.489 383.86 cv
169.336 386.968 201.113 382.188 203.864 379.604 cv
205.341 378.218 201.972 372.053 201.295 370.948 cv
197.681 365.037 198.768 355.443 198.265 348.533 cv
198.145 346.88 187.413 349.493 186.748 349.823 cv
190.992 369.411 190.018 368.139 187.495 370.062 cv
cp
1 1 .968627 rgb
f
187.706 370.339 mo
182.647 374.196 178.682 376.577 175.788 378.317 cv
171.892 380.656 169.936 381.831 169.837 383.876 cv
169.832 383.976 170.047 384.083 170.113 384.114 cv
174.143 385.978 201.304 381.531 203.626 379.35 cv
204.712 378.33 202.22 373.126 200.998 371.128 cv
198.255 366.644 198.171 360.054 198.096 354.24 cv
198.07 352.219 198.046 350.31 197.918 348.559 cv
197.498 347.721 189.066 349.341 187.15 350.033 cv
191.039 368.01 190.499 368.383 188.265 369.938 cv
188.09 370.059 187.903 370.189 187.706 370.339 cv
cp
173.886 385.242 mo
172.006 385.242 170.569 385.092 169.821 384.746 cv
169.235 384.475 169.128 384.106 169.14 383.843 cv
169.259 381.426 171.321 380.188 175.429 377.719 cv
178.309 375.989 182.255 373.617 187.284 369.785 cv
187.489 369.628 187.684 369.492 187.867 369.365 cv
189.758 368.051 190.265 367.698 186.407 349.897 cv
186.35 349.632 li
186.593 349.511 li
187.245 349.19 196.417 346.887 198.201 347.905 cv
198.518 348.085 198.6 348.333 198.613 348.508 cv
198.742 350.28 198.766 352.199 198.792 354.231 cv
198.866 359.955 198.949 366.444 201.593 370.765 cv
201.637 370.838 205.988 378.088 204.103 379.858 cv
202.041 381.793 182.892 385.242 173.886 385.242 cv
cp
.933333 .894118 .85098 rgb
f
298.467 262.353 mo
297.953 261.533 237.945 183.296 230.716 173.033 cv
202.022 171.056 186.189 173.411 186.189 173.411 cv
182.974 176.626 178.105 184.063 175.345 194.304 cv
162.479 242.065 181.802 351.856 188.626 365.757 cv
188.839 366.191 189.27 366.469 189.752 366.47 cv
191.643 366.477 196.744 366.422 200.177 365.705 cv
200.676 365.602 201.06 365.206 201.151 364.705 cv
203.967 349.193 206.504 310.87 206.129 291.721 cv
205.482 258.736 214.052 242.259 213.968 224.384 cv
213.965 223.676 214.866 223.377 215.282 223.949 cv
229.277 243.19 243.415 253.399 256.75 265.968 cv
243.36 270.104 229.622 275.085 221.63 278.464 cv
221.048 278.71 220.74 279.348 220.91 279.957 cv
224.044 291.242 li
224.199 291.8 224.71 292.18 225.289 292.161 cv
248.02 291.437 281.105 290.752 294.403 281.162 cv
300.667 276.645 303.027 269.62 298.467 262.353 cv
cp
.984314 .639216 .635294 rgb
f
186.331 173.694 mo
183.066 176.996 178.335 184.359 175.635 194.382 cv
162.75 242.21 182.042 351.665 188.895 365.625 cv
189.06 365.96 189.388 366.169 189.754 366.17 cv
191.744 366.187 196.739 366.116 200.116 365.412 cv
200.496 365.332 200.786 365.034 200.856 364.652 cv
203.61 349.476 206.213 311.31 205.829 291.727 cv
205.45 272.416 208.175 259.004 210.578 247.17 cv
212.255 238.913 213.704 231.783 213.669 224.385 cv
213.667 223.93 213.945 223.543 214.376 223.401 cv
214.807 223.262 215.258 223.406 215.525 223.774 cv
225.986 238.156 236.55 247.502 246.766 256.54 cv
250.128 259.515 253.603 262.59 256.955 265.75 cv
257.329 266.103 li
256.838 266.254 li
244.508 270.062 230.405 275.08 221.747 278.74 cv
221.306 278.927 221.07 279.415 221.198 279.877 cv
224.333 291.161 li
224.451 291.587 224.825 291.864 225.279 291.863 cv
227.837 291.781 li
250.482 291.073 281.495 290.102 294.227 280.92 cv
300.824 276.161 302.351 269.11 298.214 262.513 cv
298.021 262.22 292.456 254.931 284.753 244.844 cv
266.441 220.866 235.86 180.821 230.553 173.322 cv
203.464 171.466 187.709 173.503 186.331 173.694 cv
cp
190.01 366.771 mo
189.919 366.771 189.833 366.771 189.751 366.771 cv
189.156 366.768 188.622 366.43 188.357 365.89 cv
181.486 351.893 162.141 242.166 175.056 194.226 cv
177.806 184.017 182.658 176.518 185.977 173.199 cv
186.047 173.129 li
186.145 173.114 li
186.303 173.091 202.339 170.778 230.737 172.734 cv
230.879 172.744 li
230.961 172.861 li
236.02 180.042 266.824 220.38 285.229 244.481 cv
293.988 255.95 298.566 261.948 298.72 262.194 cv
303.044 269.083 301.457 276.445 294.578 281.406 cv
281.697 290.696 250.578 291.669 227.856 292.381 cv
225.298 292.461 li
224.572 292.5 223.948 292.015 223.756 291.323 cv
220.621 280.037 li
220.412 279.286 220.796 278.491 221.513 278.188 cv
230.073 274.57 243.939 269.628 256.17 265.834 cv
252.94 262.804 249.601 259.85 246.369 256.99 cv
236.129 247.929 225.54 238.561 215.04 224.125 cv
214.905 223.941 214.704 223.925 214.564 223.971 cv
214.42 224.018 214.267 224.151 214.268 224.383 cv
214.303 231.841 212.849 239 211.166 247.29 cv
208.768 259.092 206.051 272.471 206.428 291.715 cv
206.813 311.326 204.205 349.556 201.446 364.76 cv
201.333 365.383 200.859 365.869 200.239 365.998 cv
196.946 366.686 192.167 366.771 190.01 366.771 cv
cp
.909804 .509804 .501961 rgb
f
212.36 218.597 mo
212.17 218.597 212.014 218.445 212.011 218.253 cv
211.806 203.716 210.191 189.129 207.212 174.896 cv
207.172 174.708 207.293 174.523 207.481 174.484 cv
207.67 174.443 207.853 174.565 207.893 174.753 cv
210.882 189.03 212.502 203.661 212.708 218.243 cv
212.711 218.436 212.557 218.594 212.364 218.597 cv
212.36 218.597 li
cp
f
211.467 202.046 mo
211.317 202.012 li
208.886 200.849 206.822 199.042 205.349 196.786 cv
202.8 192.884 202.261 188.052 201.785 183.789 cv
200.941 176.216 li
200.92 176.024 201.057 175.852 201.249 175.83 cv
201.442 175.814 201.612 175.947 201.634 176.138 cv
202.478 183.712 li
202.945 187.898 203.473 192.642 205.932 196.405 cv
207.336 198.554 209.302 200.276 211.617 201.384 cv
211.791 201.467 211.864 201.675 211.781 201.849 cv
211.721 201.974 211.597 202.046 211.467 202.046 cv
cp
f
198.767 361.269 mo
198.571 361.266 198.416 361.109 198.419 360.916 cv
199.944 237.724 207.346 220.133 214.386 219.173 cv
215.887 218.956 219.632 221.269 225.528 226.006 cv
239.921 237.571 262.355 259.967 262.826 265.728 cv
263.203 270.347 256.612 272.244 242.171 276.404 cv
237.15 277.849 231.459 279.488 224.747 281.609 cv
224.564 281.666 224.368 281.566 224.31 281.382 cv
224.252 281.198 224.354 281.003 224.537 280.945 cv
231.258 278.821 236.953 277.18 241.978 275.734 cv
255.616 271.807 262.462 269.835 262.132 265.785 cv
261.682 260.287 239.061 237.775 225.092 226.549 cv
217.282 220.273 215.066 219.788 214.48 219.863 cv
205.046 221.15 200.307 264.656 199.115 360.925 cv
199.113 361.115 198.957 361.269 198.767 361.269 cv
cp
f
173.596 202.446 mo
173.46 202.446 173.33 202.365 173.275 202.232 cv
173.2 202.054 173.284 201.85 173.461 201.776 cv
179.236 199.354 185.475 192.042 184.052 179.402 cv
184.031 179.21 184.168 179.038 184.36 179.016 cv
184.552 178.997 184.723 179.133 184.745 179.323 cv
185.951 190.042 181.628 199.108 173.73 202.418 cv
173.596 202.446 li
cp
f
242.149 189.336 mo
233.613 188.222 227.051 180.618 225.388 169.961 cv
225.359 169.771 225.489 169.593 225.679 169.563 cv
225.875 169.534 226.048 169.664 226.077 169.854 cv
228.038 182.422 235.985 187.83 242.194 188.642 cv
242.385 188.667 242.519 188.842 242.494 189.032 cv
242.471 189.208 242.322 189.336 242.149 189.336 cv
cp
f
199.21 107.308 mo
204.549 116.195 218.185 115.812 223.216 107.238 cv
223.374 106.968 223.677 106.813 223.987 106.855 cv
230.215 107.709 233.656 108.598 239.945 111.526 cv
240.398 172.008 237.595 178.013 234.415 178.1 cv
213.91 178.656 198.425 186.052 177.92 186.608 cv
168.26 184.348 182.881 114.223 182.998 113.526 cv
182.998 113.526 192.062 109.219 198.294 106.964 cv
198.642 106.838 199.019 106.99 199.21 107.308 cv
cp
1 1 .968627 rgb
f
183.306 113.766 mo
183.288 113.852 183.265 113.969 183.236 114.113 cv
176.734 146.37 171.461 184.57 177.958 186.259 cv
188.158 185.977 197.275 183.962 206.093 182.014 cv
214.956 180.056 224.12 178.031 234.406 177.752 cv
237.814 177.659 240.002 166.392 239.598 111.749 cv
233.257 108.814 229.764 107.999 223.939 107.2 cv
223.775 107.177 223.606 107.261 223.516 107.414 cv
221.087 111.554 216.377 114.143 211.226 114.17 cv
211.143 114.17 li
205.996 114.17 201.428 111.676 198.912 107.487 cv
198.803 107.305 198.598 107.225 198.412 107.292 cv
192.717 109.353 184.542 113.183 183.306 113.766 cv
cp
177.885 186.957 mo
168.983 184.874 179.208 130.569 182.553 113.975 cv
182.614 113.675 182.649 113.502 182.655 113.468 cv
182.685 113.29 li
182.848 113.211 li
182.939 113.168 191.999 108.872 198.175 106.637 cv
198.67 106.458 199.231 106.665 199.509 107.129 cv
201.911 111.128 206.278 113.476 211.222 113.473 cv
216.129 113.448 220.609 110.991 222.915 107.061 cv
223.148 106.665 223.588 106.449 224.033 106.51 cv
229.993 107.327 233.542 108.161 240.092 111.211 cv
240.291 111.303 li
240.293 111.524 li
240.756 173.253 237.909 178.354 234.425 178.448 cv
224.206 178.725 215.074 180.743 206.243 182.694 cv
197.38 184.653 188.216 186.677 177.929 186.956 cv
177.885 186.957 li
cp
.933333 .894118 .85098 rgb
f
196.449 112.735 mo
195.382 110.644 198.452 110.755 198.961 111.704 cv
199.687 113.057 197.431 114.659 196.449 112.735 cv
cp
.984314 .639216 .635294 rgb
f
197.442 111.352 mo
197.214 111.352 196.993 111.392 196.819 111.484 cv
196.688 111.552 196.288 111.761 196.716 112.598 cv
196.949 113.055 197.273 113.306 197.651 113.323 cv
198.033 113.348 198.427 113.116 198.646 112.767 cv
198.756 112.593 198.909 112.241 198.697 111.845 cv
198.548 111.567 197.973 111.352 197.442 111.352 cv
cp
197.691 113.923 mo
197.624 113.922 li
197.026 113.895 196.514 113.522 196.182 112.871 cv
195.535 111.603 196.293 111.082 196.541 110.952 cv
197.383 110.511 198.839 110.842 199.226 111.563 cv
199.485 112.046 199.459 112.602 199.154 113.087 cv
198.83 113.6 198.262 113.923 197.691 113.923 cv
cp
.909804 .509804 .501961 rgb
f
180.825 155.044 mo
179.758 152.954 182.828 153.064 183.337 154.014 cv
184.063 155.366 181.807 156.969 180.825 155.044 cv
cp
.984314 .639216 .635294 rgb
f
181.092 154.908 mo
181.325 155.365 181.648 155.616 182.027 155.633 cv
182.407 155.656 182.802 155.427 183.022 155.077 cv
183.132 154.903 183.285 154.551 183.073 154.156 cv
182.86 153.757 181.775 153.49 181.194 153.794 cv
181.063 153.862 180.664 154.071 181.092 154.908 cv
cp
182.068 156.233 mo
182 156.232 li
181.402 156.205 180.89 155.831 180.558 155.181 cv
179.911 153.913 180.669 153.392 180.916 153.262 cv
181.759 152.822 183.215 153.152 183.602 153.873 cv
183.861 154.356 183.835 154.912 183.53 155.396 cv
183.206 155.91 182.638 156.233 182.068 156.233 cv
cp
.909804 .509804 .501961 rgb
f
179.928 182.432 mo
178.861 180.342 181.931 180.452 182.441 181.402 cv
183.166 182.755 180.91 184.358 179.928 182.432 cv
cp
.984314 .639216 .635294 rgb
f
180.195 182.296 mo
180.428 182.753 180.752 183.004 181.13 183.021 cv
181.503 183.035 181.906 182.814 182.125 182.465 cv
182.235 182.29 182.388 181.939 182.176 181.544 cv
181.962 181.145 180.878 180.878 180.298 181.181 cv
180.166 181.25 179.767 181.459 180.195 182.296 cv
cp
181.171 183.621 mo
181.103 183.62 li
180.506 183.593 179.993 183.219 179.66 182.569 cv
179.014 181.302 179.772 180.78 180.019 180.65 cv
180.862 180.209 182.318 180.54 182.705 181.26 cv
182.964 181.744 182.938 182.3 182.633 182.784 cv
182.309 183.298 181.741 183.621 181.171 183.621 cv
cp
.909804 .509804 .501961 rgb
f
186.252 123.964 mo
185.185 121.873 188.255 121.984 188.764 122.933 cv
189.489 124.285 187.235 125.888 186.252 123.964 cv
cp
.984314 .639216 .635294 rgb
f
186.519 123.827 mo
186.752 124.284 187.075 124.535 187.454 124.552 cv
187.829 124.555 188.23 124.345 188.45 123.996 cv
188.559 123.822 188.712 123.469 188.5 123.074 cv
188.286 122.676 187.202 122.409 186.621 122.713 cv
186.49 122.781 186.091 122.99 186.519 123.827 cv
cp
187.495 125.152 mo
187.427 125.151 li
186.83 125.124 186.317 124.751 185.985 124.1 cv
185.338 122.833 186.096 122.311 186.343 122.181 cv
187.186 121.74 188.642 122.071 189.029 122.792 cv
189.288 123.275 189.262 123.83 188.957 124.315 cv
188.634 124.829 188.066 125.152 187.495 125.152 cv
cp
.909804 .509804 .501961 rgb
f
199.274 135.91 mo
198.207 133.82 201.278 133.93 201.787 134.88 cv
202.512 136.232 200.257 137.835 199.274 135.91 cv
cp
.984314 .639216 .635294 rgb
f
199.541 135.774 mo
199.775 136.231 200.098 136.481 200.476 136.498 cv
200.848 136.51 201.252 136.292 201.472 135.942 cv
201.582 135.768 201.734 135.416 201.523 135.021 cv
201.308 134.622 200.225 134.355 199.644 134.659 cv
199.513 134.727 199.114 134.936 199.541 135.774 cv
cp
200.517 137.098 mo
200.449 137.097 li
199.852 137.07 199.34 136.697 199.007 136.046 cv
198.361 134.779 199.118 134.258 199.366 134.128 cv
200.21 133.686 201.665 134.018 202.051 134.738 cv
202.31 135.222 202.284 135.777 201.979 136.261 cv
201.656 136.776 201.088 137.098 200.517 137.098 cv
cp
.909804 .509804 .501961 rgb
f
233.002 114.453 mo
231.934 112.363 235.005 112.473 235.514 113.423 cv
236.239 114.776 233.984 116.378 233.002 114.453 cv
cp
.984314 .639216 .635294 rgb
f
233.268 114.317 mo
233.502 114.774 233.825 115.025 234.204 115.042 cv
234.576 115.047 234.979 114.835 235.199 114.486 cv
235.309 114.311 235.462 113.959 235.25 113.564 cv
235.036 113.165 233.952 112.899 233.371 113.202 cv
233.24 113.271 232.841 113.48 233.268 114.317 cv
cp
234.244 115.642 mo
234.176 115.64 li
233.579 115.614 233.067 115.24 232.734 114.59 cv
232.088 113.322 232.845 112.801 233.093 112.671 cv
233.935 112.231 235.391 112.561 235.778 113.281 cv
236.038 113.765 236.011 114.32 235.707 114.805 cv
235.384 115.319 234.815 115.642 234.244 115.642 cv
cp
.909804 .509804 .501961 rgb
f
212.722 150.081 mo
211.656 147.99 214.726 148.101 215.235 149.051 cv
215.96 150.403 213.705 152.006 212.722 150.081 cv
cp
.984314 .639216 .635294 rgb
f
212.989 149.945 mo
213.223 150.402 213.547 150.653 213.925 150.669 cv
214.303 150.68 214.7 150.463 214.921 150.113 cv
215.03 149.939 215.183 149.587 214.971 149.192 cv
214.758 148.793 213.673 148.526 213.093 148.83 cv
212.961 148.898 212.562 149.107 212.989 149.945 cv
cp
213.966 151.269 mo
213.898 151.268 li
213.301 151.241 212.788 150.868 212.455 150.218 cv
211.809 148.949 212.567 148.428 212.815 148.299 cv
213.658 147.859 215.113 148.189 215.5 148.909 cv
215.759 149.393 215.733 149.948 215.428 150.433 cv
215.104 150.947 214.536 151.269 213.966 151.269 cv
cp
.909804 .509804 .501961 rgb
f
197.191 153.252 mo
196.124 151.161 199.194 151.272 199.703 152.221 cv
200.428 153.574 198.174 155.177 197.191 153.252 cv
cp
.984314 .639216 .635294 rgb
f
197.458 153.115 mo
197.691 153.573 198.014 153.823 198.393 153.84 cv
198.769 153.844 199.169 153.634 199.389 153.284 cv
199.498 153.11 199.651 152.758 199.439 152.363 cv
199.225 151.964 198.142 151.696 197.56 152.001 cv
197.429 152.07 197.03 152.279 197.458 153.115 cv
cp
198.433 154.44 mo
198.366 154.439 li
197.768 154.412 197.256 154.039 196.924 153.388 cv
196.277 152.121 197.035 151.599 197.282 151.47 cv
198.127 151.028 199.581 151.36 199.968 152.08 cv
200.227 152.564 200.2 153.119 199.896 153.604 cv
199.572 154.117 199.004 154.44 198.433 154.44 cv
cp
.909804 .509804 .501961 rgb
f
228.309 176.784 mo
227.241 174.694 230.312 174.804 230.821 175.754 cv
231.547 177.107 229.291 178.71 228.309 176.784 cv
cp
.984314 .639216 .635294 rgb
f
228.575 176.648 mo
228.809 177.105 229.132 177.356 229.51 177.373 cv
229.879 177.385 230.287 177.166 230.506 176.817 cv
230.616 176.642 230.769 176.291 230.557 175.896 cv
230.343 175.497 229.26 175.23 228.678 175.534 cv
228.547 175.602 228.148 175.811 228.575 176.648 cv
cp
229.551 177.973 mo
229.484 177.971 li
228.886 177.945 228.374 177.572 228.042 176.921 cv
227.395 175.654 228.153 175.133 228.401 175.002 cv
229.244 174.562 230.699 174.892 231.085 175.613 cv
231.345 176.096 231.319 176.652 231.014 177.136 cv
230.69 177.65 230.122 177.973 229.551 177.973 cv
cp
.909804 .509804 .501961 rgb
f
228.214 138.896 mo
227.147 136.805 230.218 136.916 230.727 137.865 cv
231.452 139.218 229.197 140.821 228.214 138.896 cv
cp
.984314 .639216 .635294 rgb
f
229.208 137.514 mo
228.979 137.514 228.759 137.553 228.584 137.645 cv
228.453 137.714 228.054 137.923 228.481 138.76 cv
228.715 139.217 229.038 139.467 229.417 139.484 cv
229.784 139.501 230.193 139.278 230.412 138.928 cv
230.522 138.754 230.675 138.402 230.463 138.007 cv
230.313 137.728 229.739 137.514 229.208 137.514 cv
cp
229.457 140.084 mo
229.389 140.083 li
228.792 140.056 228.28 139.683 227.947 139.032 cv
227.301 137.765 228.058 137.243 228.306 137.114 cv
229.149 136.672 230.605 137.004 230.991 137.723 cv
231.251 138.208 231.224 138.763 230.92 139.247 cv
230.596 139.761 230.028 140.084 229.457 140.084 cv
cp
.909804 .509804 .501961 rgb
f
237.194 125.636 mo
238.261 123.546 235.191 123.656 234.681 124.606 cv
233.956 125.958 236.212 127.561 237.194 125.636 cv
cp
.984314 .639216 .635294 rgb
f
236.201 124.254 mo
235.67 124.254 235.094 124.469 234.946 124.747 cv
234.734 125.142 234.886 125.494 234.996 125.669 cv
235.216 126.019 235.631 126.241 235.992 126.225 cv
236.371 126.208 236.694 125.957 236.927 125.5 cv
237.354 124.663 236.955 124.454 236.824 124.385 cv
236.649 124.294 236.429 124.254 236.201 124.254 cv
cp
235.952 126.825 mo
235.381 126.825 234.812 126.502 234.489 125.988 cv
234.184 125.503 234.158 124.948 234.417 124.465 cv
234.803 123.744 236.258 123.412 237.102 123.854 cv
237.349 123.984 238.108 124.505 237.461 125.773 cv
237.129 126.424 236.616 126.797 236.019 126.823 cv
235.952 126.825 li
cp
.909804 .509804 .501961 rgb
f
225.847 157.791 mo
226.914 155.701 223.844 155.811 223.335 156.761 cv
222.61 158.114 224.864 159.716 225.847 157.791 cv
cp
.984314 .639216 .635294 rgb
f
224.854 156.409 mo
224.323 156.409 223.748 156.623 223.598 156.903 cv
223.387 157.297 223.54 157.649 223.65 157.823 cv
223.869 158.173 224.277 158.39 224.645 158.38 cv
225.024 158.363 225.347 158.112 225.58 157.655 cv
225.847 157.791 li
225.58 157.655 li
226.008 156.818 225.609 156.609 225.477 156.54 cv
225.303 156.449 225.083 156.409 224.854 156.409 cv
cp
224.605 158.98 mo
224.033 158.98 223.466 158.657 223.142 158.143 cv
222.837 157.658 222.811 157.103 223.071 156.619 cv
223.457 155.898 224.912 155.568 225.756 156.009 cv
226.003 156.139 226.761 156.66 226.114 157.927 cv
225.782 158.578 225.27 158.951 224.672 158.978 cv
224.605 158.98 li
cp
.909804 .509804 .501961 rgb
f
219.683 132.609 mo
220.75 130.518 217.68 130.629 217.171 131.578 cv
216.445 132.931 218.7 134.534 219.683 132.609 cv
cp
.984314 .639216 .635294 rgb
f
218.69 131.227 mo
218.159 131.227 217.584 131.441 217.435 131.72 cv
217.223 132.115 217.376 132.467 217.485 132.641 cv
217.705 132.99 218.103 133.214 218.481 133.197 cv
218.859 133.18 219.183 132.929 219.416 132.472 cv
219.843 131.635 219.444 131.427 219.313 131.358 cv
219.138 131.266 218.918 131.227 218.69 131.227 cv
cp
218.44 133.798 mo
217.869 133.798 217.301 133.474 216.978 132.96 cv
216.673 132.476 216.647 131.921 216.906 131.437 cv
217.293 130.716 218.747 130.385 219.591 130.827 cv
219.839 130.956 220.597 131.478 219.95 132.745 cv
219.618 133.396 219.106 133.769 218.508 133.796 cv
218.44 133.798 li
cp
.909804 .509804 .501961 rgb
f
236.994 153.518 mo
238.061 151.428 234.991 151.538 234.481 152.488 cv
233.757 153.841 236.011 155.444 236.994 153.518 cv
cp
.984314 .639216 .635294 rgb
f
236.001 152.136 mo
235.47 152.136 234.895 152.351 234.745 152.63 cv
234.534 153.025 234.686 153.376 234.797 153.551 cv
235.016 153.901 235.424 154.118 235.792 154.107 cv
236.171 154.09 236.494 153.839 236.727 153.382 cv
237.155 152.545 236.756 152.336 236.625 152.267 cv
236.45 152.176 236.229 152.136 236.001 152.136 cv
cp
235.752 154.707 mo
235.18 154.707 234.612 154.384 234.289 153.87 cv
233.984 153.385 233.958 152.83 234.217 152.346 cv
234.604 151.626 236.059 151.295 236.902 151.737 cv
237.15 151.866 237.908 152.387 237.261 153.655 cv
236.928 154.305 236.417 154.679 235.819 154.706 cv
235.752 154.707 li
cp
.909804 .509804 .501961 rgb
f
188.278 141.96 mo
189.345 139.869 186.274 139.98 185.765 140.929 cv
185.04 142.282 187.295 143.885 188.278 141.96 cv
cp
.984314 .639216 .635294 rgb
f
187.284 140.578 mo
186.754 140.578 186.178 140.792 186.029 141.071 cv
185.817 141.466 185.97 141.818 186.08 141.992 cv
186.3 142.342 186.696 142.568 187.075 142.548 cv
187.454 142.531 187.777 142.281 188.01 141.823 cv
188.438 140.987 188.039 140.778 187.908 140.709 cv
187.733 140.617 187.512 140.578 187.284 140.578 cv
cp
187.035 143.149 mo
186.464 143.149 185.896 142.825 185.572 142.312 cv
185.268 141.827 185.241 141.272 185.501 140.788 cv
185.887 140.067 187.342 139.738 188.186 140.178 cv
188.433 140.307 189.191 140.829 188.545 142.096 cv
188.212 142.747 187.7 143.12 187.102 143.147 cv
187.035 143.149 li
cp
.909804 .509804 .501961 rgb
f
199.03 179.507 mo
200.097 177.417 197.027 177.527 196.518 178.476 cv
195.792 179.829 198.047 181.432 199.03 179.507 cv
cp
.984314 .639216 .635294 rgb
f
198.037 178.125 mo
197.506 178.125 196.931 178.339 196.781 178.618 cv
196.57 179.013 196.722 179.365 196.832 179.539 cv
197.052 179.888 197.441 180.112 197.828 180.095 cv
198.206 180.078 198.53 179.827 198.763 179.37 cv
199.191 178.533 198.792 178.324 198.66 178.256 cv
198.486 178.164 198.265 178.125 198.037 178.125 cv
cp
197.787 180.696 mo
197.217 180.696 196.648 180.373 196.325 179.859 cv
196.02 179.374 195.994 178.819 196.253 178.335 cv
196.639 177.615 198.095 177.283 198.938 177.725 cv
199.186 177.855 199.944 178.376 199.297 179.643 cv
198.965 180.294 198.452 180.667 197.855 180.694 cv
197.787 180.696 li
cp
.909804 .509804 .501961 rgb
f
192.159 162.956 mo
193.226 160.865 190.156 160.976 189.647 161.926 cv
188.921 163.278 191.176 164.881 192.159 162.956 cv
cp
.984314 .639216 .635294 rgb
f
191.166 161.573 mo
190.635 161.573 190.06 161.788 189.911 162.067 cv
189.699 162.462 189.851 162.813 189.962 162.989 cv
190.181 163.338 190.59 163.568 190.957 163.544 cv
191.336 163.527 191.659 163.277 191.892 162.819 cv
192.32 161.982 191.92 161.773 191.789 161.705 cv
191.614 161.614 191.394 161.573 191.166 161.573 cv
cp
190.917 164.144 mo
190.346 164.144 189.778 163.822 189.454 163.307 cv
189.149 162.823 189.123 162.267 189.382 161.784 cv
189.769 161.063 191.223 160.733 192.067 161.174 cv
192.315 161.303 193.072 161.824 192.426 163.092 cv
192.094 163.743 191.581 164.116 190.984 164.143 cv
190.917 164.144 li
cp
.909804 .509804 .501961 rgb
f
219.817 116.405 mo
220.884 114.315 217.814 114.425 217.304 115.375 cv
216.579 116.727 218.834 118.33 219.817 116.405 cv
cp
.984314 .639216 .635294 rgb
f
218.823 115.023 mo
218.293 115.023 217.718 115.237 217.569 115.516 cv
217.357 115.911 217.51 116.263 217.619 116.438 cv
217.839 116.787 218.238 117.018 218.614 116.993 cv
218.993 116.976 219.317 116.726 219.55 116.269 cv
219.978 115.431 219.578 115.222 219.447 115.154 cv
219.273 115.063 219.052 115.023 218.823 115.023 cv
cp
218.574 117.594 mo
218.004 117.594 217.435 117.271 217.112 116.757 cv
216.807 116.272 216.781 115.717 217.04 115.233 cv
217.426 114.513 218.881 114.182 219.725 114.623 cv
219.973 114.753 220.731 115.274 220.084 116.541 cv
219.752 117.192 219.239 117.566 218.641 117.593 cv
218.574 117.594 li
cp
.909804 .509804 .501961 rgb
f
204.114 122.227 mo
203.047 120.137 206.117 120.247 206.627 121.197 cv
207.352 122.55 205.097 124.153 204.114 122.227 cv
cp
.984314 .639216 .635294 rgb
f
205.108 120.845 mo
204.879 120.845 204.658 120.885 204.484 120.977 cv
204.353 121.045 203.954 121.254 204.382 122.091 cv
204.614 122.548 204.938 122.799 205.317 122.816 cv
205.697 122.838 206.092 122.61 206.312 122.26 cv
206.422 122.086 206.574 121.734 206.363 121.339 cv
206.213 121.06 205.638 120.845 205.108 120.845 cv
cp
205.357 123.416 mo
205.29 123.414 li
204.692 123.388 204.18 123.014 203.847 122.364 cv
203.2 121.096 203.958 120.575 204.206 120.446 cv
205.05 120.005 206.504 120.334 206.891 121.055 cv
207.15 121.539 207.124 122.095 206.819 122.579 cv
206.496 123.093 205.927 123.416 205.357 123.416 cv
cp
.909804 .509804 .501961 rgb
f
212.798 174 mo
211.731 171.909 214.801 172.02 215.31 172.969 cv
216.035 174.322 213.781 175.925 212.798 174 cv
cp
.984314 .639216 .635294 rgb
f
213.791 172.617 mo
213.562 172.617 213.342 172.657 213.168 172.749 cv
213.036 172.817 212.637 173.026 213.065 173.864 cv
213.298 174.321 213.621 174.572 214 174.589 cv
214.371 174.6 214.776 174.382 214.995 174.032 cv
215.105 173.858 215.258 173.506 215.046 173.111 cv
214.897 172.832 214.322 172.617 213.791 172.617 cv
cp
214.04 175.188 mo
213.973 175.187 li
213.375 175.16 212.863 174.787 212.531 174.136 cv
211.884 172.868 212.642 172.347 212.889 172.218 cv
213.734 171.778 215.188 172.108 215.574 172.828 cv
215.834 173.312 215.807 173.867 215.503 174.352 cv
215.179 174.865 214.611 175.188 214.04 175.188 cv
cp
.909804 .509804 .501961 rgb
f
200.846 172.85 mo
197.006 165.575 li
207.38 165.912 208.991 162.451 208.991 160.541 cv
208.99 155.13 213.231 134.668 214.167 140.017 cv
214.879 144.091 212.152 149.639 214.156 156.623 cv
215.636 161.781 214.831 164.353 213.812 166.015 cv
213.343 166.782 210.748 172.312 200.846 172.85 cv
cp
.984314 .654902 .537255 rgb
f
226.482 172.211 mo
230.322 164.935 li
219.947 165.272 218.337 161.812 218.337 159.901 cv
218.337 154.49 214.096 134.029 213.161 139.377 cv
212.448 143.451 215.175 149 213.172 155.984 cv
211.692 161.141 212.496 163.713 213.515 165.375 cv
213.985 166.142 216.579 171.672 226.482 172.211 cv
cp
f
182.998 113.526 mo
173.251 117.867 168.462 128.473 164.717 134.74 cv
147.695 163.222 133.912 187.129 182.972 177.145 cv
198.459 173.993 203.84 172.709 205.466 172.295 cv
205.836 172.2 206.098 171.87 206.108 171.488 cv
206.17 168.814 205.952 166.843 205.376 164.668 cv
205.292 164.353 205.034 164.114 204.714 164.051 cv
202.62 163.636 193.876 162.189 172.165 161.737 cv
171.78 161.729 171.59 161.264 171.861 160.99 cv
178.872 153.865 181.146 147.843 181.146 147.843 cv
183.994 140.932 182.998 113.526 182.998 113.526 cv
cp
1 1 .968627 rgb
f
182.667 114.062 mo
174.702 117.842 170.083 126.009 166.693 132.004 cv
166.105 133.043 165.55 134.025 165.015 134.918 cv
155.489 150.86 145.637 167.344 150.848 174.698 cv
154.443 179.773 164.927 180.462 182.904 176.804 cv
198.423 173.645 203.792 172.362 205.38 171.957 cv
205.598 171.902 205.754 171.705 205.759 171.48 cv
205.82 168.865 205.612 166.917 205.039 164.758 cv
204.99 164.573 204.836 164.429 204.646 164.392 cv
202.482 163.965 193.744 162.535 172.158 162.085 cv
171.839 162.079 171.565 161.891 171.444 161.594 cv
171.324 161.299 171.388 160.973 171.613 160.745 cv
178.483 153.764 180.798 147.78 180.82 147.72 cv
183.396 141.471 182.784 117.885 182.667 114.062 cv
cp
164.245 179.789 mo
157.109 179.789 152.496 178.229 150.28 175.101 cv
144.806 167.377 154.332 151.437 164.417 134.561 cv
164.949 133.672 165.502 132.695 166.086 131.66 cv
169.591 125.464 174.391 116.978 182.856 113.208 cv
183.327 112.998 li
183.346 113.513 li
183.386 114.635 184.313 141.074 181.468 147.976 cv
181.449 148.028 179.091 154.139 172.109 161.234 cv
172.09 161.332 li
172.173 161.388 li
193.815 161.84 202.603 163.279 204.781 163.708 cv
205.23 163.797 205.596 164.139 205.713 164.579 cv
206.303 166.807 206.518 168.811 206.456 171.496 cv
206.443 172.032 206.072 172.5 205.551 172.632 cv
203.959 173.038 198.577 174.325 183.042 177.486 cv
175.506 179.02 169.253 179.789 164.245 179.789 cv
cp
.933333 .894118 .85098 rgb
f
175.083 124.924 mo
174.016 122.834 177.086 122.944 177.595 123.894 cv
178.321 125.246 176.066 126.849 175.083 124.924 cv
cp
.984314 .639216 .635294 rgb
f
175.35 124.788 mo
175.583 125.245 175.906 125.495 176.285 125.512 cv
176.657 125.522 177.061 125.306 177.281 124.956 cv
177.39 124.782 177.543 124.43 177.332 124.035 cv
177.117 123.636 176.034 123.368 175.452 123.673 cv
175.322 123.742 174.922 123.95 175.35 124.788 cv
cp
176.326 126.113 mo
176.259 126.111 li
175.661 126.084 175.149 125.711 174.816 125.06 cv
174.169 123.793 174.927 123.272 175.175 123.142 cv
176.019 122.701 177.473 123.032 177.86 123.752 cv
178.119 124.236 178.093 124.791 177.788 125.276 cv
177.465 125.79 176.897 126.113 176.326 126.113 cv
cp
.909804 .509804 .501961 rgb
f
177.777 136.252 mo
176.71 134.161 179.781 134.272 180.29 135.221 cv
181.015 136.574 178.76 138.177 177.777 136.252 cv
cp
.984314 .639216 .635294 rgb
f
178.77 134.87 mo
178.542 134.87 178.322 134.909 178.147 135.001 cv
178.016 135.07 177.616 135.278 178.044 136.115 cv
178.278 136.573 178.601 136.823 178.979 136.84 cv
179.349 136.861 179.755 136.634 179.975 136.284 cv
180.085 136.11 180.238 135.758 180.026 135.363 cv
179.876 135.084 179.301 134.87 178.77 134.87 cv
cp
179.02 137.441 mo
178.952 137.439 li
178.355 137.412 177.843 137.039 177.51 136.388 cv
176.864 135.121 177.621 134.6 177.869 134.47 cv
178.713 134.029 180.168 134.36 180.554 135.08 cv
180.813 135.564 180.787 136.119 180.483 136.604 cv
180.159 137.117 179.591 137.441 179.02 137.441 cv
cp
.909804 .509804 .501961 rgb
f
165.782 141.159 mo
164.716 139.068 167.786 139.178 168.295 140.129 cv
169.02 141.481 166.765 143.084 165.782 141.159 cv
cp
.984314 .639216 .635294 rgb
f
166.05 141.022 mo
166.283 141.48 166.606 141.73 166.985 141.747 cv
167.362 141.753 167.76 141.54 167.981 141.191 cv
168.09 141.017 168.243 140.665 168.031 140.27 cv
167.818 139.871 166.734 139.603 166.152 139.908 cv
166.021 139.976 165.622 140.185 166.05 141.022 cv
cp
167.026 142.347 mo
166.958 142.346 li
166.361 142.319 165.848 141.946 165.515 141.295 cv
164.869 140.028 165.627 139.506 165.874 139.377 cv
166.718 138.935 168.173 139.266 168.559 139.987 cv
168.819 140.47 168.792 141.026 168.488 141.51 cv
168.164 142.025 167.596 142.347 167.026 142.347 cv
cp
.909804 .509804 .501961 rgb
f
171.416 150.245 mo
170.349 148.155 173.42 148.265 173.929 149.215 cv
174.654 150.568 172.399 152.171 171.416 150.245 cv
cp
.984314 .639216 .635294 rgb
f
171.683 150.109 mo
171.917 150.566 172.24 150.817 172.619 150.834 cv
172.991 150.845 173.394 150.627 173.614 150.278 cv
173.724 150.103 173.877 149.752 173.665 149.357 cv
173.451 148.958 172.367 148.691 171.786 148.995 cv
171.655 149.063 171.256 149.272 171.683 150.109 cv
cp
172.659 151.434 mo
172.592 151.433 li
171.994 151.406 171.482 151.032 171.15 150.382 cv
170.503 149.115 171.26 148.593 171.508 148.464 cv
172.351 148.023 173.806 148.353 174.194 149.074 cv
174.452 149.557 174.426 150.113 174.122 150.597 cv
173.798 151.111 173.23 151.434 172.659 151.434 cv
cp
.909804 .509804 .501961 rgb
f
158.877 154.607 mo
157.809 152.517 160.88 152.627 161.389 153.577 cv
162.114 154.929 159.86 156.532 158.877 154.607 cv
cp
.984314 .639216 .635294 rgb
f
159.87 153.225 mo
159.641 153.225 159.421 153.265 159.246 153.356 cv
159.115 153.425 158.716 153.634 159.144 154.471 cv
159.377 154.928 159.7 155.179 160.079 155.196 cv
160.456 155.207 160.854 154.989 161.074 154.639 cv
161.184 154.465 161.337 154.114 161.125 153.719 cv
160.975 153.44 160.401 153.225 159.87 153.225 cv
cp
160.119 155.796 mo
160.052 155.794 li
159.454 155.767 158.942 155.394 158.61 154.744 cv
157.963 153.476 158.72 152.955 158.968 152.825 cv
159.812 152.384 161.267 152.716 161.654 153.435 cv
161.913 153.919 161.886 154.475 161.582 154.959 cv
161.258 155.473 160.69 155.796 160.119 155.796 cv
cp
.909804 .509804 .501961 rgb
f
152.334 167.147 mo
151.267 165.057 154.338 165.167 154.846 166.117 cv
155.572 167.469 153.317 169.072 152.334 167.147 cv
cp
.984314 .639216 .635294 rgb
f
152.601 167.01 mo
152.834 167.468 153.158 167.719 153.536 167.736 cv
153.918 167.755 154.312 167.53 154.531 167.179 cv
154.641 167.005 154.794 166.653 154.583 166.258 cv
154.368 165.86 153.285 165.592 152.704 165.896 cv
152.572 165.965 152.174 166.174 152.601 167.01 cv
cp
153.577 168.336 mo
153.51 168.334 li
152.911 168.307 152.399 167.934 152.067 167.283 cv
151.42 166.016 152.178 165.494 152.426 165.365 cv
153.268 164.924 154.724 165.255 155.111 165.975 cv
155.37 166.459 155.344 167.014 155.039 167.499 cv
154.716 168.012 154.148 168.336 153.577 168.336 cv
cp
.909804 .509804 .501961 rgb
f
166.51 166.056 mo
165.442 163.967 168.513 164.076 169.022 165.026 cv
169.747 166.379 167.492 167.982 166.51 166.056 cv
cp
.984314 .639216 .635294 rgb
f
167.503 164.675 mo
167.275 164.675 167.054 164.714 166.88 164.806 cv
166.748 164.874 166.349 165.083 166.777 165.921 cv
167.01 166.378 167.333 166.628 167.712 166.645 cv
168.088 166.65 168.488 166.438 168.707 166.089 cv
168.817 165.915 168.97 165.563 168.758 165.168 cv
168.609 164.889 168.033 164.675 167.503 164.675 cv
cp
167.752 167.245 mo
167.685 167.244 li
167.087 167.217 166.575 166.844 166.243 166.193 cv
165.596 164.926 166.354 164.404 166.601 164.275 cv
167.446 163.834 168.9 164.165 169.286 164.885 cv
169.546 165.368 169.519 165.924 169.215 166.408 cv
168.891 166.923 168.323 167.245 167.752 167.245 cv
cp
.909804 .509804 .501961 rgb
f
160.149 174.78 mo
159.082 172.69 162.152 172.8 162.661 173.75 cv
163.386 175.102 161.132 176.705 160.149 174.78 cv
cp
.984314 .639216 .635294 rgb
f
161.142 173.398 mo
160.913 173.398 160.693 173.438 160.519 173.529 cv
160.387 173.597 159.989 173.806 160.416 174.643 cv
160.649 175.101 160.972 175.351 161.351 175.368 cv
161.726 175.389 162.127 175.162 162.346 174.813 cv
162.456 174.638 162.609 174.286 162.397 173.891 cv
162.248 173.612 161.673 173.398 161.142 173.398 cv
cp
161.391 175.969 mo
161.324 175.967 li
160.726 175.941 160.214 175.567 159.882 174.916 cv
159.235 173.649 159.993 173.128 160.24 172.998 cv
161.084 172.557 162.539 172.887 162.926 173.608 cv
163.185 174.092 163.158 174.647 162.854 175.132 cv
162.531 175.646 161.962 175.969 161.391 175.969 cv
cp
.909804 .509804 .501961 rgb
f
178.504 171.872 mo
177.437 169.782 180.508 169.892 181.017 170.842 cv
181.742 172.195 179.487 173.797 178.504 171.872 cv
cp
.984314 .639216 .635294 rgb
f
178.771 171.736 mo
179.005 172.193 179.328 172.444 179.706 172.461 cv
180.081 172.473 180.482 172.254 180.702 171.905 cv
180.812 171.73 180.965 171.379 180.753 170.984 cv
180.539 170.585 179.455 170.317 178.874 170.621 cv
178.743 170.69 178.343 170.899 178.771 171.736 cv
cp
179.747 173.061 mo
179.679 173.059 li
179.082 173.032 178.57 172.659 178.237 172.009 cv
177.59 170.741 178.348 170.219 178.596 170.09 cv
179.44 169.65 180.894 169.98 181.281 170.7 cv
181.54 171.184 181.514 171.74 181.209 172.224 cv
180.886 172.738 180.318 173.061 179.747 173.061 cv
cp
.909804 .509804 .501961 rgb
f
187.046 166.783 mo
185.979 164.693 189.049 164.803 189.558 165.753 cv
190.283 167.106 188.029 168.709 187.046 166.783 cv
cp
.984314 .639216 .635294 rgb
f
187.313 166.647 mo
187.546 167.104 187.869 167.355 188.248 167.372 cv
188.622 167.375 189.024 167.165 189.244 166.816 cv
189.353 166.641 189.506 166.29 189.294 165.895 cv
189.08 165.496 187.997 165.228 187.415 165.532 cv
187.284 165.601 186.885 165.81 187.313 166.647 cv
cp
188.288 167.972 mo
188.221 167.971 li
187.623 167.944 187.112 167.571 186.779 166.92 cv
186.132 165.653 186.89 165.131 187.137 165.002 cv
187.981 164.56 189.436 164.891 189.822 165.612 cv
190.082 166.095 190.055 166.651 189.751 167.135 cv
189.427 167.649 188.859 167.972 188.288 167.972 cv
cp
.909804 .509804 .501961 rgb
f
198.859 169.51 mo
197.792 167.419 200.862 167.53 201.371 168.479 cv
202.096 169.832 199.842 171.435 198.859 169.51 cv
cp
.984314 .639216 .635294 rgb
f
199.852 168.128 mo
199.623 168.128 199.403 168.167 199.228 168.259 cv
199.097 168.327 198.698 168.536 199.126 169.373 cv
199.359 169.83 199.682 170.081 200.061 170.098 cv
200.439 170.113 200.837 169.891 201.056 169.542 cv
201.166 169.367 201.319 169.016 201.107 168.621 cv
200.957 168.342 200.383 168.128 199.852 168.128 cv
cp
200.101 170.698 mo
200.034 170.697 li
199.436 170.67 198.924 170.297 198.592 169.646 cv
197.945 168.379 198.702 167.857 198.95 167.728 cv
199.793 167.287 201.248 167.617 201.635 168.338 cv
201.894 168.822 201.869 169.377 201.564 169.861 cv
201.24 170.375 200.672 170.698 200.101 170.698 cv
cp
.909804 .509804 .501961 rgb
f
238.193 143.532 mo
239.58 148.401 250.793 156.766 254.721 161.356 cv
254.965 161.641 254.75 162.077 254.375 162.07 cv
243.071 161.824 231.697 162.323 221.748 163.734 cv
221.402 163.783 221.117 164.037 221.032 164.377 cv
220.474 166.589 220.227 168.71 220.536 171.038 cv
220.584 171.395 220.862 171.684 221.213 171.762 cv
248.886 177.935 269.815 180.913 274.961 175.768 cv
276.711 174.018 277.478 171.747 277.478 169.044 cv
277.478 156.572 260.099 127.188 239.945 111.526 cv
239.945 111.526 234.67 131.16 238.193 143.532 cv
cp
1 1 .968627 rgb
f
248.897 162.358 mo
239.074 162.358 229.798 162.944 221.797 164.079 cv
221.589 164.109 221.421 164.259 221.369 164.462 cv
220.756 166.898 220.605 168.912 220.882 170.992 cv
220.909 171.198 221.076 171.375 221.289 171.423 cv
243.186 176.306 269.05 181.188 274.714 175.521 cv
276.34 173.896 277.13 171.777 277.13 169.044 cv
277.13 156.71 259.769 127.595 240.15 112.129 cv
239.361 115.299 235.386 132.405 238.528 143.436 cv
239.41 146.532 244.505 151.194 249 155.306 cv
251.375 157.479 253.618 159.531 254.986 161.129 cv
255.187 161.365 255.23 161.685 255.097 161.966 cv
254.963 162.251 254.684 162.411 254.368 162.418 cv
252.529 162.378 250.703 162.358 248.897 162.358 cv
cp
263.965 178.735 mo
255.032 178.735 241.06 176.546 221.137 172.102 cv
220.637 171.991 220.257 171.582 220.191 171.084 cv
219.902 168.913 220.057 166.818 220.694 164.292 cv
220.815 163.813 221.209 163.459 221.699 163.389 cv
231.207 162.041 242.508 161.466 254.383 161.721 cv
254.468 161.669 li
254.457 161.582 li
253.117 160.017 250.888 157.979 248.53 155.821 cv
243.967 151.645 238.794 146.913 237.857 143.627 cv
234.349 131.305 239.555 111.633 239.608 111.436 cv
239.744 110.929 li
240.158 111.251 li
260.091 126.74 277.827 156.472 277.827 169.044 cv
277.827 171.971 276.969 174.251 275.207 176.014 cv
273.398 177.822 269.731 178.735 263.965 178.735 cv
cp
.933333 .894118 .85098 rgb
f
244.701 119.519 mo
245.768 117.429 242.698 117.539 242.188 118.489 cv
241.463 119.842 243.718 121.444 244.701 119.519 cv
cp
.984314 .639216 .635294 rgb
f
243.708 118.137 mo
243.176 118.137 242.601 118.352 242.453 118.631 cv
242.241 119.026 242.393 119.377 242.503 119.552 cv
242.722 119.902 243.137 120.121 243.499 120.108 cv
243.878 120.091 244.2 119.84 244.433 119.383 cv
244.861 118.546 244.462 118.337 244.331 118.268 cv
244.156 118.177 243.936 118.137 243.708 118.137 cv
cp
243.458 120.708 mo
242.887 120.708 242.319 120.385 241.996 119.871 cv
241.691 119.386 241.665 118.831 241.924 118.347 cv
242.31 117.627 243.764 117.295 244.609 117.738 cv
244.856 117.867 245.614 118.388 244.968 119.656 cv
244.635 120.306 244.123 120.679 243.525 120.706 cv
243.458 120.708 li
cp
.909804 .509804 .501961 rgb
f
242.989 133.102 mo
244.056 131.012 240.986 131.122 240.476 132.072 cv
239.751 133.425 242.007 135.027 242.989 133.102 cv
cp
.984314 .639216 .635294 rgb
f
241.996 131.72 mo
241.465 131.72 240.89 131.935 240.741 132.214 cv
240.529 132.609 240.681 132.96 240.792 133.135 cv
241.01 133.484 241.405 133.696 241.787 133.691 cv
242.166 133.674 242.489 133.423 242.721 132.966 cv
243.149 132.129 242.751 131.92 242.619 131.851 cv
242.445 131.76 242.224 131.72 241.996 131.72 cv
cp
241.746 134.291 mo
241.176 134.291 240.607 133.968 240.284 133.454 cv
239.979 132.969 239.953 132.414 240.213 131.93 cv
240.598 131.21 242.053 130.879 242.897 131.32 cv
243.144 131.449 243.903 131.971 243.256 133.239 cv
242.924 133.889 242.411 134.262 241.813 134.289 cv
241.746 134.291 li
cp
.909804 .509804 .501961 rgb
f
255.56 134.616 mo
256.628 132.526 253.557 132.636 253.048 133.586 cv
252.323 134.938 254.578 136.541 255.56 134.616 cv
cp
.984314 .639216 .635294 rgb
f
254.567 133.234 mo
254.037 133.234 253.462 133.448 253.311 133.727 cv
253.1 134.122 253.253 134.474 253.363 134.649 cv
253.583 134.998 253.993 135.219 254.358 135.205 cv
254.737 135.188 255.06 134.937 255.294 134.48 cv
255.721 133.643 255.322 133.434 255.191 133.365 cv
255.016 133.274 254.796 133.234 254.567 133.234 cv
cp
254.318 135.805 mo
253.747 135.805 253.178 135.482 252.855 134.968 cv
252.551 134.483 252.524 133.928 252.784 133.445 cv
253.171 132.724 254.626 132.393 255.468 132.834 cv
255.717 132.964 256.474 133.485 255.828 134.753 cv
255.495 135.404 254.983 135.777 254.385 135.803 cv
254.318 135.805 li
cp
.909804 .509804 .501961 rgb
f
249.745 148.973 mo
250.812 146.883 247.742 146.993 247.232 147.943 cv
246.508 149.296 248.762 150.898 249.745 148.973 cv
cp
.984314 .639216 .635294 rgb
f
248.752 147.592 mo
248.22 147.592 247.646 147.805 247.496 148.085 cv
247.285 148.48 247.437 148.831 247.548 149.006 cv
247.767 149.355 248.183 149.573 248.543 149.562 cv
248.922 149.545 249.245 149.294 249.478 148.837 cv
249.745 148.973 li
249.478 148.837 li
249.905 148 249.507 147.791 249.375 147.722 cv
249.201 147.631 248.98 147.592 248.752 147.592 cv
cp
248.503 150.162 mo
247.931 150.162 247.363 149.839 247.04 149.325 cv
246.735 148.841 246.709 148.285 246.968 147.802 cv
247.355 147.081 248.811 146.751 249.653 147.191 cv
249.901 147.322 250.659 147.843 250.011 149.11 cv
249.679 149.76 249.168 150.134 248.57 150.16 cv
248.503 150.162 li
cp
.909804 .509804 .501961 rgb
f
266.797 148.55 mo
267.864 146.459 264.793 146.57 264.284 147.52 cv
263.558 148.872 265.813 150.475 266.797 148.55 cv
cp
.984314 .639216 .635294 rgb
f
265.803 147.168 mo
265.272 147.168 264.698 147.382 264.549 147.661 cv
264.337 148.056 264.489 148.408 264.599 148.582 cv
264.818 148.931 265.219 149.142 265.594 149.138 cv
265.972 149.121 266.296 148.871 266.529 148.413 cv
266.957 147.576 266.558 147.367 266.427 147.299 cv
266.252 147.207 266.032 147.168 265.803 147.168 cv
cp
265.553 149.739 mo
264.983 149.739 264.415 149.416 264.092 148.902 cv
263.787 148.417 263.76 147.862 264.019 147.378 cv
264.406 146.657 265.861 146.326 266.705 146.767 cv
266.952 146.897 267.711 147.419 267.063 148.686 cv
266.731 149.337 266.219 149.71 265.621 149.737 cv
265.553 149.739 li
cp
.909804 .509804 .501961 rgb
f
262.253 159.818 mo
263.32 157.727 260.25 157.838 259.74 158.787 cv
259.015 160.139 261.27 161.742 262.253 159.818 cv
cp
.984314 .639216 .635294 rgb
f
261.26 158.435 mo
260.729 158.435 260.154 158.65 260.005 158.928 cv
259.793 159.323 259.946 159.676 260.055 159.85 cv
260.275 160.199 260.672 160.427 261.051 160.406 cv
261.429 160.389 261.753 160.138 261.986 159.681 cv
262.414 158.844 262.014 158.635 261.884 158.567 cv
261.709 158.475 261.488 158.435 261.26 158.435 cv
cp
261.01 161.006 mo
260.439 161.006 259.872 160.683 259.548 160.169 cv
259.243 159.685 259.218 159.129 259.476 158.646 cv
259.863 157.925 261.318 157.595 262.162 158.035 cv
262.409 158.165 263.167 158.686 262.52 159.954 cv
262.187 160.605 261.676 160.978 261.078 161.005 cv
261.01 161.006 li
cp
.909804 .509804 .501961 rgb
f
273.52 165.27 mo
274.588 163.179 271.517 163.289 271.009 164.239 cv
270.283 165.592 272.538 167.195 273.52 165.27 cv
cp
.984314 .639216 .635294 rgb
f
272.527 163.887 mo
271.997 163.887 271.422 164.102 271.272 164.381 cv
271.06 164.776 271.214 165.128 271.323 165.302 cv
271.543 165.652 271.939 165.867 272.318 165.858 cv
272.697 165.841 273.02 165.591 273.254 165.134 cv
273.681 164.296 273.282 164.087 273.151 164.019 cv
272.976 163.927 272.756 163.887 272.527 163.887 cv
cp
272.278 166.458 mo
271.707 166.458 271.139 166.135 270.815 165.621 cv
270.51 165.137 270.485 164.581 270.744 164.098 cv
271.131 163.377 272.586 163.046 273.428 163.488 cv
273.677 163.617 274.434 164.138 273.788 165.406 cv
273.455 166.057 272.943 166.43 272.345 166.457 cv
272.278 166.458 li
cp
.909804 .509804 .501961 rgb
f
253.166 166.844 mo
254.233 164.754 251.163 164.865 250.654 165.814 cv
249.928 167.167 252.183 168.77 253.166 166.844 cv
cp
.984314 .639216 .635294 rgb
f
252.173 165.463 mo
251.642 165.463 251.067 165.677 250.918 165.956 cv
250.706 166.351 250.858 166.702 250.968 166.877 cv
251.188 167.226 251.597 167.444 251.964 167.433 cv
252.343 167.416 252.666 167.165 252.899 166.708 cv
253.166 166.844 li
252.899 166.708 li
253.327 165.871 252.927 165.662 252.797 165.594 cv
252.622 165.502 252.401 165.463 252.173 165.463 cv
cp
251.924 168.033 mo
251.352 168.033 250.785 167.71 250.461 167.197 cv
250.156 166.712 250.13 166.156 250.389 165.673 cv
250.776 164.952 252.232 164.622 253.074 165.063 cv
253.322 165.193 254.08 165.714 253.433 166.981 cv
253.101 167.632 252.589 168.005 251.991 168.031 cv
251.924 168.033 li
cp
.909804 .509804 .501961 rgb
f
263.646 174.356 mo
264.714 172.266 261.643 172.376 261.134 173.326 cv
260.409 174.678 262.664 176.281 263.646 174.356 cv
cp
.984314 .639216 .635294 rgb
f
262.653 172.974 mo
262.123 172.974 261.548 173.189 261.398 173.468 cv
261.186 173.863 261.339 174.214 261.449 174.389 cv
261.669 174.738 262.063 174.952 262.444 174.945 cv
262.823 174.928 263.146 174.677 263.38 174.22 cv
263.807 173.383 263.408 173.174 263.277 173.105 cv
263.102 173.014 262.882 172.974 262.653 172.974 cv
cp
262.404 175.545 mo
261.833 175.545 261.264 175.222 260.941 174.708 cv
260.636 174.223 260.61 173.668 260.87 173.185 cv
261.256 172.464 262.711 172.132 263.554 172.574 cv
263.802 172.704 264.56 173.225 263.914 174.493 cv
263.581 175.143 263.069 175.517 262.47 175.544 cv
262.404 175.545 li
cp
.909804 .509804 .501961 rgb
f
243.929 172.387 mo
244.997 170.297 241.926 170.407 241.417 171.357 cv
240.691 172.709 242.946 174.312 243.929 172.387 cv
cp
.984314 .639216 .635294 rgb
f
242.936 171.005 mo
242.405 171.005 241.831 171.219 241.68 171.498 cv
241.469 171.893 241.622 172.245 241.731 172.42 cv
241.952 172.769 242.349 172.99 242.727 172.975 cv
243.105 172.958 243.429 172.708 243.662 172.251 cv
244.09 171.413 243.691 171.205 243.559 171.136 cv
243.385 171.045 243.165 171.005 242.936 171.005 cv
cp
242.687 173.576 mo
242.116 173.576 241.548 173.253 241.224 172.739 cv
240.92 172.254 240.893 171.699 241.152 171.215 cv
241.539 170.494 242.995 170.165 243.838 170.605 cv
244.085 170.735 244.843 171.256 244.196 172.523 cv
243.864 173.174 243.352 173.548 242.754 173.574 cv
242.687 173.576 li
cp
.909804 .509804 .501961 rgb
f
234.053 166.542 mo
235.121 164.451 232.05 164.562 231.541 165.511 cv
230.816 166.864 233.071 168.467 234.053 166.542 cv
cp
.984314 .639216 .635294 rgb
f
233.06 165.159 mo
232.53 165.159 231.955 165.374 231.805 165.653 cv
231.593 166.048 231.746 166.4 231.856 166.574 cv
232.075 166.924 232.468 167.134 232.851 167.13 cv
233.23 167.114 233.553 166.863 233.787 166.406 cv
234.214 165.568 233.815 165.359 233.683 165.291 cv
233.51 165.199 233.289 165.159 233.06 165.159 cv
cp
232.811 167.73 mo
232.24 167.73 231.672 167.407 231.348 166.893 cv
231.044 166.409 231.018 165.854 231.277 165.37 cv
231.663 164.649 233.118 164.318 233.962 164.76 cv
234.21 164.889 234.968 165.41 234.32 166.678 cv
233.988 167.329 233.476 167.702 232.879 167.729 cv
232.811 167.73 li
cp
.909804 .509804 .501961 rgb
f
224.484 170.055 mo
225.551 167.965 222.48 168.075 221.971 169.025 cv
221.246 170.377 223.501 171.98 224.484 170.055 cv
cp
.984314 .639216 .635294 rgb
f
223.49 168.673 mo
222.959 168.673 222.385 168.887 222.235 169.166 cv
222.023 169.561 222.176 169.913 222.285 170.087 cv
222.506 170.437 222.906 170.651 223.281 170.643 cv
223.66 170.626 223.983 170.376 224.217 169.919 cv
224.644 169.081 224.245 168.872 224.114 168.804 cv
223.939 168.712 223.718 168.673 223.49 168.673 cv
cp
223.241 171.243 mo
222.67 171.243 222.102 170.921 221.779 170.406 cv
221.473 169.922 221.447 169.367 221.707 168.883 cv
222.093 168.162 223.547 167.831 224.392 168.273 cv
224.639 168.403 225.397 168.924 224.751 170.191 cv
224.418 170.842 223.906 171.215 223.308 171.242 cv
223.241 171.243 li
cp
.909804 .509804 .501961 rgb
f
258.136 162.833 mo
257.306 162.833 256.479 162.689 255.71 162.397 cv
255.53 162.329 255.44 162.129 255.509 161.948 cv
255.577 161.769 255.778 161.677 255.957 161.746 cv
257.694 162.405 259.765 162.222 261.36 161.268 cv
261.525 161.17 261.739 161.223 261.838 161.388 cv
261.936 161.553 261.883 161.767 261.718 161.866 cv
260.65 162.505 259.391 162.833 258.136 162.833 cv
cp
.933333 .894118 .85098 rgb
f
170.167 162.055 mo
168.267 162.055 166.653 161.177 165.589 159.552 cv
165.484 159.391 165.529 159.176 165.69 159.07 cv
165.851 158.965 166.067 159.01 166.172 159.171 cv
167.169 160.694 168.725 161.465 170.541 161.346 cv
170.731 161.341 170.899 161.478 170.912 161.67 cv
170.924 161.862 170.779 162.028 170.587 162.041 cv
170.446 162.05 170.305 162.055 170.167 162.055 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 25.0.0
%%For: (Tom) ()
%%Title: (Meditation practice_02-02.eps)
%%CreationDate: 4/24/2021 8:18 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBj26DoCqkQ^97&J&eG1#@="et(3*h#AJ5W!0dHih65$Wgn\"XHp8<Ai4\6dn@F2g3mB%b(bY34\=4^d/;c?>cH81a>Sh?<-
%IZtBfn.R7I6peDdSOa&)r:Rh(W>GBDYhF81g'Oh\G?\c!fFj7$ZtfhsT1^]XF7J`l.9jOmMm_A5.2u<gbG@P);LOd3rfnoZ[PFcQ
%9.'0m//1]@'2+$Qp7.^Wge^LVq*MSlWa'(L#rc_k7H]IKIT*)@kQUb*f=dr=$bE\eenR$+H8f`6g07p!*KmSrT:(aeiG$#0X(5u@
%;Xs?0DI)%:orIi)E^p'o0-_n0cOBc>=:%bYog2B6R:tGG+)A1h]OELu;oY(P5NU<YK)\s8O8^L(`eEVP$Ku68Xo/nsgBf5Nof0Rq
%.i?1T2n2mT.f.gV%u@XpE+ObO#n.l.(Zdu\(@"naNg3Y%Pb[`?9AcJuBbejDo0"PKTf795/T3s9k,.8JLHk@gcUWg.@3udkbX*p_
%CA[gVBYfpEiNKf)="f5l2oU0(0P9pa5d/").2Nb5^ujZmKab/"$\8/Y\`4f23=TalTqt'r9CO@g2b)K'?Yj>'Kci?`#2(G\`IlS^
%:K1Fg-;oCgfP/rYSKK)?Ujjpc7SDk=$"6>6nq*;hj#)'QoQh%KZV+i=;otZoMiX*u2g`t1'Y7VmkF)P=fa2$c_lli4/UrE:YF.%0
%?`Sn"#QS9T/T8%Y\s;.+a3^m+giDW\b>?10,pMn(d=7j3C4:#KiSWi6os0.&0-"hqk^e*n0E19eg\Nl/BX^g9+4i$>H?l91;Yo^/
%1Q/flEL8]oZaE\b(,hN33W;KTAeQu5%2/u39U=O$h])<c1\pTXT,/-1Pq\n]V.]U>o\Vs+V`dZ=UA4k=Fg^uh/<n:/0@ok,o#=s=
%fJ8#>rt.Dci0tW<mr:_<:BM&[26IW,X1:?$XNP9?n(I`/WFaC6o>fC4`[bSWRECcq2AqM`O['Ra\1t(u)s!R5R6i'H>03#To%CrZ
%V-Z;X*0a'L`p5_ahAE-_2uX+Zp)]IFEH[Ku&u/%bfCQDS3DSh5$sAkJ5Kf:2\U!@e+#p:.H7doZgO6C<N0Z8&,0P?7+:r<<jRIt@
%-%A&$P3s#=Hma;0lZiXK`:3CT"6/98N7N6Rdn',kD&QtMbF%NN`oWg2j-\"73/U1++Y;cUNS!L"c1b\6lY?UIqq&f,WK=;i1oK)K
%AN*Pejg0Y[s&ZTDp>MuS(aM"sbSS+2.](((]ilpl?niV[U?<O9]15(:h`=rrYiX9iXus"DAWmo+Bni"$@X6Y(Di(+^U+8IQ%^O^D
%mcqLb2P25<mFO*0jlkILSZ[uDLpdZ4<3!.s'UJ`<s)=P(8.@W-I,f;-&Uf#8[CK!=%t@oe<&25"?X64Hr-_Ejde-T5/76Iu6<_Zi
%FN7!;$b[od\c0Ju[h89F!XM:r^2^"_<_3Id:!E(Tp#9]W7f63/>_Ms^>.nt3jea,f6=&J[-g!?Yb$=eNp8b9EUcChQ4hNdooPam4
%6[EK%g[3S.6#(e].=dF7eSqW'I]q4BJ+\N>8mCT70O5Re#(\;U06XY/bR]*i".=RSYZ_:D6("[[4DAW9YkeH%/FE&bf7r\@TFZCp
%mj($Z8,eJSp7%B34g"$Zq50H+?gL6V0f(p5kQY`1P.qMIqk\Tb)m3rs49g=R'HXRD.N)+rqEi^InA.D)Nn&'_YiS_n>NDZjbFdW.
%\\=G<gc/IgPg;*TiqgTX]2<#U5[$og)hsiIO(Vo#oW5fJ-EJ%,M8m+mE;ohW/+WFoK('F3`:$h?1Xlj8F2A+hHY`M1<+9cR9=3X2
%n6HsG%hIf,Dj^LKYCn9[Ks<(NX%^'f8qqHa_KIA8]n=>[ok!J\g2_4MbDgALYq7oCji4aaB\7@WB?4ReDJ[LUD7Qo'2n%gsX"AO#
%W-:Vj8D/"c.lT#?7U<F$eoE;"O$)S4rWZlqno4OaSFoRh>0U];9AN2"Y1j']DP#:u8N!UB^sd/T6EtK^)r<ZereeVdG>.F:'o-%D
%FYj:>IeDUa4&!J?C6t"BhZ'MBd\L];rcdc&q<&8-4=LjM(cQ7&o\]!a'aGG&pYRL5V0oPV3J\,flV7B[jWF'`G3[oO)[jEM:`Os"
%qStE"+Au_oB">e?k?3"QeM'T@%t0YWeLN#8Cq-+^$io>\Zd^T<GE[!n2Q7KJQ.<XmV.*OH`.`8\i7c3K%0/#IMUbmB&--3mY;p,X
%p:YC9fJK)X5AJm\'(1S-P.oVJa+$ud`<FLGJhuNh2b[U<]DKpFh]Q\gaIhX'Km\kqnEpPi]2bQgo5<EPQ=/89a\:PB%/kBu$sVhJ
%[sPS%`juXh1k]>8P-:E^KXDZ*a"7pa,:YHuB.P/i5`fS.XIP"FofoLqr'#Zl@d=UnW*`>EA>]391ROKF+(8UX/<_U_]F-SG.JqD$
%1<I.kaV;peN'o9s*)"`(AK#4WgcU@M_1d*>/8[ZLp\JifP2Ua<dZc5L>e]&Z)c3?6?X"T]2%#(>/rrb@^X;9!.TOW(kebkO]&-M)
%^-<QpU&JLHf\!=)S/[!<NLACcH&\6DTZh34mE.`*fC].^%JCN,3T#h50L1M/lG&E*H4)Y*o``EmD!i,ciFm&q(te6#md>(1Jf*"?
%O_da2rOg'gCB>`*rq!5uIP%1'MT)g(*u;BVC&_kdoc='L6f&plr]Mf[He3J9s%`=nag?pmHar=[&d.>_h=@dfSITai5fPk3J-'DW
%4TF`N8%"K;hc&71jK%B/-6(sCKWRrD5:U[Xg$9m?m"6\6?`Rn4Kp$-H-n]q\2Sd_!7Y&<\J+Z9a_8RO;7_m*WaO&8bn"4Ska6Cb,
%oKbOO7f72epLUY`qF/)Qj1NnV.UM!LD]S9N#r%Rdj`/^B?_AklMn\MpeJRd&To-R&oDJJc1A#Lm0a)ljLV?%s8S?0)`2`pE*/e7f
%qDkIunSSo:'0\4MYLb95s1(<BlEP5-hUXHI!V07u5;U'c.3h1d>s6sPJoi!(%Np"ulN:W$\k,f#PV.DP]n7Bg-?Y-mDt#_qO;iir
%f>!BnN4M2MnM%X6TM.(i0n>Ac0-i_'?_;.(`+*k:5Xr\bM8?>9TseMeeG,*ZQGpT*ZZd]/,mHV(AD<1AXreo&`?/`eN5F_k/"%e?
%!&>I^3t?Eq!`$nMSV_Ag:HXT0NRTp(`JC+*0$6-ijYD4-0Gc#FrSc)cU1E^b/kQP&N4#<<F&B)Yjc"7X@c$Ep2A\g[#BE[N=M5;T
%E8t2fgR*n>$i&I^M:0<BaG=[*EKoUo7qkGV)%8cV0ee4\Q>#&Wm^E>Fa"&lBD(%kb+g-m6EHf1KmXE?U;IM#GPeoZBg+SKSCZEup
%n[A-if*>h33r=d(.Ac''8k2^phl909"#c^-_6H4B3V@`&:AsDd16@[*_CKR>>Ms;@f>`4*hs`LIbh'j^/UkEWIBjd_[4u#-lY?]n
%YYscOaVqLnhn[fDYlJ9ND9UPMg=hpph(c&jf%!6DWst=!E;ckm;9f9R(&OmD,tG6%23,/nn(^ChGT2Xl2S/m6N42YX3b_\+1UWJK
%>(Pam\aUkOm!]0'0I_X66#TRg*Hr%+Ze`OkhVRRe^jiChLK2N2*d2DAIS9"2!QulZ67gbi67D]^9$lH!qFpopTH=fUTlOV8(29''
%U==<mNa&=8,Y3-X7G8l$\O6jfN)F#cO]7;El.-Tm\`+i2#ndUoUJVD>MiR?J>HoEu!sU1"O#mPcZ^(B>(5A),b,$R*HTUn<2r?O%
%&.c+]=ai&D=J[O\2\AtkNeh,f"b)Z^\QKtmhCZ_fB)s1\)(e$q='?9Wb+!=:Tq-CcR']t,f-`G$ZS;%/r@r,T)rC/AAf0hpLsZco
%R7b2:FqN;7:rdI9O;q-Fq3tOZ\8LqnVg>ZqADM\1/PYK3KXs@RC)QIe`VDd8dG=`X@:?X,q/nObIA"WGIcL4l3<%Y=Wc@t23`(gr
%^CbFol0,&Hj1d.M&HT>BKm9Ef39E<0]4;oQrKk<YA%o56:"RAG39E;_q3GpDrI1NgN+9SMGecjjL9[F/2O&*OTi=9-0)@_r79eZS
%[<*q#V-dZ);#7_A=p`++!m0YFJQPPD[']<I?Rg`:Kh@_:-ri%AY"mr\))X=I`b&0d1[9u@BfhL#;HP%Y#1@GGlaqaP#.mI;qbR3c
%5"NR\s8!9a`p0J(YN1O)'Pj1j2#"ZU!Q&+@jJ6)kQV0aOqD[JG[#K<_oJM`-G#_&B2M>.%]lB[_r]hk-`0I=0h`06N%m#XX(#9Io
%;-_J,L>1oMj9/QMPnPoK#MV8jmson5\Gd+sa^NZfOg3)ClnTKkN5dKFZ-2A*\r;T#8@sh>s+ig.A!bTqAMeQJNEo"`QdP8G)%Bsm
%(4(4C7`I2']>"::jquN,7+2).H%u/^<@ru/1'&lbMWBom5):.s5MR)`L7D<E/sCuMLd*m(i7c3K%0-n+0Y]gKDBH2,+5]"Qr+Q\i
%+6N':Xi1-%bL>L)B\[E5bR$<_88KHG5Mp,uL8sj-BJ`T-f6/tGY#=u%Z*@MUYekmca[?Okr:)*I0f7#i2jkKja5<eGrG_j`=#r')
%!qNL9@>[e;O+lW("&j%%0G]]/%SZnkQ&WC/NOpk:cS3#Lh3Y^0R?7fpNk6t#Z0k9F3rP1@S;4,n^HUhjI<GCqA+Pp[:9%_3GcHG-
%GR/4E[aK$6*lrI;3__<2J#"7m\OdY7Sg56[%);Z-q&Q?nZ#MST2S"D;5@R[=D-`PKM(t"4U5VgmG`B*/ZV7OoF5.j]CnZi_Ou]tt
%re,GTP_J7[/[Q,G4C\b9Zn4-7%TmC!^bE4D`YR96im)$AD/>p%J;#oP0spqs+skag[A!A<UHk?'K+pMp#fjM?,gf^Q#Yojq,aL<u
%=Z,8Q4uZ#tXGgRZbYVe6`i\c@N2-e7mSJR@`uU%T=,3O19Jp(UK\u*(1##EiNuJf3V?TKL?9Qp2;VcT$Ss)e2U4;0BqYIVeHCu41
%UfJB6NpE=(JRNF-MEr-jh6DDrUMmhX8)@o"oXOMY"#:dto5&6RkVpMAGc3f6S5_8s>,JN0b/[>\h=uA-IGG*(XPss5=%9hgfS]?[
%*En=B"(\p^cj-CiZl9.J>0GO'B*\7L!)OD'qg<Sr@F1<+qq1&i6+q;D0@9"`GJ3?eX0Khj]K6=33pqCd+'6Pq:oIsb-m0KWI'l^k
%j;k(Hga,"CU0T"SFrOEJJ[Ep159YH5F]@[e.]M#qBGp-7@ib5,X/!\O^W0OC=A(elEfZu5c$VuM<ujP6:>M&N([J4L^;L#l8>Nr;
%Yor)6Qa&D,[c[S<0o,(]>*#I>GC?^8k1nUZ)k1nYF)Gg>`F[>#hfCb8kJlZ>fUNnMF(9:Z\$>FIC9C&NRIAEYQ+/-\8IX-MiqeDa
%\?/0s>bKTI&HB3/JT60udI*&MmU4*iN-p,6d:Z[sNd&0R>UpjtIKQ@Fep\'I[-:/U<6FICE$$):1>28QKYCD8B<q?eY=ETBVTi*:
%D5/rsr*S8K"#r5XUnQ!Aq`+I/LFW&M=M@-Rim'#31%Fe=5Pbo[[uo`t@=]O?XNf_sMjITOqm.9'c_)BUd`fp"q2>(l/lUs0!JSNq
%rO1*GT$Q<N*5oI<lQ\LR38D=\3krD6F*5D?Up#A1)*QMCW\f;(Gnro6QE,Yp\?`?2bm^8!a)uX")=>bU\(FGq*XQC1/nd^AK=_Sq
%WG9+eP0&H2m@<LcT$,%E(I1Y(Rtcu_[CNP#f0^>l).kg.k5P#8pi!)mrOk?KSmjhuWOG<lhABLPRTBG@Q\s`E-IVPj:]$No!PmT+
%"1A`nO,rb!-iUJNF:2@K[jaQ;5KhI7KP9`=*clq&ooe)a(HCkarS*M4HYjlZaIhX+d<Y8+KT4ffjM^Y-=U)-oRClZ>qX=7t@(>1_
%hG&Q[;oQZtUEC7,Q$huc,)i99f2t#P.3.Bu_#CioN+'bc"_@N41,a*kZ7ujB(rJ!%j0CCoFVr<AEL,,$XDE:8i2EePgd5UPf&QVJ
%qea@^N[3itW,hRuqJk8SY$5uXpOBn/d@KY[4$F![gm9Ft-"6iYTXf_ercJ"d\8puUMl-+/h$*+$@'rMI_/0ik1!8KQOB`S>qYC!D
%5VBH`l!`6[8sQMb,MmQ$1#Sq>K4SQ%8ECfbaLDnQB]lO!@,?Qlk7>"g8DSt@'<1::8`M-20a%r(@+10-MB1L3JEu-ZoQ)((Oi:rP
%N&0i"KDaY7Cn/+XKP[a6@$K/T&];Gc[ni\=amE*O*#HK0_>IJ[iqgsM9B5tb^BdWt2n;B.lG`,HJ!>^!6Y'ma@3rp(Fr`>B+-TiW
%1)"/0G!.<Z)O\g%&PtXJSV399I-%NL5@V+TqO9GmYWSjpMUdn0mijrqr+kf-_Y?_d7`Obf!P:^G-s!c1G(#<$[c'b1`r1!@o+D!V
%:Lf&/((,&%Zi2IokHR8()+\[=V;,c2'*G`?is-^'`18mi8_oXVOCD@VOZ3ImN[5PbJokRu2p?rM6]e/\2hZ=\>0Ji66fMkgQ]ALI
%`EaC7>=,11oqh.7?Yo]&YQ&I+q);[\[Tf]Z^H7B?0[a4j3(tl'lIE5Z<i26E%4d:+8r`o<pL?Pi\st2`nu(2B0t/3g8qhQe\"5bK
%nFQQo,&JYp5[9o+%=m#@IXn*G$ti:`V_&S!ZM6*PfK,ufroj[a\&CsV+0G4:Zu'+a90\@4%GPK,YuiJ&*9e*dD%hWnc<@$'ocn;.
%1XDLHm>0nm=Yn66,T[WqQ8M%<J77<io<@grqmB,kI/(_d)/Ug$c"A[=<@OJo]cXQU94=`-DSF7o#UcJ&?C3;VA`ibhIA9)&94I>$
%?[r%#9"^rqhrrci>1phpio=Z%Oo(&cgr#3Fh]1L6m?aJ_4O`l(`nmN-YrNKh]9u9n,@!lqYaFa/Mr$/W)_QbN%g#)@e=3Z*54dW=
%/=27)HG7r>KZanH6kWVflX5`j?(qe"R!DU>=+>nBSX`RGnDYc]GNd>ZOH+E^Jj'H9q(@*"Uuqjf,Gon8Q]Bu7;W5BAn6G3(hISC^
%&2Y]9dSs^'GFkOX.nj%iF`UC,1TQ"\ffH"*IuI,P]Y^d8de+%%F.Z[iomZn7>\LEY9n85?!W:>e"c>lu[dC[L8(Y'L`s5lAh/VY2
%(YBL%XQ.uk5M/<5!Imp$8A&.HME40oSQs`j#qVB9,gBNR;L\_VRjj#u>,Yla4U*S@D(^CInU/r4D*TBKjkrMa8a1S6Xtq0okRH'G
%L#`-(B,NGmrW,>=s7"Y?G-da$2tN?iCmq!"Ku=Bu-](.\[[H5)KK8o+T)QHM67RQ^@<\]-Pm6Tmannd6m1RsVUL)jK0@^G.+Sj(V
%?PgbZ!abR"=r#42=1aH"-G<="eh=mLD'`+**).Hu7i+G?pj,NhV[G*=!e"i$%);7tDPg!\a`c;4ViGA<A1DkXhtich;b-eNs/Dcb
%l9?Wd0K,SA*]*SfqWLG!]Za%cX%.i`l9\j1D<e'tajugkNuK1HqSP<9PhCAj<k=)!cHBS,OQ`HS##YYpF$K#08B46",=RY]@0HNe
%6eQ[gNq;U*k[1;Ja@`k#r0rMJ:s,AbI3#2,,FOYl_ZYSl)3$TU4W9Wsh`oTgNfrBU/0ecH391.#KNPk^"fW:.fs(g$6d'JK7cJ/=
%4K7^Inu)H(Nsr`\Zi<1V[L`5(G\5ihbg]K^.4ZtP>:/M,_T]F'r:Sh&)D"E8FX/Oo]mT'O+1@J3c#7$g"43kMr3R,>_=`BVqmXC!
%:aChIc#qICn=Alter8c#_Cp&'!QSFDX#f>rK"QF#o/Fj4)K@%SV<=X-_HJ9VQHJTaq..c14lViTd$G/EL>tp-[/ZI"@@5dO#<lsL
%To+;*09hJQKtX]q03"\RR]B4+Pfg,S[dU<@HYG\q]ZAT'8m.U'=P6fUo$>_$?1-N"AMXK,7@3F[^#K)b.#)WbO`@\:+mc!&EiGoT
%:6]d-7j++"O_BHD&Hnac\;?CNX^P<?.u?s)Q;;#uq+S1f3/nlj`.#C)Y(Y>?Jj"sISKD::>fjH!^2^L0o%$^P<lc)p7$V7NeTN'=
%Dm!WNKY#Zo0O$&-'!snADF(!Gb>r=-h3t^"^::FK0,,T`gL44#;UVbr@f$U6m*]h6OJ@EnQ$i"U$"NYs>*EoOg^Ge$d_4IEbnfm3
%7(*4W_r$;CGY5=,KZhq:JC:[m,>==GHrbT1]7u*'I[\<^//?HV?`[;M89ksL)K79CiSP4qZEXs,@SP_cgqKp)+k1re2T$VFTl%Ei
%CIOuVga!!$?B-)(;0Dt</[=+t+6EfP,ENFL)N!!LSm]WL[!(/:)eCg(4KW6k_o-Gl>VAUNG9+bQo2,(tEi/UV;r,e"ds5;.;%Ga-
%8K]3UW?%<\Q!C&/R+*FX#)RAt9TW<H(\L,$!jBM13GpZe3KqWlIFCW^H@GN*iB<n809UptE^"n_]kD#CX4XNe1MAP*`JqfF]iIbl
%nXaKi6.s][])nJ+'??YHKh+V52Nb2/#jdZ@%,!pg7;1_`25IOE1DTOK9:XE_,%NR.i%!iemSa\h5T$s"ADF^oYEeF]##(!Q`*Q"+
%WRic-nP7Os0:&p,Zj5gfV$?J^SP,g<cfodl$g.:p\LWJ?@J-]DJ:6<]BlQJa[mgP)ctHY5YlF1>7[\2;rd!FIG@g.ig=dL"6ChUa
%V$coTOiVR?XESs(9a5]cd2Kk$2EX1ILHc$RHS7M;b#HY*02C723T')pK1c+EpV1Q&d&^PL7-_S'pO^!c0_&g'e_-P(Q+31U)S`lX
%XYt(QY@WSO,)>#2kT^s]jn>'%.V-mamkTC[5o=kq7=b'(WPA*IK(YQ_@l.an-b)$X5[m3sA[=?Za1*PH*kN\IH=:tCX:dD^Y1tUk
%q0,hNFaE2COsuapX]lIuQ."!Q%TU0a(],bW`\#<MNT*NDJ,qKDk)5AOl*nMp%s0u:[q.>.7_#H6c5`>d9-=F-Zum-2E]T5M+9_dN
%Tpkb%()@S6bR^dhVO.ADR+5f<AfljC,(N(YMB?uh)NE0Ql06-U._hAMXm5(%^%b[.Sg]d8R33gpC.?.jcn@ON!`$J.T1cQ\XG7*#
%\FG.pi@I9HP[9R`'6t4?`C)%MaQVf96(lR+'/=04>t*`m9mEF(`0*>:2IE=O2WGDHW7.h@-d;tZX,2/m*;L63g"qBWDpDDSjVB'/
%[3k4liZt]<cKZ4d`D""mLBI9,$@7k/8+K*;@/%_8lc2C(CSbKW%k&Dc4QuS]ZmZdoD(eW.Mj<!]m%e4![j\Sr[Q781F#r;a9spq7
%[+H<i%V^i=+:(YYaKPTlDt9Ns9P)SYDIF'q?l4EJmT)rQp5NOIp=iS2lLog9[lmoqPV-VQJ!MSIXa'.hUm;BBbDS564>:eiA5Dlb
%P.f)giF^r@+*<qGJ9Ibg]bY^j<%KmcjMh?pMT')21o$aE(MXm_$PbhF^<@#>*ptQS43J\C-RSr-feYs9fOO!9FGPnrd7jNb+%Fi4
%bf;;u,k['2FF<N%X]r=NrN8lTbEd-LW\mm,rm6+R9@Q!.$uPW#d'?s)5ru.&&9QdYR="Ie:<V4ok-j)WDg%e[FrDHSc7Un--FM.2
%@k]]<%Kpfb3q!OLPslSukf?4tbZ7?VRG)98=4gpU__(:&5r8Q\lg+tKq:MEe-!J_a4&Iuj[tQM_73XB1AnZX>D_3nc\EY*FlIFWB
%B$+3D_6pab0KHG,b7Zr.-gYJpKNg:L4J@2N=P[gX^;ars8l0>baM^((kgo'-??b+mUp(Z8[</iV04&\g#XMYVGle;0M%1TdWt=Ts
%Lg?0ISXa"f4DeZ@X3_B]C3YV+WpP$DWqjNfr81q6-?Bf3CKKEG"f%!0_L@;p%,7:aM]9+ToA,Fg9s:Fu>OL%C0[X?*c7e:SPuugK
%hUq>J$EZdXdupVlalI2"fR:;PP^NN'WO"@po-.:=b=kp-/FB'G9l<!"gW=!fXd,EB0D:u%g3I!4nnVI%rpb3hf?`$Ff/LnQr:<]>
%3W!qFR=&t',+4sH3C0kAe`Q/B5L'5U0M2.ejn4A$&,.RKHEcU]4tY-:WRpdgKYP7n4C$JoRQeUulM9E%n$DZFrdFdWqDGnT&mlIM
%l]U9]4N#bkIIk:1lm$o&o%->1[8Wq51D>$/j$eIlgBi:sI=eX-1sGgpo\r77nc3l.m&a'SD`dUUiAM`a?-ZL^k4+_7W`IPpW@E<e
%$3#'a3NRVKf/NJn>5e<iq[>Z!kat*lfk8>?ri2XuBPsuaB\ou%I.I*T5OJccI("?K?qm^c?E#TTS]tdXS>H&2mc)(WlI=PQdK?!.
%4nEslpthd,.jt'u9Wbt-4'rh?N),48cRU]Y312n8=#QR#Hfa,)8(Q9ZZ1lR/e)bqAkH=\;J*J)NhLDb2PGtDSZ\t`&d@/GBp^]#7
%QLN.U=i(F,+8!O<?ggu#4-L>np"U-d`8bt<-%UCBeJGfGSr[c\G_@Bs3MKk=p6lZgQtVdlmm$E7:YTTg^@_EBhVql0g%<_Xr1rBk
%c(n.MJ!jMdHN%Gt](GF,qU-bcldGU(gr&=4hrg>0.'!*s*RGb^gk(.5o_J7#Mpc<fmIAoMNpFF%*\QWJ]Qc9B]!WuYIt*dWk#OFm
%[U&'&4o<PioB.c6-0LlN.\=ISn`?ObrJ/^WbPBU,'!K!,:J]GM.R!B(5Fef,4b'j;m<no`adhuU5)M:#k-MJ";15^UH>GaG0>;`s
%Gs^imD/Ld;]`,FHOk[BAY?NJ=0/uT.20J82o@4LeZ'*oSF6CAPCm9e.059dtdc,^=GrE.=C7hR\MFqXOq==LE76d'/=?/s$E`SL7
%[[pf2=L4b%0JWTkS=C=njQ(^^+utd4nL^/6Gq4_r/'H&qZ^3PnFM]T]m"<Utak?'*hieQl"V7!Qp$0sWB(sSu`ja'tR?DLej1\5&
%k+5Xe:OW/*!g+k.P7uE;+!i9VY&#KSflP3U.?AZBoTL;L?#]h+[@Wn6<qr&P?/7.[+1tcJ-g+f3/0uAZIQ:*!5-99,VN4Z^anaE`
%PGE?+q`61+?C5g]C\NuerJd:GduRi_h1q2$P+FY5,lQn1:,5q809VCQ,ekT@Z<VjFHntZO90Re#E[U\LnB#D8Gu;d3QQA:l8M5L_
%4A)bO=7.BdG/$7;^6gC"8oF![-^1`3ou6!(B'LeTrG6@0\NB1r,[VWHk*,Z]>;H#oHM8b3=T::AHrkX(Rf%-sj:&qRHM>EPIX,5o
%Pl,j#*[ZpYp\'f]GNF1nPMFX3jB3p19:ep`09R-4hLA=eG1,]un(G2-PI62>Mi$LaVEQ_;?J:j8?CICUQoTNfAn#ZRR5L,,:48\;
%[PA4(NnCq9@4'L57kZ7fmJA[Q$]g1;-D')?4J$e(H2i;%q.su!@dV>h3O/+"UG/tKl,Crd:2W^"lkNhC-f3>_%jp.;oV,->Ko(Y]
%rT)AEnHBAMZERb5jPS;l/gec6-d'(##)9,5J)a:!lrWUL:<R9_PI()F\!*e>pViqIhYWLOg6nH&0/D)"a'TWX-D0aTq_5RdrGlQA
%`P/`<\bYssalMlff5gH?gQU.JqoROgPFmKu`+3I=;je%ipFdl.frr-;0U'Jhjg3(oo]#,KM4J9,p[17N5.roLAc:te[IEJ94dCD9
%EA.*/o_mXq=68MVjV;e8h@!sNF`2'`Xh)"9YkmG;g[q96H_9F2GOK)a9n'a!ZM!MLhYGc<rEd%CSt8P,e=Y)A;q(3D2lGg'pHMB/
%m7_NBXY%gm4l2cZ3jiLhlqaaU]fqq>HM(flC>VZKT6`_!HT1VoE;k88pFYi/I67;:4&nJd?;)_f)**-F4SO._4ag2!QJTQsoV5^^
%EVas0EJB49??Zoe9lI^,02<T_5C>6biV!';FN2JHl-iIWS1^tW9i'A>ZZ#;.=5TnCVo&7RpZ:Aso_jKq$_Qi?]dh/$)a!r-qn&Jl
%5.ghQ5?#;rV1,jqs29=MGQ2,nj61sZr:r-f_u!6%,\POQ_7LRDE$*=eq<$:@<nA,Dc"muQS2i"c:X=FbPf_53?C!N_$;6[H;d4Q*
%0meC!bg+KecgB#(S"!2dT7*]9B@jo%<+gF(kIK8i0:1SAIOujQc/tW>@$oX9"^aE[>5:AV+?f[Cnq$[`jnj[C0BDq](XB_`_<^>`
%k/$pmpuT>3+nOs7H2dEU#IW"-a19mVe'E*D?TOW[GVO2#\+8'1RG32#;ODgCor^':RA`m*IG=>AF1$ifO+qp>F#:H"csGJZIeYm&
%qY5$;\s@iUPH@SDI/eKDH'nQqX?O9V5(B&j-m"nV;H$BS;Vn1u@VTo[qqKW$_FZ2!W'35@YFjZhV9[P:B;tal#:hsHoPlDK:*1;#
%cd0`N-N34Kk&'s6oC9M9k1,q;l,(VQ@=I44o6<I,[s't'k9eaWErEtDq41#5BE#f<QXAm3*7au]h(Qh"bfo'VbBYmhDEUpd2="gj
%GLAN7?$U3+^NPiAUk-M7`lob=,K0<B]Qg_HHR:X+es:PZnn`:sQ:mtI@e\6@qOV'$m3hYkm&-]1K)KH[bBs-BKClaG$hlg]qrZsf
%B6Ik$kdY[,X0\nA^2\>0V3fKji8/P<gZGIg-f48n1lRs./^MNdO1f9'o)7?sI.uQ*9nr-*<Fs^k=&j>)%r*S=lV4>NjlIraAq"An
%AQ,LmqYou8k<=-poZ[!If,*l/deph+Yd],C*Z&Dqme>Z<[.iLBFM2'?[g!/JroMZln*m<)mc>pp#@97m@C*B5epmVW7G30u]HmFd
%:D^J<r2]#<K#sSHG$p*/G(ZXU_fG6mp$?\f27uF@hgbRnd=_Aof8guT9dGRD4^3F.5!1>[ar``KTj\`)]df6^jRW0$_TL%"lGCB[
%kKS_9gR%XNC)Q@)@r#[S4at-C/cU(i/A(F3j+!MGr;G]of-dP1n!BY/I?9qHZCO#!4uk[:pZb?GV/i.k>^ob!qIJ^_o@*).%lU"#
%IFnT-4>#a>e'Cpkjn!+\[k")Cm?BPRT4QRpXurbL1Vr\YSb;gAMk5"iq>ST;np0Z_]Y'X0o(d[\aaD;cY3+T50"sJsHa<G6IcbJ2
%ro<Tg9>Trj`R:fm<E]1(Zp)$"Y%6^/R-!u6"(uo,hL)oI?`UkF4ulq6>e0U3Sm1`.[]:o3GLG`@cYq,F=3=mZp/gFTTB94Ar!0R/
%Da#H`=7ZqThQPabqlRH<0Rjk>D27:merFrheb/!ufdH)8jaUFjR,,b9l^t)\>O120Ah,O9i77CVQ/0UYMg&g7:L@?h.%G0;4F$O@
%@rZ\cgW#_Dg#\33_0Y5)Cu*rsq)"V3Hb"WFpA*h'@JKKFbg+8oX!]"'*53Wo2^%7NYAMS[Q1pbDNbh\"D=6:gI'@m>q!m+iX@OCM
%4j>W3D]QL4gKWR$(6[EnhW`_eU:^8AqlQ=BhS+74Bk8[*[C3<Go#7nY5#0TLmX/A)^V=QVAL;U[SpdX-*nA!S?7.t0e6i)gV2<ec
%_9<T&oD3"CS_]d'hmN0L3T%K_6\#*ghSo2XQi$C5oUGgPq7Yhe00?N%KB0tK\HDlig#I_@7l*43VmV`K2\33LPAcaN^3]G6_uB8Z
%D^ku"kD/?G'61O)p2oWiA:!q'gY&EO8]/2H4?[u]p4GRen[<K/FS24%iq'X'4**1cmnV3<ZL?tjhXfU-I"$/7rprY7s,bIc:Hgm%
%gO/_Ri8LHZLPs^9c&^k[qV^BakOcs<gm@'!T4X^+PFn/=nfL&D3\EYqSG\nKVI;YACd0u[r9!\Ok3(/Y_>>E4mc9_*jG/pPH1/S=
%U\($7X%+*b_E5oS4.H+..lZa#Q]'l$l^*[?D!'TonYaU;kD*t3+.hrhBBgGJYE'LnG'AuXF,.BJPm>?V=b"&,8Af!4X5[WtoP,V7
%F!%!&bIu2)Q/'@;a4X;'ZrFR4jMOkt=C0WAEF+%=T'X+<=$J]0H1%1`[^0tbZTik[H<r0Lc^`V+KsTV2Mo2m<H)6[jT4So1YMVJ=
%QnN>q68AH$mUeDlm=1S:pf9T7G]Fj!(NS\o.uW80oijFTGeEn,0>+KHn7(D5`RBb.O7t:[^=[3SMt^k9qo.+_i_qQnD`oO4o[:.q
%b88IYdb40>a(=#ZR4Rgp++5`-k)qB3R.(%+Vs=06NQad:l(l5>oCV4`b0^<0]fJ5t')^Y9VX`Q[Z<cFR_84"`IOAJu\Qh_hiD$%<
%Q=mgV,dN\?\l?f#fU9p.(N"AF.ikO/*!ja[ota[EKsWHB/!h38YV,D*+QK^u]@BIbT%=pW9#!%f6hM\*'JeeB=Wa#Ur(QcC?b=DO
%`)NFncE\+mLA[QV?N^r((StA=ka3dOG-d40(OO2H0S`,HfeJi]G'D[![3eT%>_Ppk/Y?@>Vo'\kd!FO!5SfPsT,TXK.rCE'5/^Xg
%SSj"$4XoI8B;Na8ju2*0]jH'?lJ1aeMoA?"4^X!:d7a5mSS'6iVTE5apS70bIpRH[V6]rKrMKNo?di'Ik4YcREg:B#Eq!,14gs_7
%j`K#uOT%ZIBM\'5YO,+goM1(;3BGu<eolY&mYpi^qjr/iR_;6^3LSQY?g#,$Wd/6VFr"-TD&(@@3c7Dg45O(6e#EJE/bn['"oQMQ
%`.NmZqJ?4YD71<okiM0of3TRG$*Wa>0e^kI7:pX5_;b?K^(:N_Xg@4b[<sp<Kj)2kkfjJmJm!3&E1$_L/G'Fj?A>Xi%APJU+kGcg
%-Q1kA.nK+kVb0V6LE?2]'Plr<Tj0T,?1QEfIV5)D?G;gu1][5%J^uia86bPiNLtETimOro[Ta!(7;l2&\bB<kgH+b8n5[b<NOUGm
%<MIrIiqQSaV3:juWO(8XWR43=dgdp`V\oVF+pfO^DA).a*/"I#Q(DqRM5n<EC"\>K-=7<e:6k,c)[6+"bN-N4cQl:W\n\ZYka=TS
%/;oaI@U&\P],l:P;d4nJF4$[DU0U<FII]sKP7`h-9^5,$nE<l@?hKScAM%1@bC\"i?#B5tl&PC>CKaW6Zq)`i9?+a1]ZPR!152r`
%p5X`hn&cEHN=(T:ZUhSmJ/o5/--[!u9HR;:XWLVk/YH^2/]?!P_IsB?Dg\LbI5\f?Om9pPnG+<I\b`t/mO4?AomV*aqn=<0.shsM
%PdKU[M,JH=j`IFr3ZokFcmW+]6`YS"98SYYAQK#;S$LM;S,*IlX4;[_U:I\5D!)W)C0]J:4mpK-Ml!KEG#%L!/4Oi,$G-gR\)Ne\
%2D`le'`$TfBa`27gK&OmRfukpZh)faYdi)06YeYfhdI-O%PA()Q=;PtN$.)#nZkc8q'Je4dp<!NE1go:(CHQ\knMri`9MW^9L`j'
%QP&!KhEJ-DKLi<S9AI.che%Y$6lNpVD^rYq&N$V6GFJZ8ZV2t;889eNa%5X46>.t4/PI,N$S/e?rr/b\S!Fc(`nT&pR2fHnM+fX:
%&cp_qnubp$r;%0l+e$FumNQ]7[rVjXgY4l6KsYusebl+9]Ni$Q(YG4N2C@(W5je,!p&.8';a8cIU?spE7UG8`am7`o>VE&0&3&[U
%n2%aIBWYntQC7u5aD]B_Nuf,LaZNf]*%uDA#q__?Xu&qD6MiXEcG*Od\8e[?m`QtO)aF8d"USW7$1:i\:q4)^r7Cs\q!J9APg(DY
%-X+\g[IJ/n<et&G]8u/n^&>#W])>?U)e5U4kc;`E"Q01Ul[ST+:LRE4fCpTf@sXI&"M484g(/T1&p;3i%tSMAridt0Kd4:<'X!or
%.E>4Gb4-)\\/^=3k6HSkgFcbY*(WSsQ&@_8i21)D\-\j^U)@&SXp(2E9P!C%jZ7,!,/g=BAZ%+aWe>>f9REAui/KQt)O%>'+K]HM
%dc30A-OC>HmWp'OcXLX\Y]-4/PB6l;c_dC!f=,I-cVD)EqK,Fll+j"KJnHAVma>:86sukI^o+#N!q[H(kuM69[-LA?XpLSj&bJ\h
%r3UAIqJk7jFK:$u"#'$IMak#:+\U4RN\/[3@'PDVq`YSqc!.'ACV0FO@AQ-KiNbgL,#em-d!U7-QUj>8gOW)fl[X#%qIBRUU/)^Y
%8'3jW9h4m?s(K1rI2<nH*Qt^)d##&56906tF<)<Rj[`qdgnZZ>`@,m/<R?nj2Bg5L$)*ATFQ_![9HZ)5+<4XpgpCqI-c2h_W<?<9
%6DGeo&^V$D5Z\4MQEC)'1(ZmTW&tTW/YW7&8SmCO=;&YUGaq;6oM#Eq`\p:`Bo0,`RZN_6_S^\E!N=?'GBTA:-=c_n^khZ:hZpJb
%QXVm.1RiX`[]rE-NFj^2o.T')1*%c>ZpW!96XX7<A9l%e4U0o1^'%aK7+_/9&?%i\+A1P3L2]Gi.d^EX1UH4`f-\(%$"'NWkl[tC
%OR4M&O*bT7PbYF-TO_6++Dq"E.L#<Zkt,:s>(O6WniVC26b`at2`/hl;Hue0V1ne"/M1RkH1."N"bY$N&CDomE_K\G;^t/+6uJ%N
%Jn%?G$`+\T5:sZ4#S_kE+PoEY&Z(&3#\s4dVr_<bl&4p_cAAE4,sg>i/9,'J/Ni%45->LFd<lBM<"M3pL^u2i9.+Qi<@0cOF%E+;
%nKQ5d>i)EtMZK'>[(rnZg<RVWIAShdi0_Ja`3SVGp76<1;5GD(:n$_)*`8@>f_V_'?Y0;F(MUA<RS@<d#bYtOon9I>I8UC!TJXu9
%0Y6>AE"ech3[E9UN*$240RL9#p5o4&q\)lDQEG#UQ67nNf4`J7da8p&4l/%A'1c4]Z1r#Z4hX'#LH(rYX9?t.2*aEg7$=.i`(PFi
%:J5.Catnj<SoDp&OJU/,>al;C\$jV(8>O?K85hnYXueVkUeCX'#C$f1dP^k)6#A(5+g(qN5aimr^p4Rc?.g:mVb?$>.?^L6+qi@$
%]5H?Sqi3KB)0d8=dNt^O?_fl1kh/5Q**NR'FIo*7Cs,WnkfX")[!amX1;:X_LW!=sU&6PLNIVA?<Dnj->"#q.j,AYk+4u+t-`t:!
%T&u0Xi<ej2f13Sgi/tIGjXXPF,+r5DU%V'O#m0&5"3R$]O[p%d"gEEL;bKA[!mu7OSUfi74mhf@Q!3#X0D#mJjuF^8lo92:_=')T
%+965M.,i$^'j=ks0Hf,9Oe`\o-9g%fQmpu;-d^LC&//5n6G_d(JTFntb[@R.dj(!F#L5md\=R358]Rcn%S:K+jGqoNK!hEJM%5A"
%&L5jt/,+HdpU',1R8.Zra=-2_"?,X#=)3"XDbm)BjYNq<c^"tI(qhRI<_gf/"l1/jKJ*Cd2)g&b^e:CIA'HBt:+MHm-I.FH=[6C&
%WtP3O#hgXe,hB%6Z0$\;"QiEp=c/$7H"=.@#_StH?tWm(,X7.D5X8jV#iPf"oSFEld]hBHe[-Zs55QrW3$<#cg5M2:(4+>@fb+qN
%+n8,b"E\,:'XeZlDn9a6*aE1/b!`.Q%YlkkL_"3q44:Kl"fE?l"*llGde$)rQXD?ilo]Bf-VVn$no6$o.iVBYe9d7dOq"`o32CUe
%K/6E08Bp2<6o7*/1[2\;<BqHo6K2l:?L>fb"=B@G/58_$YN::73i&#ics3Jo%Z.Qq<lD`b"f,D-p<K,,A[G[q+?"D6"7o\H[fY>j
%g)=T2)B3H=Y%'1XOE_G]BeUj*F^p2#H:d7@U;JrX_AoIG%o2HdSmEoa)@SF,C55q!_;Yff?DL*EYSR=q7lJ#o6oL.Rh?2Ae(_U-J
%/`)nW@l>8gMX24QYsZC#Zrfd"=Z_Xm>`r\1Z#O7&UtfI!W,mXY7#+nTM6RojH&sTI7VPCo79l@k^L]Kgc\bFX?Q7M5R;e.M.+a)8
%&&h16BWEhXV=G%c\C_E&@/r+(A_hqp$C?lEn134k$!&U)RlM!n,;,)l57JRhB/?*l6#NFG1l'"PI+g]07hj@(?mD3X2h9R6D&Z4n
%paSDFL-4]1T#<o0Xteg>m2(>i/kM:#bBC6CJf(iQBXHHg_k[Xr`]bKQNPOYKI+XV0m_ZjUGhQH_\W/rq1gQ0e-tj.8o');@,75Gl
%",EubU/W!q644=<"d/r17PcA'AF%FA8'2^]<f"?kSo&6nT'SC;&+<`(JpXa!BMf'Y396H$P/?Pi?K>>$$Kod='s"B0dDrY8NA]-Z
%'r#0KSNV9/S0iuE_ShNi(P!p[eJJ>'6a@%M#kV8#Y\c:!ah/uPq6#jg2X)nLq?.R#a<8lEU`miA<Z?Y_0hkoK,q(>$L#HPdd/Hbn
%e"/=Rb\%3<?][Qb4Jjb$3F!ed#]/&De%UB/].sDcjl8Q"%Kq,>Ld\%j^Q^9nE#=3^_@qbV-p8."Cu)SHECbc%Bg9sT#QXRJg$mZa
%F@(!J!WcM$GUtfo\0oqJm!F%cYehr=hp[CcK#i:.WYj-#T`(LS&![XQL:0HWn7,\,Up*'0gLbD&=cl@1(c-NI[@bqUlpRas%Z.PP
%bm,%!!u<*FKBF)AJ['LSlg)Hdj(]_L\6r"="fmF/;eX)R4/D$Iko-DB2?%S7Y$MA0)sP>[/,9f\Cl4W)E@>]"!quseBMhK2=Eh+m
%@_T!RQ'WjY,f8QJ*8m<KHI`RC';o8VH).YE49:[k=suJd#dVRHZrm0f%RdqWf8`:dN)2kgi)]bN(Eg%KK9.)KT+l+$+3$eD=9oKJ
%.OBIZN=*0.fIQ'8,BfI8;"4iNLs]tQ.QaFl5]FS'jr%+@--b;SPW%J(_5eHA`K62LVVmDEL;i"Rp8$(T,./KmZ7CrW2bUq8^rhLS
%[AVC[*&bN%;7:lgcqn?Pk\54*383QXk\sE":CFNMGbcmX-VUk4_q0\m>usFK)G\'-bOgX%YF"GUj\Rf!#'&?:SqMZOBbLKh10P-D
%5Mol[#AGF$fR3(N,ZDh:)GC,p8[JmEA0Rd+,+Tt,^_&&(gD7Ld%a0t?[f!pcm$,aY5SsDn<dkV;F+hqt>j1WmrHf#k'cs;jRR<f#
%:6PiY7uIgnJI#cHI"HSOR&JsB!W++recd:/asB?HTQhTT7J\%-Gp'Z=3i.7<l!&R\5M2&D13FOb&;bWB?%YYcQJ0@jOND752;SKO
%dD69TmC`.L%Z.T\c'CUDA$"(Dedcg>j[u#O2PN1($V?s]1pS'Se-cZ]*C3_78`Nu_'h5e<L`@theui9>Jsf6jJe%[?*=Hao=H?9n
%*FE2r@^(%:;'uY5EWGL_+nNg>,11,!6XhXe0SHf(?aJDN8eS:@l-T^C[HEB;N/\%[??u>eYURV[q(dJ2"s>+G2CAfIG,^R3L*2g/
%[D8(Jj2N_G*"/cU5`F6%9@&1#(WZeJ<:J>4TGi+&#MWiN,eeRn+Ca&o50PR$-s<WLpmV)i9(I^HN;,FN6gVkB5"Zp5B[+kZb+SOh
%V%uX)NEjZU4qnVk/qVVM8!IIqP(;"e2U)JbED*ksR56=QSJe3q+BcnI@(OAcM;FW<VPGFr21q!BI>.?;H*^&GFj:XD8P>MCVgTs7
%&RTT`U*V<q-<VKDhSB5e13fKZ6lL=kf[[@BQ#Tta=J;4mObT$N%O>;KNRb(n*"l[7=qBOeJgDT&8,Gn8=BU.kIgX'<FZE:["*ZZm
%UW=4["(Q9FT$:RZ(t^V'i!sYdS-I=Pb6ig<4*_3tVBLU%r^8llpR.?3RdV.b+"$(Qm+k("6YNXS2UN\Q(8(E<4rD-H.BB]8IFmGQ
%6&BHr]S@A#95Xu^I]8%:14>5c[SP?S,N.P2Xt.FOaY;(n(I<Q5mDR@6*'MG^:JdTjLQI61HaGaZ!E7JqU?2"]\/HAi$m7hpTSGEc
%(1\X(mV7NNFr!0H-"qk*-?_IYQ!2"(c-0:0*gC*=E1"1jY'iROjPd\SW*u#SciA<A*00Subt2-+g',q8kcd5f!b>CT9Kg)u(Y[LC
%Xs5&.8e(tSD\35tCMU[;Tbe[&K`ds2#"Vm]')!QQq2.=;4tB8E/+?u`i8L`N8*k<G>ZR0][,PU$P$+'0h4hs[fS>2SSuik9bm5Ka
%jj"M[)V':<'Blo9&kPOan$Bl_r#PX6EK(*TJ.o:t:OC=&'jQWT.hBH-$iC.Y<PW$epar1+0gC55=SfbG9_p-h[>,U(@tIaOha!5)
%RjOFrQE,J%G(jR%Ss%J"T+81INYhLSXWH4p^,7kT7tchB&J8<2E(4N*_78Do-5jsX"%43YY_7QqEghpiSKZH+`F2YU)%MW#V07i^
%@5$:K%-!KeF's5_K[5S7+jT?:qoGiIN6Hs8_Qo9uN,Q!"cp#c!Ok/"L)%pWn@WAL+&8=_'E/ZV5>(jenVi.'$=4<E)=<0h0:*I5F
%'#hDqCEb`12X!hsgu9^j.1"AQ89al3BoI`#6MQTe'EjnX&N%'6Qo%Jbq`8/Gq6,Fd:5=Z9M7&puc`j2l&9_Pij:e7m_[-p0ia=gf
%1-NV1&3d@6D:)t#R?Na]n3+g.)mY7SL/UGiY96ig@q?!#;B4sh:7B'>SrG4.kYF4Y#(VFCfW;=;"p>;OCUBK3XjI>2.hDutC%]G7
%E'?%gTYPMm#d\M_YO,^-M=[<>e*rUe],XBi!cWZ\/U\n;iOCT2bO['Ogp=@r#eQMr:]opU9L!?97[XU&n`\5R^`[Yi[#lUOOU@P]
%?3`c$Oprtrd_l/1S--N0<JC^uVJ>urLW!@lgM&(;>t6tD`g*i4[o,a?eXfP2KNr%Ml[9TmAd`7IKbQPu_Uu,H">HB=Lk(fY)\TVc
%kkW:lB75X!QKU$JOQ_QXk[Hh8dii:s(T<E37WEOTOITlI`Zju5+9`aURXoiuTen17Ea;%CE0;s*A2&8$%Gl(GCrf?r%1.3JTp%*:
%e%CCCm]^T!9o;3IbJoH1((!+$d*Nc7WWW1?abmH:Ti5$?G)iU_J;uGX!V]Ha3<t-UQ:]NbKPE*1"2ns5(a([ZE0tp4F:XT@M[rKN
%B[.#^9]WOd3=s1ZFZ/<nQfp9SOC6*H^i7A,e`Jlo!M#02#8[2:7WtrV'$"VWGkldO4urqmP+:ij>mjjdb-pG9':?eBM6U>,AiPmc
%3("6R0!osu+\ZIQV)]dPF3JOp/Xr<gP/O#"<VUGT3@%M=K^fBU@7k&ikJC:IT*].h,ruJl,h-g'!K\?I=<!q[o`Jpl>9_Ic`BRMV
%G$m<kcNqC=dmp&tR",rinic@pbXTpi][-ZlG*nE"%l5KTZ">%#YDS<:GQQj<N)G]f`?H2)><b_R%NMgO*K[g^[A\:5'I,,cRDURr
%4MDI];/GIi@>9Fqc<:3WYCZC/_Y4FJqnaVA=F-"GWC^%IHn42i*eP)Uin:A!2!_dM>(@=!-pp'].9%LF(n.A?4m`=\$$DcKr'Z&F
%q^kAL$Y6n<5%,tg^.0H#nNnJP_.+,e@0p:fD+I`<(/HJVqN85r-$-03+W\i#N@oI$Qm"bUd16_J]Vj6?4Q\7C=:`ZB[jkppi)i-_
%?9D!=!^gR($Okd%Ka`*D8/[K\?\^KS"RX;pQ&/8r$jh$')VGZC)m?;[@,;X*35o@,Xb3ZDU&:!&+lIS8>SD!$NJL[ckRN=b)-+[`
%&i^A2)d9`#.JOsN14V4o$Paut9PW[?%1Cp6K_C<Q\C3EP6*%.6\/#9h3S6!)"=g\gBMJR`p2CI)#-%6!4%sd!a-]h32t:g+N0,ZC
%o)QRHNf$kEaMoH5m+Amge*!H&L$5Ug-:S=ME<)ALMHD%C&,-[=/<^L>I(0sb>-T0meL5N"?m.OY"/`Ck5qD,qE9I?pD#?95dQG4k
%_LmMTTB8sS8?2**K;95b*0rB7h]SKj2"G2@@;pJ2)*Hegg<p+uafm!!hW8NL"-H!Fi%*tI>DWV&EmP\;U1MVk8o`jE@.[&.hS*DR
%/naDuYZR-oUu9E-;>?+d(d8M4(b&Vu#?ElZF@`KUB0?1qC[_C=<!\l6)JK]K@$dR<KbsLm+]/Ro1;Vf0=pQ8OC/6R\5V%^aG^sk2
%\>S9\Z4rKO.MY)lUVZ3W.I_(Wo/WlqBgG9K0m!Unfm<N>#QuHeI@<NtXLf?11s0>/l[VPnTEN@m3.kS]Ac)gE/\s#n&onLf/S,87
%J27l>gV!GpGrTuS3Gen?f_C1T7[kMQ>:2P>`SmZr+)Y4M;VaX8]d>oG273[UON,C+(b&i]YJWb``*.A;N,&__h]EhR#Z_gC$gF^p
%EV76BY"R7r@BuS'N:1cq7I+D$(*k5J=I(3pQg/5.>.>R:AaL"N@I3"9ML!^Yf^,l)0]OFj^$,QqiV#aL$g6Y3S=+qJg8?qNc=D.R
%Ap?q#>FAF/TUf;qEDBrrY4gWold^^b-FrK$'n$SR]5Z/C!Rfp?3Yq,X-4>DZjYQkO[e"<nIJp*$o:rl!aT4R^4ci?b*ieZ1j7H@f
%JrWa(dXhnl0[1b\f%i7\=1cpMH"m]c;9LbLf"@90h9S-5$Y>[6P$h?HJ9!6]"R+'PR89OO=rBArrF]?YdRZ?</fBj*d:T%YWSR:L
%!i^PRbntig/]!rR:&r;l>HF='cZ2R@FZ2(17i?]@0)("&i3"p0!Jl%Mjto1j*=DBuSY+;#K$j13E5Zf;7RM^!^530,0Z'4Q8/1p9
%>q0-a5*iG`f2h2SS-jLWKNk6LfHjLDb6g)O>^5Ts9lijq`@1p\*@7DtV$7F/GX`^.*i(nVY(8`mI!\7;7DRXhc>tH--+:J=dqUg8
%1W=KU6H>j+SML;OCU6qLg7M,GEOZ(p"IU/P"BqAB\i@nn>N<2@SjO^(QOF]DBlGJ&P#7pgpAMd;T>8M.R^=]'17e)M"jF66&M#gb
%Bk-JnclD$_1,<N'R?.MCaSeM))3cfm6ubgofgPNW&oA;PrFJ8@O0T9Zh_r;2hrE.8p3@.'1oIriDg4m,2_+<!FpViJg'8a+-kEC_
%+?ZNRO2S=,N/eT2_/X_GEUFHS=$\^(n;P)3F9Yqfdn)e4lSR%O@)j_n"FT_Z:%28l)6gq'!Z#Ol7<1AdD*n]_8i@lN*1d5HpR!Hs
%#87\VdEtNeC]9@R/-5sf>gFg/!Vb?!_F/KZZn]uPN:6ooeBng5"G`giqa?4X>)^mj.@3m4b#L_PccAE"X`(QoU^?TL:DrRQ!m?hH
%=B[RN'sqlnEqZbPiCCI*nU"g[#,P?f\VsO&c^D5q4m^6Z#ndl-,Nk4?FUENN1l'"PGL,9Q3/aWM:(^qt/gc0+#m!P+'<&:?or@42
%>pK:mi1pGh3H<`.%)@uVP9Lj*Z=7@CKH#IqF'c-"'uI-%H$(rLQV61t9d^!;G_C8aBR3`r:/^75(.@3:]7S$'MNR@i4q^,T.$RVC
%ob#;%=CEu>Lf-4N6aiNp`lQF?]'Oa7ab;!_=2.^Sh[B.GUL"UZ?gJePPu<sBDaW%FYeD!Q?Xp()WmOb8&]_2/qg"PsE*?YDE+*.P
%XT\!a)j8KS<c#_5&mE1@28>sGfF>$CbLJ3Vq>o>$*<mF&J&J;NT_k(REsbI9@f^RX<a6!?Zf(<4L1?,%\$'nQ1Q6R_=,$!<.?)$p
%<lPPF$?j'=Gr>`BaZ^Q*&VE1_P[(K""d'`E@A?QFF@I_ImDD+Ue6I*ak`Ap4*d8VGCWIt;X9lbRnnmEI;Qr/@"W$K44ET:RT$X%M
%\6(aVT-D,t*p<FY%WIEHb#m[2=/[phi%9Z>@lcKpLRiu%-<teHZDHF<_DM[tOpWfq?]XW\\$j1BLW!AT)BuKmLVn9H0Ri)CP,N?h
%oQF'PbKupGUceDu?1p`Jd-EO]#gX4(_[#3/he8"V$(9U@1dhYW4'L7h_sKiQT92\j"V&W4%CFs4MWVk'p/ql\0fqif8KmAZiiEgq
%)O>&]n:25HN0%j!6Ab2A$K)Xs*nW,YBr@o,Lr_Bh4uchBi$%:nX]V9*K4HDE!5F3a+3(V[*:4pB\-e;qJ&D\1*H&-ie$OOp6WNGD
%4$Je1ZZNmZG6Z(k=h-pb'Anju-nH3,Jd];gON#KtEsi<&S=pC+l^5[=KXruX/5\F@@Z(D9=26T@7_ZP/:EcQ"R:JY$OtkgT(bC&u
%OPq^mkOG<HE#Im%GjNOm[,pHoQu.]r^d1)H5Tfckb1.!]O@1"bLI#QA.a=AEcStVgK,MdXfL,@cc.Ia==@W9aAGgJS9IJ0f,m@(t
%Z!l!19A4sjDb:c]5Zsc7b@!&e1<6?$1reKM6lVF?:"\UpCPObk[(PWWd35b1UMjI.d1opsj[O,*+ps)_.)cXe>WlqpS,gIZA[B<$
%6u]+PQ]6QN,8Z!1X^H\hac7p+-s9rR[dZ:<MV`7+4:3&@eO:g7')6,.+)-4.kdO?/8<h)lWut^s,/9!MLra6tVi-5-MK:f@'6,+b
%-Y[;VQH`dul@`fEbD,TuQ,tq!]"&h-p\X!.8"H*k.9!t+FsYVYe(\5UDH(\3lmhGe,/J]p7#*c4M6@c('MQhoUO6R,B%0)5YTq''
%i]n_q'>i?u>uI=ihQ@l<"U_h(\LQmZJ6!,\ntF%#@#lZR$Q.h)1JsPY+e_a69?/tC=YM9N=EZuSoR0ZlG\*U:@P(&$V9?kH#*hsT
%G.D%MUE/ZB"1'3UpSQH*%+:NlYXtS%BZVl(0KF6CJ/mQjAYEZB2`eC,6\f@'fA'&mFcCS.^p%;5V'T&kp)RIXB8RP^=>9KZ6A$;)
%Y]u.?Jn#0dHfYBg0(p]4-NpY+_9"6%;S&aOADq5h6PDPoP?Wuch[(Rilb/.VA_hIN[rp^Vc@d?m19NhS3^RQ("HF!C89C<_O>r.q
%[r](<%6H\gGEJF4H#o4QZ%<:b>I>W_c&O4`rMR0W#DtI2.#1gU;1B8Q-_!1"?2[=rd^:Z*$0LM:]1?Sbr![b8'6jtV"hGA87.,dD
%M,)M>&ng`[^uD<CZf1k:4bX.P3kb+P7M1R\dQ(j;FKHR2W]kV=ckR+CY6u^\/8I,+")Qm$UkY7!;)`6AjC"r"S1j3&AKge5,5LX0
%/29ulUq?L,BVE;7*:u=Eo]N@f;X0c!#Mu"`H5DG"5l6'XHQKu6a]sVhNGo8')`p;FZlc/lX5Df3V[$Re.F`@IBpI.<#dh!dbq[T[
%?7:@+43t8So[/Os+>DnLh-Um3W0Xt0G[(sF>Il%,f@oa9i)[^&]!OKi>ES-NRg!f88JQNBQ"rFr=ko4T_d%u;p7KT#id_&"rcHc9
%W7Dl`?gJ@pT*O7^Z(o[jKKC]X3'R[B`(Tp;)(@KP1560/laU#oMaBXG,mf'Sc&F`FW9UY4jDY>Fdo&*.U08\8WT]ql`;aYo0pP:2
%juF\ClC!i(-@mP":p86PT-ja$3H>0E?t&;#l.is:0IeC&n7r/h;?4t1*hn)*fAM`I+Y0+ab)^>q(MdIcn_:Wn)[S4Me-C7;44#rl
%d>24%Rl:UF"dSM#f/CquOk/"J)%L@A@)1b2_&f,JTVI/ge)G1>!KS(1Kik5@.T^c@@XD:*E-0iYhpss<UASUeMh9&CEnqR[@u?Om
%&?9[%;Th5O$%u@R>p5[TUsd1&6(]]MgF#$-ep:L`6^!nrmMB]'^]nT]8DDoWN@R2/0'>^nh9d\b'%#996jAsPFWm,/;/?ulWAlFO
%UTWl)e3F74aeJ<JW\I\fl40Bs3\muVO_QFhKc3f25E&??b)@l2Es:5pg9$%l?.;d]-9\t2)'57L$6<Lo'&buJVd[[]S!Yo<hi8Y@
%>@=W@?$D+#@kDIb<9>j]M4([OKSh;_oI5ZDA?ii3l<8,U>?Id&R-4%#jg`#[f3H;O8eOjYME6cm9<HOc!N_gZd+(>-+gKVIF;bL%
%f?qi&>LMZ`/=`5]C=B-97f`1X[/8-(AEInG&&hh!Q-sbdEFUEXrO=VWE.g&.4McS/l'V.T1=C+Yld:c<G[jYc&!E18g9OGu"Be3[
%c;TA4@rp'#bWYA7!)-KU02/+42n12^6t?p!DBOa]p8Gg&mW80<D4i&'N\gOh)//G)"60J4E.Q=!i;D=D>_H/9R[q8j,*45l4f7.'
%P`.5:qiWE5GiR"O"-;KR"m@VRX8HS<K-j!C9L%r!%6oEhG/,:+\iBi!44i)@<Er-;Bid40Odtnm6-#Nc)A;BrrU<ocmWZn.kD75d
%(uDHD4\(0A*2T"U(7Ze1ZPEVoFL-$bVTMP&]"2_1W"Kj&.@h$f@Is2TL'0S5G;tU0#WO3PicCh<[1N2%X`W!\-.lA=\`TFDiut=h
%dr_BG-43P\Le)7[ObA^&S8Jt90:`:c''^;IoF^h;FfC1Ne.X?IXH'/hm.V]f<(3@HKrpOmd85j%7Z_3f)hi!XHeLq0pM;I$j3Hu!
%mQK/[d#_)Eker8@*pD`U#Xd6qd:V))af5bSUcQ=("tKq:kS[%Wln(+hD&jc3<b)5Mo)dK*O`B<cgS'%g+eaqH&!)f1]BcsX3]_nJ
%HfD8UJlNVu68?:/%%b`EoqZ(9S1-YVK=+(]d;mq\j227?WfGh()A;BRh<BGclJrq,CUQpW$uYM_F[#k:PAr)f\2O#mOn@iFdiV6J
%2AeE^9Nb[h7I^GC'rhqU3t*qke8_@.EhaN>A`iSfU-g8\'fAjt3JeiMF>O]VLKtCE-j9?*3.k<^*0[r:f>B/lac4FemWs)"R%YXG
%H?=KS(?30D2GX"$VcV(7L+,m`kBOU:"8IEFDFj@-:r%_[,R8qYC7`JuE^D"=&)]Flgbr8?\o\0X1+_F`El2?bUN'F,V_.&Nkl)<9
%*"i_T?oW3>"tH:QC'*E6)k9qd:`RDATTO<Y4d<J\-Is>Zn.@0u:=S/?ZI"c)*KJU%4<5Prr;_R%3O-g#Eon,u.B[qm&Jm`F2Kps0
%9'imOAL>?N`\7['5(S,R8r0D6j%`481snW++S(pili9PV/rpAH:r__aCY[`9BXXcVMQ!bRI-cA;^el-_cmm'm%J4bYUgp0>ZKY@<
%M*;mG*9e?;/Sa2*?0-%W:[Z8UC1a<s.U.La9<QU"Hm!C]>F[MRB*pSM6lHLn^T[fX>+uscZeq.@RPlYGU+Jt1W2G!s\m/&BB;sCY
%A#Zh17>*P`l9j#_h5EhbD?s]p'B7))/dZ#7Y<,7lU#U.f"l5NTS6Ipe(X48tiH%Qs0#Z+Zg<apn5!m%PjgWa5<NauOCWN!'a9CE,
%/>Rg)i,D,HK56XBG15gUAA=s)/ea"Tb!sUE1LQG-HV`q6)2(7tP@4jDDj7EtdKsd[7CeCU31SD@['NJYd@i'V>1[-I#X%8p.F<Z'
%b8SIc@C5.E6$V%Z;X.[a!h&%7*\P^TcJ_S1*u&<^#K11?[B#^o$A9jV$nP.iL:-Ae"rO(A7MgVBD7]]pa<8SSZXBDFTMsCN#m;1h
%qERQi-`43&adiSRje=^JO&]7'<M[(QM*VWD=4lRO*S?;DNJk`t?b/7n%>PSbFcK?W,1KNF^ZI;`K2$Bq$Td2q-ARXde%:n+Xk.7W
%anm!q(T_qV=dN/,dC@l\S\V%8SAD)/)`aGk5&#TD*dYunj<j4o*D?M&nkGCJn9O"7=s]R>%,sD3HiY'3!Ho]#lga5*.8D3[Y@,%g
%b^DIlfiSs/e<"YK]2jKE*Z+>6i&Z+YqX?AYSbcKW`^8q&/niZ13$;7,`61T,k/\^OOaXQ2JS"%B_G@)o;/o)gp(I7m;TAA^>aEDj
%EL_c?H3A,XJ]"oYgH:E7k9/-lVK*bbV/(j>i:@'SOMSY!ADaWo?QW,VFma:3$a"Yhj4lV3i.n=/S,d:6a3\Pf8/1":TN@U<?4a^X
%?Hl8eco3]nI=4;2Y?PM(3-i[/*/CI%Y)@lnDM9_<TNJ&F(@.c'gYqY%eAift63Q^>/kp[TjQY=*A(Y>MZ^68&Q_QAr-"NAY^92Aa
%\Pne,%DM.r51-kkc.NN.m^=I`.V(\EEjE0P=h\gddF37Qj0gPqn4t,i'V.=^!q%"^<Y/+`V<s[LWt6aZNYY<MCYUrT7j)I]/t/O@
%DA!'g*3TfF=?ek+!1sEFp(G>`XOs;&$2jmMgNqR^_^Wm6csk^PS`j/t<0OR>!>QbS`X!i)o_#>LPD7`umfc2MX2a+7!W3p@H@n,c
%9-#+L`C5;OVU<[r2#DRfAiQ?_X#HtI0N9Q7.oE85?`@^H:;hK'+.+-m-V&r<D+!X4Jaj^nD?r7R>^1EH3A*OVUD9UcN`S!DB\`uS
%2lu5Q1L3e81ca/B>r2VZdEF(*e3qlB-oK/7VE/flFZEY:@Y1F>$4GY)BO-Te@SA&eNsS%UDR>'"%sIoF!5T8EiKVBNE0qkO(%C6!
%]?:XHOVmR#VR79X,9gI9QQQs,0&O%H9*HA+n;Ys_:-T.TF:P(B6]*KtNp3lY8VOR[AG.4)a,qO*AQkK0M[rBJYYMZq[b33-n-".L
%a7CHdBXSkZL:6_KVf0mi$pf;_otc>ZWe\BP)16$#3qX]rU7Xp>WFdP2lPI-V(FtDkkb]"M:9%l:#"PXM])N%T!dus364C<MC)mfV
%i#lHpCDf.0mW1dZ6Z5g@*Mh/hRgS?JOR@%I:!b9H$22:q%L0b+N3%/IDY'Y1%ig\61?7u63mZJ,i7FRHfs'Zia+lj03I=ekdE(.U
%I=3H!bGY/.5$]Xo:1t(rPmROS=3"Q_*&87#-&(A'9I_-@7Sd[aH6T@1e:;$B8_kEq9,gHD,kIJS8T`i$geo1BW-i>;,!/0rJM(Xq
%#I\VUC=HO@42l2I-t$\hXV5)*`<?bp>!DWp.EB.TfjUqtcl5ldD4bmLH)\@D`5,l4S/-]]*e]AQ`Suc"<b3it%5.8Z+KTek%X6@^
%k.!^q1jmd"oEp(^e^(b5UsG+KiqYkb$mp'?Eq;&A`Z1<QMIFc_>c3?E2H_2SQK/0G95o-+V/>q1'#n3qBu`(L!-9V9-f#'ZpcRtS
%@Ve^0_NdTc[+R(J6:oJg6A;nh`Q[PuJ@Zj$7UZ?b>'".a$n:'tOujD3?GLtAfMpf^.9JZ%2\/.TNRbtIa*^s\Wo5tl>4?X;9V=i>
%l>\]jr()s.>&F,u#Ri%$c@]NQ<Gp<chUZq(6K<#q(A7#[<8Rs:om@G,`O=@Y/;67i!+mBe8YB>hS!W%`Q5)QCr@.Q`)"*a0Wj+s7
%%j0tMo?#?+<.pbtbm#06Nfm[fA.05Ui7p%GC*G!A5+.;=Ys+6c#J[V-KbWsrcc%@_96WKNmDqI;(<bDSC/Xl_*s^(75*1Kl"m6:`
%q?DjH[aSK>:MrW$'clskf_<;me2,oiD*A9._1"Ce>3Q,tCi/,$#3039R6nF$'R7']c!qSS6%f-A6PfIX]Q%Q58nZkOLd3&]MU$gb
%CHB.4=OB^dkeA31e&msAEr#?R-O<BjGi*(>WPoGkEsSb.NRNA/n.\A#.)e4<B[Z,K>iHB8`r[$%E3Sm;`$+[/j3.?['NitOl8sk6
%\Da3<!a"hj?:ZIO%Mso;J`7M:%O?YH4p=t$>Y`,nj5^;`X2c]a6E:RM(l>ui1c9'l<CW[gZo`pOG%LiWaZA.dbeMWTL@07,Q^/D;
%K58b)i8KbiS]jn-QFD%t13Z</)NH](c'V95A`a4%&Hkr4'M^mb[A"B1>iq&oG2J2TD78$c:uQ1/eg^"KE@A[T$$ZHN#9[_tSU/L@
%NDZM(AUrJ1^1n_$l*<t&.#pcj1[0uX9a?CDCo_Mb3m!dI;&Up)j1#a*aMF&%jCOqoq1`g=$ei#Z`2tg8F,Xb_&?O<V=ogQ._OWZ@
%N)P+42]rolGI5OVhcZ^"&iW0&].N<1lmnr8'SJJDHD'Hm8LHEg[I36p'1Y#VZUS[G*;;&CXU[^U%n],P=KO/rgN-_GSB'Z%[g7'3
%)<Z#15'Qd\'k*9<!^?Sh%B\;3_9lP>MNVmt6k(Xs3!:i&\UCGF&J;>o<$:BE-5GY6JjJtDf?oIih[at2Xa@d.I,'8#4BIn+nBf]e
%"e%Rfb;K24juDq/fXYV#6O-U%(-!^*Ne26!pmonVTk/j5EB4XgBu/r94NSVBTdX'tqF;K_W4'k/0J2lna7)S5iE;ai3KBBc)Hi;2
%./%W<NSN,"'&D#2QJlF4["`r=:'=7)]/^eNf#<6>[FK\\?j_4_QI;F1j7Ikj'WGS#pBj97gd"9@ReYqk\4gRgRY#e)2[PMC\Pl[I
%iN.Lr>,T_0ak'C*I4cJ=j*\;8Z'/2;=<D+![]b*RJZ]o(BNSta15pD5Eliq<6"7IG&`pkI&4I_P;17ISk6AG"G6CFo%(iIG3,_bQ
%"uD4Y10l]/*nnu<g""Z\k."NGP8.o1bjK\,8F-!E\-iD*V>[<J:idQdG`!1BQIrl]F4X0ios,K9Yfn9$_3ia62;F)5L/?lk+eN/g
%/*CVR45)cAc.^1QFcGB-'b;oVIF+"]2W$;BbP3b]XLp69.+[iHOd58$I:7rR*8?E.K02A%-Ja0C2m]c+R6l%aT+)GoYYAn#?9bmN
%4KHj391XIj"nu,We3hF2-eYb.c@/A&EdS9%Vr=$GM]C%?KS!`)Xde6eAg'b[J3jl^S_T4[A]/>KhYo_5EId$1=cnF@rLAM(r3SZ-
%RZiO%,[)$b_@kQWVDqgPq[;A6a@&G_P&2slm*CGO+pB"@N/]/C>ZmoR#r_@9*UcEjQb@lr&gBmlMbg0hG\cPrJO(:B%"]qsYlY<0
%fnigt_ppP8o4Mt5bP[be]*38Dqf^_a([5Xgml/OYjtiQQ`V;\-'<uO[(Xb12XJqpH7>L=X:H%c5&:t)O@HcYM00L'R8NJ1,md[h$
%X9*E=$:;ihB=pKboReOm8-j*%Cicd8j/Y'm+S8e,r5`.Wa=(Ha?j3@_I[9Aij+#2GnF`p=M2k$;V>VV[a(,(&@Eo=G,nl&L_X0\B
%_'QP;c=$X:Eomj[ma!R?+1?*&;rQc#k)>U=Ts(G\+?G:T#=Zt',M4sh^ueU,*4Z8pOIOFgDm\$W]\9sGP5o/E/oejmY`eZhA9.R;
%b(Kb_n4fAn5'rF*Qo7%A+98&IGWP(,9b<!=a4j)0p5"aTn3MY@n-6;%!i'a/^s+VGQpBp`;HATRZMLUX2::DM"C,j&lV8?&4#Y^4
%ZPhnobY:"1GfN3R)%Ot)`Xg%b#^jl0SiJ`q:Gc\5T]6;q?jF@4;/(*t3j(U'P6i6#8hqq;]`OdF&n5\!km:GoNt3f#,?d7=.ik>\
%UE^-Q"ipIng`&aJXeGpm\>Qpb2gR#T0HCZQoR+p2OV"`Skh>lI`+u_W$:gA'2,+4BhfHpt3uL$Yc-.7(M6oOSra(79@;*Mh:L=d!
%="rL2'&Z8X'5WXAjdX_6GsQhYoeN;gpKU)$*Zs!cCQ@BVOh&qmM5gURNY<7?nZb`sj@]rsjU/>_dOYV35nu6-_r8TNR'4IM+3`.K
%&cD:C0f\,UX%XX5^Gqn4j[;%VS6_[NZaRVcNgb=;CbrDAPZBQ6osCj:d#t:h>;)T+;K.?p%R#9rA[U;Zl'CWnf$e5d+&M#krA:=:
%mp8Ip)qP#uT<u5&2q,,$C.Nf.lqd`L_'/%kdn\La?T*o[_LVl7MTsC+3)Y9%'5.H+dU@Cs!^(;`D?l+Ka(,7JT\aY6-q5JkG@CGG
%+*Z=#oOos8&3X-3$AoqW68304(l!e"]I^ih*6U(Gap:%0K;O<^2BeYfbRQC2E>MU,O18!T+f<&KoU2KqDAt%t[A^G9K*6SK'%TIT
%mE9UqVmk\)r,94rM@Y-N_bOSR'P=@M=cKZiT371iA;rWrT`f"plg<t14`sC8bm]pb46$=7`@W\r\FfGEfqE'p>4U&[N#gMP=(_E-
%\Vt$cp_n@bCW0d&atN9@#MP.KH>YY;i*Meo^*h-o*&K#%<UsDH%&fo"3S^Eu(J1W?C2gW8"u:tgAMYFgG1l5ZkAUG8Hf,3i/3dmC
%_CV=?P%G\;HjC8kER,=<34?@Cgh98B@5Ko4U!&a/JANU@l`")LecrP0@V*>@,)S,p9q!gKck@L,b2[GsJFA__"pa8:RS)<'[bMak
%S,\@CFj1tfR8MXR7DO`AL1h0oo%Cp_TYGQn-#XJ5ZH-SGD.2YEjW#5pk?3d-"j7,?$eV-K/0$dT>l@9^OI"R^=%48d?A1d#-2!c?
%="uc=d:#"Kb[j.6P2g?3)^,ZsZ5i"@0TP'pM>3@<Bc@i!`V]bi]6lBIdX@Dibul%]^bq>`)<@N7UW,=,IsegC\l1Y97S;k"nMO\F
%%(oIV-Q4cC3*l<"i;"k^)9a4bP2]SuO'%]\!4%h*/M/p^Cd_NOV.HU@jt<]l%l98k\'(cUj/=]B5Z)9L:d05YYAsT-#*M%kr[PsO
%CpZ!3_AqO/GFn32>h2T@r=HL$E^^kKOV6amWXTjJ(<\!4eQU`rS?M0W7GK+kBOs`c6DKNOo.6qdHs%rRC`($2KIZ(AG(K+MCQUuN
%pQersT+@%69?LEn/s5.+GaRJ_;bhs4S"jXk>_>=<2n.B(,c"R@>H:bG9lc^h_!Sb.\YM,"]ebNcV5NQ>_RYWI2Pg@7"`3B,K`B2f
%"HNit;;%mQdlKOYSQ^dC/U4r'\2"S<!:Lq`6052B^^u[t7#4/>[>MBq9RiP$:dUjS\t_&3YAHXf(/s6?RIJcVlj_PL;fGlYQhSL2
%!M;ER?f9DA2Umg=iYsN<^jj\kO2r3Jb?t\LRCV@>CNHPGp67iP(_0o8Nq$akPe`ql+Xb1/J0nqLXMrbCa6.'fL.\5>.5%ZO2%lFR
%iHY2oIBY:r'jm?+*H(@uCOmRq/i_LL1CsPHcfp7q`\!YsCaI>_FuK*lA_\[aH5`if]Ei(8he@)aB.FbP&:TJ(+h,mX3$k2ZG[W4O
%dTgAP2SVe'U+7l&$5<(P361.\ZhJ?#[[]p4fIrWlE*`q]%!9g>^PnfG!s'$"8@J.ulcC:%KSC&[*qZ[RkheJR,r54t?#6h?3E)p_
%FT[WP;40L%j1@g_=K?Md)lH9)!Oo.X+b!K7RLqG\%,B7N[ThnZQW#^361gg^0)0p03J$[?T"=l6$+C4th8?9"B6`eb$5YK$a]^67
%RH]nZH6h6G:N7Rh.,<9SUYZP.-'q+Cfk=^`gZR2Eq:t]0<ss>gi\Ui":rS"I%nN>b)0/GB-(pY<8S*:U0HRK1!fC<o_)9lio9;)&
%!j5fkPl/WcVmY7pTkd3+m)][jj.eig1aVdU[Q-l$$s1H1OF"&K1I#GJI18c+0cAlofO(Ri-Xi/Q&tT[45t:u&c#W#n0Q9I.Y:)n[
%2_-FeX#"i:J`KRDR#:ma<[c2g^t(:TO<hnX(F8])b0(1Q+%=MaS6TL@KKk=eR(hD>J*#/]Thu91n!)g1*rq=[-^_c-7r>r/p3/Gt
%.sHQnSP`qF7_<a'UY"u(8jKsBbD]M<fd3Oi$7B]VYeR1*F4.LK9gusI#tdLiTitu=M+nr')l<Q3fZr\@*jho3^^e-AO=e_mmZhCl
%"1jSm*S<.=#/X:T\('>:mV!;dO5no?n-FWW(`qVgcAUFc-mCHK>KK^nMgNS>4H%M6#YF8)P$dKN8)kAucqoVYd;bdcpZHU]eSiFi
%^W'dfCtE'r"!GBX/@'&h=bTsjDH?OZEnCs],IOR^P1hHh+dKAkBM^liLk$YkPbfY8]+Mu:oNfF"iO+GjW9FZX>Z7lk?sbSEJAI<!
%G?\'c^h($;6_4QPnpYE0&s-"`Sc5dNJo22;7qDai-/li'LgGKg`OB7@20,gT/[5eUD6S-H2"DEj[8e^XS>C^T7f3JAIQkE9'[]:,
%3iK;8;?LF_cg<J.;2-s)jUZ*Vqs`8];)2mh'\D2`!qGKHlliJ@E&gk)2[%X54'0/gq<_F@^D7$okS@tgcR.=lhO(.Xk'Sn^qcUmh
%(a,f^fO+L]8-6ZYi>*1]d'U-[^c#rSBj6eKGIRf=oq23P.Ml&L+4_gkUeKO_QnD`[gfM<]Q3'2gQ$^^VDq5*7W?]A8-IpCLV"q:t
%6uYBZhB]db=Z*$lHUd8P`<o7qn<;TA'.F7qfQ6>^4/Ubm3b>dLHuSn&8&R@L17srZ#0mSb)cu]JX^qU8oZh(/fo-m]*X%:QW[nj`
%YQ5`care"K2?h>jk\HA?Z7^ct#'TL+"^(b[*6;nks%r=?+F+17g)<Vm_E1DAgWRf:;*^"Lif'PJQE?_Y3U<j8f<GneE>&&-c8-"o
%)E>uYd7Y[b=T+./Yb8*-6f!MOW_LabOB5pJA<lD9&/r#&e=1UPX<ebh>NfUoJ4@h*fERC.!/EGKP@1F?)R)]ZE[[nioo[9QbhZ`$
%^`HklC0JMngMID!K^Lch&"jmZgkPbOD,[/>2m.PtqX'M*=>2)!W'tf1Zq6PR$rYg?BZCVu_t3qlaL837bZ$^%3=kWpA&[7[qK>e;
%)k_5=qrE9*XT4TDag9qYTR,_:j#)Si0C^h0p+_2NgUgRNJM0gNZaV=l(s/s$)99lUMq\b*=<4-<(i.=Z%s4B1cD8P<i%\1I+qB1[
%gnW=^^Zrt>2I=-N62i`#?>BQ_7/#N7WWO\_i6Y`R8:PH[Z#X5PP&)/5+@PAaNSlL;1hsj1Ld81@KA?Pf@jrL-;k`0`Qn6.$nG)Vd
%2,iJ)LXd<Qs0peLJooHm2eLbNAT7/g)^Qg.]OO06D8ZkP)HUYf3%[.7k^:HEX#53`DV0C3P[lQ7Z:5@-'(!-:H"'oFE\tuQjk+B1
%`irlt/,m5m]S(BHO][(,!X?]b8rL)0^sWmcJa5ubM[JobJ4(ce0B#o]aYrRYZ+?ur$4*OBMCNCuY^]$par!3`!A_g6/<pSqq>&=$
%O']TUI%_6D=Alfd11;o]6fca\AX$E6,]uAP--Ts?pNi)iI.%D>T$aQBC/W7b+.H5\"RTs>k%Q=S$!-&jU3;oQ8N'X\kgTZl`.Vf8
%WMK["=QCu?R%kE;0%=u;%f)gdZpo6!=&oI@QC;,#jf3l#>uVldqU&&,2YB1TM('(LfDP@<Fa$#.?2YP4``J#1Z^.4.$L#\#ZOlFp
%>-Y;Z,$?e]bT`3?6W@[m)<P$R!HO`!3VEnNI"iU%O-pdc&FrERknpD'4nqCh<-[GlX/1kU1LE7;mmQj^Aq%n2OMd0;1i:9"?M&L^
%rars0;31.6i^Qe8_>q]dYD<#_D:/FKenqQ,4Ii-V/stC.!M(U[S6Y/Zeob-0A>Bp=En$1lo7dnqa)7U;[@Ri==X*2DdaH,GKM<m.
%.L;:7=./$;H?pn!$#HWRK]A)LZJ.`Z5))4Np%*8F+\qOsgA0Tn%t;8$^_^a"l-ifCllfPDWU.i@g/--G>HcH=js[[?'NISU.2,>c
%.9Tss*hd:JrSl3nUf+M?@M+\;&:Eb5O!>D8N=(;N+oh\H',)jkA'8<(OVGX9dY&&fpf?KWAo#qB=:btsg6,#/$=dA$;Ml(CBepc^
%k1>>!I;BR=LLR=L0"/*EC=mf"8IlV3VG%$A*bF6@ntjg-3[r?e$HM$dTn*cPMs2!u\eAZb/<GMoK$#8lo`S1EQ#1<#.:gqq,bD8<
%2d!`k.MP!Q4:J%_XI(N<ZjB?1/3U1!r+!ucXTk4+9W9JVON1Q5`ZA0L=SG.(q+U.?/Y^[tThnJ>+&t!)+!OmSI;*',]-"JM9AI7=
%D<]";*`!^OC]n3O;>Wqd4`$\32R'<Rb_oarUs9l578]dM@0>-h#<j&WWe.m3DnXN&)tZJ9H>7Gg%l#]c7P7luG,]BD?H&.h,Kkm%
%`s]?pIV\?bUr9rhjb)%N-8^$pqJD9F83Yd=j;BgT//uJ[,pETuq+#G,?K1g7H+quJk''[2@d;,db>VhBXM0:gBDj#n^>j7X&/H+o
%9J#%pZSDnVdEE:siD8n07d2(3%l;C9C!N,#%eMKI>hSu3/YS/E_7Vi54r4)B-_!7KJT,;r;:4+fkdSmA]CWSXf5loNDr#elOVc(t
%E5V?6/0Wn'7;1uYAtr`L#8q>Xit7&oPrt]NjW"oK#Ea$I^KRV^71]o2JjG\GV>/)dJ#p0f)=gA-&r8on8J0UUek&jUAq%jlff#".
%d<9c/lgknOW`lHK+QK:p:Zu'RYY/U@4h+L)r1m:Yc'NOG%4_YaRpciFD^r%>[.R]$*I\SbR0'IGYZ?Wgh-0kgS8(UR$Bb0GD(?aT
%iQJ]Z[O`WRqT:"f&!VZW1$!p3Xh(W=MX,F*("ibjHI\2(T-/QQ[;D6d+8pYLk!EQaNp12W8/i_Ro\am[JaB_qX!2G8D59ENLaHr\
%"e!T3DSICMB!e`QR7.Sg\7I`_<.m<%H=Ip$%FH]V[Pe1.<nhXRW<aPu@taWMfoF1;1fs,`c+[MYjJ:)aW`Pr,kJ7tb2A=?]F9HD;
%GQ6a&e$Y:D>St)QWp!2#\R'?cHXArrrOMmY]:eC-%R._F?37?a\2b5YQ"[Vc-)!sFMic'/cGbt=!9j7+7TcQ&[0BAOF`1-?:?d^f
%E[X.7r+!uca=&;;IkaL+7o'6_@(eGh98951G\$BsQ,Lp2B#3it(M]^;BkBt29<`SM$ro'A7=^b5gg6ImgN&ek)e8G-XjD+SE\0qh
%,pXs.+Z;W\nc;37+t_SaYaPs^Q"0i[l7%HA3D4t[RC1HW_**Q;2pjbO,2f#J`!):8AEY^V8ING<!YLU&D&;B@&!4UqT&TqX-dQf$
%bQko?Do#n06-#X;.[oHYWg=Y\I7TY43W]1E7gfJ=&Z/$GeTW&>8`C>PhO7Xk';eFC,U-u-16\.HZ[Jc7*hH?m?Wd)q]rNd'.NH(/
%(^7VL\eTU)**\b:F*.kfU%6Lr":AsVl#p$lQEsTV(2k+KpP65_>mu^CR??M3[ObE6+:3)lJC&^4#D17!RYliproj+%I.7#So@gg,
%mm6f8`Q5g%aVXLY`@]!-"$QEMEo&,CfopiQSCTcoC_Q79."T^f'rj96T`F6]f3bJFO[\DtB7I".%3a,)bg%pD5*^%UXOgnCVsJ;"
%AS?$\qUNeZ+=%UU&>qX.Mic"._M.^$+i@(!A<5j.g*_CZCs@L06Gt4_=cTnrWa/SWa\)Qfh(Fs(%K9n^M3N9qKtY"KZ`[QNn'e/<
%WuDd\DS707L:(Q0[(tp,oO*ee__Ml!2iMq3C>Yg!2c#!>A^1A+)H_:J`WqR^_c-Zof`$9F!CV9.=#nGr;m&9^VDS/p^X8q79I@pN
%491O(8"%2\DS*JS=tn$k!n3<o"!#\jFA,DhBjWTu7GDERK`\YKc,0SFa.A`\E$8pZBI0o^&]9rbEC>GTg!%g,;B@bKP"cWH<:)`U
%[N+R>/21OMI<Jt2V-f91)2;ClkjAR9A!T2P^3'0lF4km?mR[kTh0IFl%2l*R>7TAl6C&5ik,./,*1`#r]r70IQPnN])R71kfq\<Z
%RRLC#NAtfLAQ&^p&!-]d1R\&`B!?NI!$%.I%-rUIWkmMDI.-#iX(cnHZ:KV>BuEN[+PDuE,Fu2&$Yi&M1kscN0Hj:8`\?B)eoS[s
%S_:-nR3ZBOgX.R+'Jl8c<]n&3(HRcJS,@dWTpY)Ab+oF4+PmQ*Ksa6\ULVnUrKW#mh6AEgOC(!^CSB$OjbsV:(R&gBq)-c&PK$n&
%c@4ru#FF>nAGg5'6.li?M\[0f"sqMp/mRhZK6:15lKH@Am8^>JfgRM9mnXM)CqH>q5u5nGZ94HSg%F%E0$I&</"*,]%B/FKWGGY!
%e_p>&9l#DsAI%\/X`K]\&$"+^i+Z%64^lA`<g,62Is^([8Bc%\PJe%b:J+isd?*\t[kA)dP&E1blf$Z`1LL?bl8=o2APZAkHMtD-
%ls4T+=;qt0iYK=mlc@nbWc(>A;?U@nh-7<R6mf\_]rL%J?SZiVb't*O3+fnT9V^B3rl[0Mpu08KJ#E[5eB]RUlNKbbTBroETQk7L
%XmR&I6$g(D*-71[&(_C#N<LMAmDXMaK8%+*BaU+4qBXlKR3,6TH)]`.(#MDBcm!f[2ZVM^R"Hq_,YN!lKM47WQ8//?VK^Wjr2ipJ
%Xe$&]8gZ5%o5MUk'bA?HS\m7%mF=?B\)j$%%W[i.X_7/03/4k]r@mEk_sBQ%F6DZ-#I!#[C@FKh_oq=5QnfTA3%_W@\3Hf*NoF/g
%>o&7c*HHNoP\[RCn!O*7P?JL+DED9ro*j0sh*&BB@LkSYfS+IuX=K'3LiDH0a^qTjDE*7.DNWht%+^;1'")d%KCW`WA,*X1Mp8Ru
%Up<)c(W@3@GOgXI3_:eCrV$&0G<Qi7IhuLA@oY`++UIsU$bgcE8%Jso:^8quPs:'>+An$;Z:LMBI+b[JAG(tU/\-':THF7@DO5)@
%@l-GJ^\7.-2-V)V7BD`$5EWPTA1Q'UVtD`PN^8u"OWj99=Iimaj!o43K]=1o+e<,;.k+0.`0L+BY`F^S[hrosA3(/f!mOkcAnIG6
%I\IGF$jN1ie,sNF,e&IEg@KK.+T(+,-ip;AYcO3(3CZnSb9G&@3]1$'YlPG2%?n!Vo>BF=e`Z`"L4+bd(%SXlqM9p%#INtI$#SVD
%9b#Mi?bUXY*B4HF<iRr0,h9T>_JEf?7[gia+0%-mbqf+'p^UT]+e2udHC/gh<Oa[XG,7;*Co0BaIims[i8G&oHc+VOk"P;@[K'h2
%,`?+i(H/"CBhR3'nT5rC#&8DZeJ%[M0GUn2n]R3A`E4)BbmjRB+Jig@Z(^cngnBj5@"!@GDkCB\kAt^pH_BfGX<b_):gdeF0H9%s
%R-8D[i!\fW"\s_Q`F.0r<?u+<*)ocjMK>XKO!J`#\iiWlS;RRB"-67X:m2WNXOpmZFV[T8j?jP(/'R!napal:L_hT\[+-TrD["S>
%q'==0E?Tk]p+E4o8mA5eeG"(V?o8uN6tmI=rl<KG?OF?*A]?UlmnSWWfegAJAt1#KE3Vd4/`\-%k2t6kHO+q$,XNpe0]OYkqSG@5
%D_8T?LnbOm'q$X'R5W)W5:1L8nZUg/di4<:+W`QZ*CRq]WSDjl_=;`c0Dmir(2EWgZX!^t$7ehB=>P21D"kMDRU&0Aq<pE[C9mMG
%>rQLE.jLQ\G*$lAAKThIS-V@Vfm-%gDJf2"N\a)2ZZ^OcjWo4p`SuBpW:_J7/i@Ii_WCt%\duue8FFG:,G'@iiGoplLIa[o"p@ZN
%[g-=kdAkl5i[eN-Gkt26m![84j=7ogjpSX_F_2W^J^Ua_(Kh>lm]Oi#.I,=4*TO6?<1/1,1ThPdi3Bb`Tu)E*;G7#.ROJig9SqdR
%e2VgB_&mDi6RINkGDpCg*]:i6]Yg)(?a<kX&[gPJ%uK'nnoBVV.@EUcdCC9JD'Lkr154JO%urKS>&:cpf9pOs254CIlX%hQZBr_r
%Yo$!P5!*)f6s8@VgQu;lh`EhTZ3o-*W5fd8f5ee0O=+PXN6t70W2]H"SmNcBc?9uh3%H^ePUiO&AjlD&`&=ub*q7I=07A:n=G3<Q
%?.tGjfU+DJd>rHWrghH;>9lja'(8)+(tq`a-04_sNAta@$W<VB0cac][aGmhg]Ept>C>3mnT;)2S+'!_@Bd&cVJ7?0f]2m9Gfl"8
%Alo7O_U73/A4Qq5$,OW?g\$"-e5fL.0BC@5jkB@]Ll;)VAY3=PjE'G;mfL[FKdYhP5cKc/5G:haadaB&@X0Es)mEnM)aW%LSOI3q
%j;$H;A:a1J<RU4'G/m@&e04bOn`_-1P%+6'QH2oj1<K>D'THX`[kRDPQ3?@NC8;=mCb8`GT!C5l;$Pc7<=l4PN=+pt)4#$%Omk"^
%V8mg-$Xt(iDY]hG0?FpYk.uDc<]5N1@.YPoO%E3;#;\141j:*T!U1BZ#`88TS#8$%^f-I:Q%1b=!tO\se>&@,BgBsAC`9`l$4OD/
%!8!kK#X8JK$*3<!*h7+Rq;CqXD:doFE9UkVog)Gdc#)7'BhLRAdKcncccqU=J22^`"uUEF44bA$/PsD'84Z*h9.c`XV'A/tonDt2
%>j[q'3%o"oPlGE-Wn\X!dL2gjke:;saVoWq7+.hOI`B9nc%5-CS2U$[aCYiIq[f6;6?n@.+9%dq\<G[s.^Q7c3mMAV#m8"81Rb-h
%4acG:(OgjKhmM;CS^6k:8SJ_S18@_b-$<IB;5?NfM*]?8*R-(/m^h!0E/nN[jKY7g?0e.)%XqD_#HZQ(?4"2])iM^O:]F8_)Cp]U
%dtYHl-jBgLaHjDoQ^Ka@k?ocMb9#`.j(-+9>fZ,4GUoVkJlmHe]!O##2[['EP=og!MepcFX8;>$,4aOF1oWp#rK7dVc<k@uA6=Ej
%a"Q<!$tjRcco`/\ElBatB=Pe]f+CX4"OOjI\=5<YYXLm%:)2,,N5h3.,cO`o9fb*l.*X/#hU90%)8t6L0dFq%Y'fa8mCY?e@k6tP
%e.%7(l&lZGYEDtrR40$l1>N8'hhrXOI9)MYM9HD#Zab=F>8SbDWa2j<F&#&uFPof"XhGE\M<)PM:8f)cGd=Z.?u]hg80)K;%qji\
%)fNmre?W=s:h!tf*VONk'lP&EDkbu[Ao?7<Wg\rYR/PKL0)PRX-_K+DNVD(VJc;TH<sCHQ.H^I.G(nHrT_i;#EM\8'[0/p^EYcXu
%=*#cWZlI*mJ9RjP"Y*.c-U;B&W%YT$/pVj:LRP$;jrqa-K_@Nhc?KrPN.b?0<E0)\a.]Th<0M][4tu"ZK"*6seVP=!QR4IG'M@P*
%];E#UCkt"adQ+l>H8C'#9%h'q^$ETCDW>3:NcKt_?l6+3#9$:;Q(a1Y+^1l]]adTaeb1tW?G`s9.c:WscYDmK_;'I4e4&p9,n#t\
%Z.1Kc/P8LSBuPrK>;\E"NdU?lr=KW(q.,qLrn:+KPLM>YNEM3M&lsSta?Ms3Yo^B`4lb?0)._Gib+:,>_T2b"32,t%UQnDC"NQJc
%X;jdVaNXc><0MH5DnEnkgL%"ij(U2:8sLkIbtWIa1he'2^"fWW1m+UDNug$l<Y`E]WLD_Mi@O:R:MK&0O5AddJO,_t>rqNTT\G_O
%`,QD@^@C9:e";PB]uRjF'3AW^+XI3RMrlhh-KYb!MERuR/$YBU[RTO0[ZWC%!4h68\XC&8r29rU3-R*g!kii>VT4IAYSf"td2$+Y
%WEqu<P=shJVCbI-!%8sFp#>SMqo%[j<J%oG</!/)LRq?@X]-RMG.j>\DR+j1[_+9e_BBLG1kMXN@%`%P.n'u^44S$hq6ipXqln4>
%OmX_M#G[kGDP3\Ds0!W7U3P5"DAFH@b[RF3<'i#SHoDeP2/PmA"1EW@oUuMo9U+[&@RXe/m#<M;]RE)C!U,s-\]V!dS+O_=/^f'-
%p)oL;W>/Rc3kS4,+%TV)jWY8[4M0(4<[\rM/!\B"3aU+@<:,8h8@dq$U8$S_aUBC5J=B]M19_"P)'kpd.B&c>LKBVITr$">3:$:J
%8kV)ja7Wj[q;a0(hM]"kAm$Brb!SN1#m%J9h"LPDB0NfpHB4dkW7EjRLIb$rq>_`=&CAMbXFgj96cu^7WFClsOWl+Q!5[MRi4iY&
%J]\g""9bGN-ANj%2d3PT[c*L,J#K=RmlXT+$R03\9?oh_j1;Md9@STV#:r:>JY$95e#9Q<1a==>3)'jfkYN$5>kQ9(jF"/#([%cK
%Gq.a2)s_`*9?AFi9RsmX$+a)1,f*12/#IedE"=;>+^GVV[$tUhVB3,&R3>ej,VC(0C^GYRkV$r\!BG.dAfuBXm@[&<[RN9t(@Fc6
%EiK"-$*VmU5-aYupRZd%q&MeEo>mmA97<tD77P"rd_r^jQjSR2SJp?(Irq3GmN4=!;Fr!i.h+rb-lj41[^!\"H)V'79d6#llEDji
%=.S<9f&[ZHBY&uK'p?uVgmHK/$F9)AC*-\B5j_6Y)4dD0+q+H)Je&/;*"3XfopC6+g5=C`n3,jc`pH-Vl]a(6+B)`LaH0Q;\Tjl-
%?i'>ie">BA]gkMep!UO>=2\1NPYp$l#D@p`h[m8d&m#8?VXZdq)#^GFDP)h!dD]:J0_]R6h,qSSAZN,*j-?NlW#:Sh\Ma(FPV2mU
%k+'H*0hW\%#l+T4h!E@VU(tX:aXM#*i-JgCh4ZI&XM%Y_+aKtW!'sYA`[J5R5YQiE9h4'+;M9/U1_T+Vh.bUlnT,)`&BUs-p.PSW
%"MoV*&A^YQ$Z`>c<nm=s/qo<8T!X9G?pJ"<V/K$QgD`Kb)Dnn3AC,T\mip$89l3`-_'6M9XXbL+I^f+S,YY+(@*HEDHo?ioFuIfP
%D5S%D[^0cqVGee6Kk;atSqd3lac\;O?gZ;R)3;CNEJkmp],G8Rl,M&,&AT/E-DEl'*Fkc=@nUko*nI0a!d>/iZX^VF'-ZRF13(Cj
%<N8,(^f/k<Ufm*cV5WJ/Tq4T\)89\th`Z?G',1%TdE2_X=ZmZ\3OoGL03n>2p#fqppS]5Z\M5UBfU&8u/&knKCahC!.&^[>g+N*L
%7U!8M10^'@;F<:M*8ik/$fk(#8X&N1+KAEoQuh+,6f6qQ5Lcc(Y2i&M<:l$2k7GL@L_O*+O_$0XP@Bb(de+736lW`/1:%t1+u3#"
%(`MIs"GL]%;/`3j?2*.VHncEqK9<Z:_3rP%-=qr52J.9;E`NmL2h[(EJpW3Y1h]E[>)ugMPp`f\6K0f:6!<j^>:hX\\g44s3slIT
%^PDo*EZC!0X\ibZ"Ac:I<Y;Vr[U!/]gkLG,9r$6bn&bm=ha(Bq3BO6I/\o>\=.!jc4c/jkp`7X6C(_XSoEq=b`HAdu1saU)a*2A9
%Rc7Njp#BG\:i=eW2o;uV&793t236u;SQV:g=\8>Zc9^T`:;Pb.d6')1n"?N$4UDVT-<DAT=?K]cE*X;r;:p\B;M;UA>fU^X@:Ll#
%hD416GMd`6o4tLVmQC:dj["kL&C.XJ[@r=P'kBS;`JO*:7;#V?WUI])\dR'r\Oh$\!Z[E9jIXo:pnNQ<F&n2J2FO>cpYCl@s%r;$
%lf2+?7M2*%UD.g-3T`*G<ljJ2>9fT90ttIelspQp:EWn<]2'BG[)SqO3h[cIo>fUn"WlaKlt:It'Vj;'';pccI+2;Zn[#rInbg\=
%H5p<R$Lj3S7@VI]b?.n*LDLlB\7JBJ"^#9,=4JK*6i>0gDYK&4a^X0X0aju]FRUU8U?$hg3roX&jLODVdE12-XZ%=AIs7jPZsWcL
%gGD!r;ML,hV62-Fp.S1W`)<a^9?Ah!3"LC*90'*KFP8XN.Q65+0'=de/u?ck5ALKIAff"S--(*/MRONCiHs;,9Q$.=Q;S1Zj<rml
%TB*m=ofY`T8DM]s0[P7!,am,**lU:MBN;G_Cf8=XY^*MiotbX??ZkOQo@81%#RP%bph=?JPbZW9Bdl9j,c"t5=qcf"D<.&)^s<N^
%CE5;=bXY8.Gh1"9#"99XCB-=V'4^]hJ1jr:4Zr[19iqN`-_ASE<@B$-KF".RGaS:U4;Q>qUr*>:r+7L2&hn=8JC[l^+G-%\B-)^^
%"cj([CnF_:MqS9AZ3'o]$.2L`&j&N<,bgu@C)An:/M^MiDH;e]mQj$45.cpBT"Ms%XCfDiQuAGS`cB7uW3R`h[6hLYlj)knPH-KU
%jL/*!'/3#hV)U*5%r`H1`0"Y;3coh_ETVo2mgb:Yh/kbC?B/P(d4D[N^ITZa%t7)BMen\#[TTN#=G%P*hkAJ'R*0+;,&9L)8Rnmd
%o;(;q]@P-tFNrBLOC#q.0$_BQ>cZPT7[O?_AW8qq_hUTC,Rfa[#(ru5#<T9U;,kU-GRO<rK\7c=b9uOfMX]RQDUm=gdLV@bm`bDH
%og"HNMo7?6^W="jODrP4BkW),N<-Vt(q%N:\-<*,C6q`mV's=Pi)h%aM)B=0@Fh#529j+JlLF*\C21UIB@S7OLD-a-Lmo4S9j8Lm
%XZ_"^8_agu2lNcZ,_B#9bD"U7oXk=pH=!#9M1\sL&T/:WDg0c1>ZZhr-O#L9'qQ/b:21X('9`OZI;&>eJnPkT-GZ5e'+:9Eg?4'K
%0nh"lmp:T2A/nue_+3.dCk!bY0RS,ojslk&MJd4#eTdHaG/"Xt<G)"X9j_'VRsb%[l1_IYNfEi'kisL3JpHOHi$rcVo[Qpp;Q7+`
%?FXK_D:8MLHpoL%do%J=PrXR3$O]8Qm-^UQ`KH]QWA/+p98dL5:FEHr3bO@Z>8Gd<1EA9tLURkJD<K!b,`68UDkR%e!6%%^V%H$,
%0FJ[!<P5;I:U<q?Vkqf8Vq2p_q/q0N[?9bCUVq/r!%\EWOXs'D-#8%E+s""IAE"a9&,Li$>F)MH!fiD"OG+[XjiSb-OdB40#H@7i
%!naFUBCM-l^r+&Se7=8W*g9%6@&b9A&%@)d:Ar2V:MDoCJ4C%feO=.EJFkNH!$[.CNo:?8+A.f-@+K0f9en"[1f(SH3#5%EG"o>0
%NHQ1=&VR:=L4G7CM]o%Oj*((cWi*4(IH;_WK6W1iZ3$_>E!ti*?TX3l%QgF<(+t6'=D'f/#u:bKd*N+(^cVMEMl8h/dUru,o(1VK
%pZ$nLn"NbUZSljn$'L(k,+3]-dnEi&-&-3VO&4SJ!ML*Ajs0s+c7Q>KZhM)77)_%Hn4!,:S!ZW^nr"Hn=Fs)FbLp17$HN6<mVkc>
%AmB5]7XHt3Dp,&[qh/gd5TIHa0tI`NBmU$U\Iho\"]?o3fSm6hBt95dCqb<(d=G@l[@^6=$5K,7/74hlG]r,h#H'eorT`hP8aYH1
%-%r1)3F@O:F`?SCRcG=Uas\8NL.QlF^2l>i+579j`M=-g*.<hKU,88t?gQ7g#EBl/R1W#F+K;oMHMI:%O#<PPYU$L!-StO.=q+@P
%PM@S1[$B-W.g.*Uo1%8Q%;/+&!-XO*(\qm0e-;6T'nBg/BN%G+\$H2^6bCC14e=IA/ki"RB=g\a"BQoZ^&`N0YjHL0)PDBpIWd(F
%4)?5-.k?KN]5GZJ`A^T1"JDuB($T."YW8NhW*cJ.5a[8"NZG%.>jS,VbYo>)YJP42F`^S^N.(0<#IiU8BmkiMQ>_?.p9Ra[VglEc
%+ko<gKjsVrWHaPD0p7#LSZ.DGC#9rn`)U69Q!,'S#]h6Sn>)]"W+%QnUYNP!0#VeY>E%:Pf7T.kfSTsN1=r+G5(%0,0j=hehm40?
%KWTM2+j<:JI7?SikS0iDo-bTb7.4R('5uCNWfNbKr457fgOQsBkS1YJ8]l$$3O_riX99e$F&&,q-JO<+7=k[/C:ti^M+dMa.qBI+
%0:%n1p<P7N22`q\L_DVb5T_*ITdD>MZWO5'IHfS6dp`t:DO>QM.9'ioq'tW>!r`DdLb]7i<]t[$K9:5ROuGeuGpu0YiPf<qDVoPm
%$Xt:cfkER]MS:6T;>(T88Xp&rD<q69Kk]-0>dH]9<V5WOGUdR"U^J'6raf;HNBLU]"Cis3Pa#XB0q@Z<0aI@Y1Z9-3%XcJ__7'&_
%>"h&la_rHsU\k[+T5T,Qdd-YJ7:p=m^C4bLBTu8Bqe6felZ+L9!.gT&N+7V;bLp5Wf2hd!asCphRtd[W#Zg&+9687Bi<)E$WJ7"5
%O/c]%gNJSXPb^YOpPjUsV.[L<"KStlbg*hpn$kS*>Vl?N'PqJ'Js.WnW8#X7fN;9M"J_$?qi*h>]8*-TnaL4?OM^/J,P@H&V(Z2c
%rOGYTHb`SW^hc>Xo*Xk2fB@A(S1&05l7VW2G%;o?Sm%m%mBAl`4]q%9E(PH_/]a/i/[_4\>]4^8Eh6da62IJ!VgkXJ%IYj)@u,X.
%l,6S7nm^KYq'Bg0Ci!9c4<')*EE31UA&`Ob:,lQ_b^S"GVirPgQHb%/+JcQ:,C[*?$hf/XSXJZM+=2j(VkB7"&94O`=#/Ih-^/?.
%4(>p7>-:hN^nCc[.]/TRY)mu>Usr!ni2l'%l8(gQn3n"22!c"$b.(-rB=7EdFp?.-^U#jHZPE$MPPO_;hW<U\%pm$*KoIN(3T"ZS
%D]=\abc0L<pWm3piL1[gBf3Yp-?caqMk(:I,?5Yg-jODZ,gTDtXYtG4Ge%;0O=)saHMG#'M1n_q'+D95MMJc[?##6FEeG?C4FIZ!
%0gTWI*<>1;e1!bIj3YuE.Z5DSNjmX]"*^6p6,OKcmV_Q`R;oW9*;A7,oIe!"RoBiml.P(dM>I*[JP@P</b'27+d+$G/#oIqW#T+>
%QDm:b3m$MT>QrstZ4):Q@M.Q$_HuMk^@Lb(2(o]!gpuGG,pj<qjIGAlS("HZr"9(29U(A=T\EFt]RR8`^`'$p@AZpbld<e8.QIml
%9?p[b42T`sb)d;?g48JBBS2Um2o$%O-/VXP&o#IrI^Mh4n27_9a_8sOZl5q[;,(FbCbkCLK*5^mcX8K[dE0>P>t2,HE:-U[G?.Mg
%2mLh@lYd,oOQCe#pP@8@]c/%UIQJq9cXkdRWSFl$8hJqf7AGsNI@=qi6*(Z)U&*2]*Wj#eRqG=,[.du^P[;t`iK1r5h3o9*B3=T>
%4\n:i:D%VaJPtPG834kY6].#JQIE$)?L<D]W8!F,$Yb?!4J69o@4;W"OO\2&+SY7%Q9D6bI2CYlW;F6<9#d")#fZ4=[C:KY^@_5B
%Ze>5sD.'juc&n,-_;8$7DBqt10FtDjB:rDGNWr^"r0=Q-N,`G<M^UM5A:gCW^M7%@/49QaVkPZef:MuHVDE$=a>?^+l,KjoJ6`W%
%_RB#&"NQ5\(`OS0_0XD^C1aTgB]c82*c9;a96-t6Qo?S1E+>FrDC6fGk-7"FQ-%+5>NRmf\/!FuDOIBd&?1*cC%*LF(l*DZ,\kXf
%Sk)`[9UfcKl8H`%Tnc]f3JU!)VHA9,0lss&.'*U,d5dL3=rB')VhD&gbaHR/HAsQ:?80tm:VLrHh/ikrdo7ClB36j!U'?Im4Lch=
%M[0<P2>fOQ8b<'^<dr_6FJk#ER$9j59VE$M1m&1gZaf1-<sL"A[Lu8oFE;V@ZLCdNC.c@/VAod#BQeHej`1L#[Aeo8Q/%%CcIB'M
%XZ7']X*&]Tm1hI@n3J^V&Fo>X2WT^FD)(MWMUt&,m`ajG>jm5r-Vli?bWfY-R4ZGf.aeWWhL^MS;o378l&Q82Q699snplK%!LobQ
%##A=_Kj-8cOd'AMn;"XV)'PF'j0SdJ1dt`N@mt].YSJW=YfY#::C(EY'T:Rk=iDc'ff?;/;?U,Hn!lMEoc-'_:5CTC9#C$rGnIG-
%3+?E9]7beU(iW->Xg)U#YHk;Z"/,l&+YorCVY)^BQXNX6L<<ri/\kE.D\>GAo;ok@/_4YNrF2Pa/$>@5XUffhQ/U8"R#Tp."WdKJ
%X2A0uB2gj@kPm$W_'2AY&Z*BTH-3L+^R4::'eJV2CuY4`@/5fB?ae<EWXEH6r<<PF!fBN3,L.08VI+OG$R//)UBQ5>;<QeaSP;@)
%@"*"MK#S6SSC=ns94T_]=NR$]dLilHn.AHA*#t44XOLaIp-D2?QT4bUo,t'\rh)>`n-`:VR3aZiC2#\sHY5=QE*'iP8njeIfEmti
%,gRPRKd4dC+FArgP%GB>=\J@6HAPt9Xg!>K7%X.uI.7#S414guf7T9+1-e0CYO#!c2SGYV\9KA;n3Z(a_8bD(-;PZ1p&n@C,I&7Y
%;Rd9a7&:3qp+=WQ&l6Fj-F\Gbci-`S+;CHG?5[2DfV_"?Rc9:(RBE5RrZDM$WlP6dYZ8.p,Qf^_oRP=dWaY\NbT8"2\7+!tf'V3,
%HDUDabTo4]U""7?J@WI.fJfpCfB-+^>t_))*QinK,ts:M/cLFV`-4gPC:_X3&YGi!W3?nERi$+sP%;Bhq3A(Z/oB@O8r/!LUd)/3
%`?KRj?@?mT\b5&WYMX3INaJaeQqu^"b1S1cXEJ)cUZACu"'2QUH$(q?5s_kaY""gBq27a(gJ@2-=H"Xa^`fB<T4UU^R%UbALVK3F
%O*m_2j3np1-ZhX!!fktV_+oup+[#q!!;D^fO8i;[UnQPR]':SC2:.!#1'RFXjo+])a(tP#=mjV6nF-Pkm8VfaZ]iXE"K%/`NH`Zq
%nG@9jg:Mn)$1D3OThRQ28+KKnndf85OiU6d6siimL`[0UIb;St"4GkdS@rN2Z?PVaf$'S"^aTt%Jf6F"0s<_<6VV?]M0"E+^r/@)
%2g2tcm!`H@,M&%?.)hZeWXA<L%rOHS$f<L-As7%7SBa,4k<qMl/@HS3SSmm?_q"/,/600rg=0o\eMpe(7'XZg!uE6-@A"YD"eQ\!
%Sh^hA#:#.0RGe5MSkNFK`G-3b[Q[2oaW\GMV&Fjq\>:J,0no5g3l6Qt5@qj@X8-dLmc:1c@#:eam>WV<S:7qK"3,n$HR(>dJKrlZ
%NB2"%o[Oe)3KOVKpXiubA:`k_co.7aPIrQCa3f>CSrlH^q!P[DM`ZRh&^N'4^u13q@``ct?u=ZL4"D7*\F*-qglm/U5U64WDJ-or
%!9OE&nju@se,?7`^Z2K5l\8I!Baa(_c@_s7qoam3N<&_spEXRqU9nj1/u`3`h%!_ZAf^WkI.7#3e(T,/j<]*%]\Q*R@pLJLrSU6r
%].T&D<7ItnX;/ojYKGo7^l`d@"!^<E.b")-CKka-[C!MgeA[qM&'t5WP8^A'ViFse]q0UMK+*JmdL1uO-*Rf?:]L\p<"<`,3J:lh
%31kI#W1+LqW*.6sa%E@B_R/AR^kec[D1V';s3ZU9qAT/@d8"aYo5ZG4;Q?;A8_o04@PjJlfd=L`aB]CL,O?_Umb3J<`]9B[V3kN7
%kH*UKWnGGW=bGRN;66>63K'jD0lT>MD=QpjY]AR0nYN_`jt`#4Nns[,D-Z./42-t\ENaBPbnO%6a^:_=/K:`0_khYPn3$kM]JO7k
%"7g%X!F<I\d>b^Whtc6-:VUj/q(5NH2ul'4r_g&bA=[`oL<A'kbYq!8KP_gXM,Q$A&4/VVNlS<4?4F2qc)E)^\TN$!:e_';Tg5ea
%nfQn<3&Q0L2o[41esY*[-Qdd9h"L(t$Bb+h>T.jQ_VR-U028+EJDqha,t='Fc;59#*?Bm)8m-0#l9S6uRKcbN/AUVH4U^9RgcM.P
%FYB?c_.GG*+*`*<N/QJQf+uq_K_]6Biq@atF"h*N+YV-qoouaq<T_l?G(S%;DH&IH':`h]auD=?`8MUC^<L`NeoY+jL6FVl&Ac2k
%8o:16b$*2G`+3UHb5.J8=M8RiC%;_<ci/=c'd;LT<ii/,Cn`XiLh2u6Dj>39oR1c'6CiJV4?Q4LLi3'[,9M>_5GKqOiYmAsE^5a^
%En;9%c.((7AdbKNX9.MfJDa.c*2gM'o3U,K4n%a_=a,cAEKDP\JZeBp;fIVVCeZ#K29f-FP,o,o+6_@;EA:8S>BK5=ceF*O;^;AO
%"?6;?LF%H(@Mg?IZjUA&$k(mm-nZF*d]b"Yn$_OO3ZEfAA*s=2da<G)UArl:O.Li9?>K",ZD?1h*I)I^SZIbmo;BZDH((T?HCS(_
%l8?hqWBInTN=ni"g]RFe8O9$AM6()EFf)%7bJV4^e?i6fHegk5XVGhFl7Jo<1MruSL]U*Y;(H_.&HsV_*GJ"jk2XrO(fE\F0akEK
%6j5-PGb7_9Ecq>nSU=Ppqm5c"Db5[%g/tLED_JpTd9&\Qc\duCgkIrBYc2Cb%L9*&J;s03.?Y_n4/_$EBJ4(_iKL4u`N58`8'%&q
%/If*g-'"_?QIE%O0W>ODA-k)C7"bQU2nj\(p%r-#&RE-]:Xo]-_E:Dl2eFs?,1APgSK^o"heFC]BOH`*[gnN=iC$1R(>*e/8-RDF
%)1u<0n:f>!$GA7[f#G7aWDDYSe@.0kGCS9u&W!AC`)JEIl?R,=DSNkcS3#a]m*np]ETgr&oEbAZOaLk]`?/D4oX9Xq6tshWg6Ku2
%O9U.IPQ?JD[InlR5.LR%8aTg+QE\(^8hP=P">AB7!U>Tghb[k$;236#_%;)`R=m*9YQ86b9#&bs?koSMMbjl28LT9b1mYeIF='Vo
%mN;D$Ai*Om'):5dR9!S>[>Js3Vcd#a#cQa((W$nD;;#QCZ"BPU=]C[)(GDd@_`"?lej276EZ7]AX:'\cHZ8W)gKXj-![@GLe`K[i
%/XLQ;*L>2MV;2jAj^N:b3&I,8ld<`LWoB)H<Ht(+6Dp08LV0)u[,XFb&4b^/=^'K(km$V;oALF;*9"8jI4<!KGE.(?q&NKO^J5YS
%]^TSMIUL-k.ZqTLhTFIf>aU?aK<;Dc%%VN2_%OCaP8g/m[g]]OQb2D>3mfhbqK#SShr*I]qMd1u-k-j2A9$'@O-'fDM.r]$UtbH>
%k%o/:Zt%3EW@*N`(M>)Z^Z-o8ccp8BQFGkCRO^+tN&A47o"1hHX]1GJ`nm6s-hNmg)oKoUW.T*UbQkmI2l"&V@8lVWpJ\?CLB<aK
%;$)^1IUFHJYT%[RNFctN&4nHu?nS2K*X5aU?*Lna$G.F/`o%DMTm'tR)3q;U`u^lPZ">l!:CVfo$oJBZ'?Sd"1VH_c[/aE@hB(N6
%p0eY6"Qri?7?\n.fpo*r\3"#jb7g,Rj`Pi[41>Bm4j8=Q+q:H0<ilk6r#FFf;IKo)l8>o@ObqNG[cpUNU=p+fAW&n1*HflC']dMD
%Ji`+ZW%Eb4g$R4#fB,NZ6tA>m[\C=SBL]E![-\>Y_s?-@MJZdnl57\_\@:=BE;\PA#6$8f:?VbDO[ct4/;MnpQ#J0DP)s[n?)SM=
%a,UdDW`1b34GGc@UlS049iT!i0US*6>Ju8%1>jCtQSFXIc#.F@@B1lIL"J`_AL6'+J[DDf6flPGMG>1[XliAZB-q_qWn6J8`I>N*
%nNM^?5rYuPr(UEi1bLt`/3gN'8]`KiIq+=P#L#u]*K7@@T!,^U>D?crX2)&kgq!BWKq=b:hk^kk?qV9p[GCmbEE*;^h3U##^k]O(
%E@b-fG:\ecM'G.i[B_hcT,_Dg4UJYiYhK]lSil+odjciI0eL*4n..A]U<H=dE%GYBCipL+XrP&(=C'_(/^!V"'5VjO#>4R=1$Os/
%:>[H9EL^BTC:,"M]hhEBK.Sa3</3/-MTScV.![,!K?\OhF33#o)#4/iQG?hQi_n=_clM49gC_ZgA-JiSJdLq1XnElpBE.?YcrQ47
%,T$<(l8#tGV<S]&Q+af4oPfNYO(l%\Vk6L23\;.L40I--SKhKfr-%KQCJLS=?tYII1^MUne?s*nD.X`1eMukP9;OmW#OLQ,9S[b^
%r8+`[bAFL<WKe*Pc85MZV_i?MX;X2f!%'&iKqMi(7hVH8rdaQ^<FM'a#duq>77/mXo#_VFO9YBOed([k)C:M+OCJICD7#2YL%qMg
%OTs%$C+(oQ2>_j%gA_u>e&K93KV7@Oe<!EW,WF"rnG>!t>(.9MUd=]0:>V'Gfa_U&0H2^gg.8u/39L:E6#*4udRY3NYdHg._#^tr
%09?:O"s%*F<M1jnTA`\*nhfKl??u=$RaLWM=`U$oWX)&+!R+&DG7QJMYre$?&96pW[beOW7lb3qN5;$l^P,Y.f'UT@C%-e['>.(E
%[/mjXQd*t?e-.i:m,@NljP2:@aJ3H1Q&Z(5cbd,KV_shV.)PA.$DS_/j&e;mSZ%Uc@X-<q%+&@LPF;rHj4+HkU+L.IJBA1][<s(D
%-c+A$M](Y<CH)e=F0q4@lFetqr-g`4iQn(I<P7g@BH(TjXK3YAc0DW5h&Sc[aY=[-TC-h9EBjCO/PsqSUXG%.8MO\]<8G9896#(G
%9,A!IY65B_1X%iLKo"6sB4R*Ra9>5g%2<@GdkaKIh/W=rA'<Bh#Te/u92h&X^^DkpW`c]55YhD]=7*(p`?<fFbEb1""9S[Y=jMll
%ZV/f94C"db\f59Gq#.1KXh>*\,K+e^A*f%G:*uH$8GU,T:e,8[!%G"c8XEKG\IT@82E9lAkUXpYCgl^A?#PK4+KC*T?Xu_Nn"*oO
%`o?afn..C]<S!PEWpa%t/nSj91Ygf(b]41*OK_S<Q>TfpJmaLM'Wd:F+FNfX`fj'mcE\`GY?(3M/GllI)J]%E.d!B=g*D%Sn&_"<
%[+6FrBVR8BCg^7#+"b^KlTM<-2e[pLDB[`r<-,<n\*/gO.g"71<0QDkYsO[N!gBuTI50oq8J:)[?St7&:fYNZ*6gW!4jI6shO>%9
%^Isu(cWTlU*42"_g_AG42eKKkAiVf_Qms7MRp;[V[Qa94CDRR)pggU,qpO;UC`T@sC?ef8S(e1YWa[HmF!3hujUS9Bek5VEOe\dP
%5;\2@=e@T]aG?9)6:b6RLk%kc0NnnRo-K/_@F[!3&nP]aR4+Q9AN0;ApG>p5V(CAW_`"-9p55!mG*ZUm3qL2V:X*_K4VFVS\O\)&
%;:X$hX4Y.DO\t.OMCi(JSP<CPQ@+RX[ZIKhH[QLDAjX!iPQ=f$EH%eJmq\!`;"GSCk-k[,8M3k8%f%sgOpJBRf>YY"=SZcJs#-nM
%I*(gqc<6kX:Oo0\C'!-T_q+;[nOp5$X@`M!1WiSt@$9"MrL1i&W?sGPon$N!%.p9.:/,_PhTd76l6MiEa0L`3b8Rj,DmTCDn["s$
%Jk8He3:#i^9n7JMM"24T"NaN!=Hb-CiLoMm2]2;$c&=NCB:mPu>@0S(rU(ec&DpU@hbDDkOMkM6/[ehdTik]fco\Xl#k-6P3JLEk
%FBKKjeF)(lE#d4IDA&lb6+<I/SK;m]8*a)iaSieV<M7q-YN6OhY>.ABg1grN-Np_'Q3-Y44@5K&P'QP>Z>#S@;<2%'QUP-?XMKW6
%)B#S:TH22_]KNT^+g>!>W9s:uW=#_Tks6[Ui2CY-Sb^_":JGR!?1^_h)kF)%`0*4+5m:.q;IKT'S&jSX<p",FPTU2[bZ+t+)9XHO
%Qn&R<R%FE['9?#8+YlWRD1?s(a-t@1(nk(BNm)q4(#Xhs#aGiTD,b/i,bJrIN!b8HX"B!0`5Fn5d;+kQ)eZs\#;I1EA/gaTKk"ap
%FO8ppcp8U)`38p*fl`e.._rBThP4f'&JF4LOS/0q%.2gu#fQSXXB2;Be'RuN'R_(J`JfVeLdQr*m,B[*X<tm_%"^4tTH;!7:PfA#
%/.+10jcKf/es?nb^RNS89@j'U)9If/CmFeiBi]_+:$i_ELplYR:kZo":-iAiJtc+5=eiTA<OANtEmJXd(7s3+7&rSk@>8Ej(6ciZ
%kKi@LD:&N^`45$/?cct$G=M`n]/:liY#.HYH+4i8X!t>GruDi^;k%F,1H3W274hr3Q6&1GK&3!7Ek-!F;\uTn5()-Io;136S'g)f
%QtfI/O(]Z!&aApJUl#UP%a#;0QC).u!<=Ne/LUu01%/O<@1[>]d`[0hj%'>]&FLm[%T],$0u68\]Zh]BJ+;X,5Lc2]TF`Pq.n&qq
%c=BaDOn:hGVJi8'%pNLR(cLdohuqUYdPhV4G`jdu6Fi#e=;)'f2X8iTOtHSX+7!g7r^\f^C;EWj1-:O%Z*LQ7Gr@O3Y?8YUINY!m
%CT/jMXLo6m%lH4@>V4-b7@6U@Lo+J3TF>"b:KgoG\f#t5LM&s0nNpHfAtTA9#"t=2:Mo`.d[*>GUtiTQ_<Z;"25m=5N?>@YB"f0p
%XgE#jFI&jZOb,u%ORAkp-QJ[L4duTADYI'FMH;P\!tVaS[U.MR^o7`t`1R[b'nEuGB7E>7eK9prYZhn%2Rnc;n*g0?NQ?%*VnEFW
%c#-`;$t$=-80Wc(!X5c@PI8rcYZiVq^*JLUR^=lj#8oNOhQuCH[a1i^Jc#eIT2h3jr,V,G#Hp?NV7fAe%FeRHLLb/4Ju_7-mspl?
%OBljf,!QG\4I2d5JK+V7i\9ahO*7Y3"YggnH<>$C*a_H+6q/DmUQe'jT3cm<LRQ[W1R7gFJ1Gj'_<k6%%39'WVMQB"L[M_7S8Cu%
%8>8'f%C<S!1%IV46W5<7'=OFQUk=fJo&p;:1BT%5>m0+O]U,+#]VIEa)cHBHRU1mYIFq#KRj"e*A3U8Q.1stQ7;BQ8a]bQKla)<e
%Cs=SX-O3ka_!N6EN]_5j2PDDf:++eb<1^_ud!,1ph4YEC$F/?T71f@QOUjXjKBXidl0g8PJ4,;LRs:@S,'cc2(9)lIrjjmY,G<rJ
%KB3?ops_;NPDU>ch+Vl:s'j6S6`51jN!@6([<qOh3<=5Lfo!Fr6F#U;lTEF#_/Z`>3"/l.2q`hV>3_e7bOkM)gG*NoVIV_kB;8MX
%.:B-WU1TlI\n.qfC1=h&E[WKH2-l/VH&qG77"k5&3cX&%o;1?:RaTWrK[R*NDqQeUEMEI^%S5$f^m$b'6V:k,J6Jf%8u$9W?il@d
%@EO=Z6C[Jn<'C:N.q<mob:>L60:r,$VmLXqlUJ]mNF%ijSB70Ll'GC_/ZE&A&q%Wk.SD:VbIHO.4O8,K4ThfD[a$[%@SmU'4+7+N
%in(-ENqIf@'[EP0Tb4`VYn(n[(%>h>@@E!@n<5:2XseMB`65LddZn9KARB)g#j&6O-G#IJ\,^T8Q5i@)$Bt8Oj0TKRf9m`l**aFi
%*=b^;3ofQUIIJ_l:t[*eFntU)e*kVRTS$tXrjBC[At*JA%C=>PP&\@<@BU:kh/H#dof<d71;7M.Y!1103nu_OR##m*m,`?5N5OQ&
%>i_/u%t-q5p=1:7RNG1YUGUFeXp`-^06`ut?;fLc(iI]G']d)4bIZNZ6YEG64WNtl"s2.fh(.2/h9@M,>9!slaQKmp*+h./bTj>Q
%[dSQM5.LR%.IB8J%na#R*(5f'2'^T@?_qDelEu3]#jWkR2T-H+XB#KP6oG_RK&WA=<K@4*3^G\.BI#2M*S"2DF+AHoOfJ$Cd3!*m
%.t@k)U2e!rJb$IGC_enUBnfqNNfI&H`[X?'hO)6=(P"fLA>'ABd%#Vil.1'rV(@t!+*l4`NTE4.*P2=?#s*kC#dZ!Ck-u:D;_qBs
%i<$[*0`3'j!9K/W?P$-*e%7SY!?!.LXoMq=CoSc(_7Pn9.dg'U"lM0m3U#u%gsk'-X*8=qJTOKD&`$nU3%i6/GH+UJA@Z^BKAZ,U
%C53%WE)d)>53>XrGmS/8;C*(ii0OZ4IG$.c.Han@5QY.(d)*HHoVY^:Bq`7.YS;,$ll'.ngQmqn%*od@;@(FHD?<gR'L:Bn#2'<B
%/[D)B_mcscc&H!6BdYts:0fd/BC";.Tl2>oasC@873(l7='1Nl^8@BB\>:9Pp\Arm5!pZbe!gq_Du&q\!po?E=n&WY/H=k)n#+'u
%QQd1I*:uW/%7QfjOCKb"RN>jS((PI^Or:SOB*-;Hku5FAs*(OHCE]@1'K,2%Xk7])Y%V]*,fI8-(P4N+Oil1(pR[_.8TRiJ%HaGG
%6<<32K')pC)d>FnGMedOLraI`&\oLi5d+gU/J:a+bNmTGO,T]Yjhiras*?KX)F",;J,&Ugs69FLrqr*IIK(ZPh/E6TJ,4s#rQfum
%n^HBFqnkYtj1kQ_`uk<V?bZQ\J,K6)T>18As5+@eo"@+M#30_%oFLudqeohJqLAJ5VdKGFQXLX6.dFG-rn[<5r7?Gp`>>6VaA9!F
%qYC#\J,0'ss*%]U?"CP+f<>-+^,EZNc2[=Op](&UDu]CO^\R]?rcin>VgnL95QC<6_LMUW&&8&3m>q;1?bcQg?bZL7Qf%YeJ,Ai0
%DL_6MlXJtg^%-[%2;e?$s*k!?s689f`ijgfQZ%BM(]X=)#B#je(Us=SDh%c8O5L!!5CE@WYPkQI%jV%^(hk]aqosA5QrFRi]fnjQ
%s7#/:HJJKg_\Dipd6P\JJ'h*k?iH[iJ(I5>eaSm0QsLjEO/$^nNmX67ru@$uj$r)*X]TR,rq>rUJ,WF%\2f7Vn`@=irOCnONNt+,
%\%s=O!:@[r)G\:OS*e6k%-T4A!%()s&.lA&hfQ$933*gc9?YTVM]b:-@ATE9L.8fdJQ(27A><5K&T6iq..0Vo3"!P9l:h"5kpBoE
%Qc^^M2%)3YY:Ych$%,?XZr=J'JImi?@"XJ#O6]%W'$(0<MV&af+8X#?,`I[Q6Y!?VbbRGO12ZU)GQ4f:dVJ`d?O`1sr>uZf/?,Q)
%Hb/54HD./>@UEf\0j&4W+M\2LC"2;dm><J3Y,fSa1UTK46:@03W+;A-jJ(t<FVq$B<iR@<=)a.&g^/KX7MZ?q4AP8"W'#s(Jh8tE
%<g;b:&>^l^@>bYWI]FE;ojA7gVW3Jrk?AFq=e!o/))CVVlcr%oo8K\hJ2AOVs/^hUBpPK2cjT,tL5j)Hc'k4`0dI++iEW],IEXmK
%b9W?6"Bif?&)Ws^!Ut#-Uq?d&\au^@s%_4hVFY9r*.:gc<7^$g>an0m:'hCSRog0X!`n$+.H(Y.iJ)D"UF]pLi$/5$rP/B'!3AOS
%j-)>.*"ZN'AFb8p?0iMk?iTq]:&1h[(,k:E.DL@#r3($".fJXPk3W]1+U?-12)l(]".1\!e9<`*"$qfmCsTE3LR`\7FK8[J>cAiU
%#4,C&Adien'%i:k=>:Cbm(/Uda>$-FDu_g)3%ec.gR6D$RMTrU7UXu0gQ-5?RW>6i9N'+V2["k'7q?)?V00G*Ak%GPX.^p8YPtD:
%:k(8CqLt]O;U5pb6TIZ[1"i8)LEj)K@\N!DUkh0U$M@nk+4s-u+>dd@l9k-13N0kEC=B&"'S:?Z`?d:s5<SbDF5=%bEcK4blPTR"
%3WnGE-$8#Ci%$F[s(;8^]cL="H3ak0bO]B+'KK^KOBhh5k,$`@B(F;,@f;XCJ1R>"9erof7^60?B0^r>j<LTph?^,%4`UTlB7_#1
%:Z"?ZM*4IhA7D+X1XMu"&a&Ct(8sEEd[St'eR*7cHG&o*dJ*Cg,]K=u0h+Hr4j=Ya=NDfsCRb02TVc-a2MS=/9L!&_$93--"+Q?U
%"_]p'"$=M9f)V!EFNHX&)>87RkVrA-f6_EZ/c5J%5%JTSSbkUV06[3n^hmY7O`8ZR#pPb,.[9(9s()+b2C=R$o*0#gb>35'RY6$!
%*X,d48M<7kqe_?A^V8et9HL$gD]-N$^;p<WalTV0<7f)#0U'$*1s=H-LgfUXUX#WNY*d$J<hB<Caj6r#JX!QF[\Ll#f`pc#@*:FQ
%*XT3:RMM'.4)!r\gEs`hfLV[Tc"tL!GRj@kid2FV5qfoal<Hgd=BE\19mk^ZqE+84i"+.]:E2s;i2fJX'%r9b6X`4\?V^8ug;]Oi
%A^RLGL6`!;74C9.,F%95+St)m5nDf'q<TOM$WuINcTQ[I2>&gA/<-)CoCRL(7+Cbci\%-in3aQodK%^^3X#S+?^Z,A5c9ieHb3L<
%[AeCqg!Pm-.1lkGN+Q1f$q%<;T>Wd>R[7V0')#)RqIj;9-N_Ngbb:1%V96GDZJVr0FOpcd]BeY;Lq#X/^ut""H$&KaW,Xf&+k;IQ
%Z4O`Bj@%!GkEo4F4q)hc^m]?B6drT#)\T."ECC8e3Nl0=E*'DLa7i8qP6,(6*7ML[aH.tk1V>Y7dDbO\Q`nV:7R8+eni@rL=\]"J
%JQf4g4&M83m"<#oeSH2*W0Pj"9Tp\K'9F9tYLOH$atf2]emRg[:B<r1Rf,)mS)f;sbtnB?l)O%18(Ea/D<7Q:\XMP-,o?g,hWc2b
%,PfK`NAm%pdi6;=Vbse]KUJb?$+,%j47t`c++M`LO%o?!/pEi/rWdVWFRFUP-YTp+EaSED#Jl!N4Y*qi?1-A[h^Kfn36rbE`i``"
%bF`g>qNS=8Nn:6@=3T%W]Y0IG%?ZM'U=N9Fjb8Z;h6pT(f-m?ups-',7umsVZP%"pAk^s[<nhd<T&<P*635ZmDEiQKdK@I9,1)$\
%YVTZ34*alEm42PQYHe&%!j*KrFPu-[_<MQ^-7.Q`b'A'..E9`qed<_Ko>OOSCp^Zp\mp?lf?6@dnln?X,5W4NcS*uM@cc14"GLSm
%@=AQ)?T2#RN:MX]Q"[D$(lT2`-`6/'585N=\S2g5Y:+7UXREOHJ/RcOY_8G.AR]jEq`M)%']R"ZG5HuZ&17mkV%gV:J<aqr+g.V"
%"WSfTigHr$p'->7$di0L?eEZY]:PTZk";EhAJnIgL.f.`5D)OJBHuZ4a<AZN\(Y?H3=<DE$OK[iW->53Kd;"ZY8<+O[!nqrH*00f
%<1;V8>Y*;O.crj-Cq.3XfFL'gl:Y,l$'%Fjs)`;;d'V*h/!NQ)F>9EL:=tl5,S1.*e\UZYZ@t-e4q";ce2?l]F"7ZY`b#)X.ejkr
%Kl(nk"C%F0<?+u6C1pslD$<4RBGo7?iWnK&9!Tgk%]V"\g4#m$c\@,!(p:e&+)mE+Gu8pd*Du@&JhQhVhAGH:]"er][fWs+#Stp"
%"J2`_l#HdnQEfu`qWXXXR*fr3TRjkK4aO.;PO*SX8in:V%k@sQeG!1:%jUOlN4sRep*:=)Qd7>K^,h6!;Mni%lc+euR]0;`,PQ?t
%*%L="Tna(]>P79`NHA%a>@>K\5bbLd"?iW#<OF!+]0[^N7&tkhLU%"]<?8ZTBeUY.+%6sfo[;7PT%C)B"Pf67njBpRU#7O)fsGTg
%P4Pu!!XfIbiVSkI@S<.npI%ob8(es>,HjJ700YjLfeh"ho>=2rf"nOMrTtWfbu!R^r:k2&LReh/=6Y<8[)OSHY@F/l]\U)[JK!0=
%FWn/kMJTm[E=]o3M)jUXQK*5*oFUt]6Q.oT,TFkUH`/.e8lRAjqZ2ctat>n71'5ZIca9*ZT]J=p"FM>mmM]+ol-ub2R_J>QA&\QO
%Fj4`ED77qLFPTF9OktTb>=5a3]$#PL)X=M%-_Ml,[<,TFEc:$2NiCdrS?:9iUB(^n@a!%K/%3`/)hgW0r]''4m==rZ/d"W9g>,dT
%MLXa8Dft!AeuI2Ma""KHG7Nb0U$_"m9)mrCkm'u@m/2t1#i.;bpZRS$oX/@APhX#oOqj3,2j,F1f\T!,$1i4H['8+k*n;Y@r]1hc
%A&,0AY<Dfcc1J'i)8oF6EE)YH7OsJ].SB^#f8*=&F,mpSE@=*8A*`St"?Rq^L4uq$%LS4fj?7<`a"u5[kC2i51*r)k-<$$c0OYU)
%L\<PVmdA]KTsk;U;YH?mr#!fnh'0Q$/+<JWp?mDDV3&_P3WJMmm4Ae(hi,&E.]9q>m0tRQJ;B(.#Ndr+d".N2h\*6Na8TL]FEQt*
%(sC;JK/oiQcCcKPfT*EVVj0$E_4`'UQnW!%;PKZAcI__iVN>X!5qK<_1A1+QQ\RMLCIA-Hgu=e>YePW%Y`WB>415[P7n,tPOn:6,
%1eCK,VVrXgOe+8%i$0Gr6NdNKB*I^@CtR+Q0:'W)*>pT,23BgoF\MpJI5t8tV`BL3-rd0K.G>sii;:&<DAphT/'J/6P8&<V')15Z
%R68\iZpN4Netpu/^.B\RSB%(4SPl$@%cNAbN`a^u;DHX>pIn!*$\:0/7mqb?G"uOf&B)_lT=aADK">R'eKQ=kdN;/<&a0t#&6e.R
%cm+1g>pT$E9'_VNdOn-re.F[2FM"i69M$K#ij*jU'do&O/u+YO3.5pJqkR-M30A/@.Q/fGNSg_cj?SQ\OieC08?*/@p6Qr!XP9>s
%'sYC<J+juVc%4Tuh]+Jb3IH;G:a<C*@\"`aeoSdL"H9NHd>(j_Sc`Qqrk0,ak$W3nN#[EVK>Pjh=]o4X_^[s#rkUo6BL!g9Qkq:3
%WmbUA;5b98&jOW_$<`b%;=\t-T;rc97G=df;'NOPUUk61WU!Z9]->Rh]L9DMY'Q[EC21IGY@XqB%?;q[b\8P!e:RV_H8lC-ff_6E
%ie[KB[R\OiRkem%-Z0)b5k)>XjYtpr6)8AT@jBd<f+VHX$^(U!UW\5(M-2`;LSfLfKdWpQ::"a\&V+^NdjRtBEG2[2"^s<R[@k'.
%(3)-[aZ_Y3r+C*'oiO"c5i]Z@ZJB*T=@)o<@Lsg=aDRAJ/.MU2M!uQk..t'.A<8iS%Q5umk&>X?X)O9hZf=Yq%->#T8]lDPDQXip
%g8^:+#abb3.M5NQaM#U*;^g)h]d;,SArN7EWY1(Gd`mP?H'2a4e8&XN[EaQ)\8Sc&3o4r-A7)=rH!bBn^jud@:Gu9#0#L@e8_nsc
%^;ra_Ej=sG]Ce^,+s0h'cIYIScX:SH,N?e/!Fm*N.<KJ#c:&401<\(HA%s*s^FH*-/T$DR"Z<n/>@.+T"`?qa"+7_TPl'rD`-f`8
%1ee+lHVd?kBIpM_U7+s.M4u>FAi&lX5(+n2%mIs\-8_uSh6Ge(_k*>J#CW5+(c]U6ip0(Tg9LWsfUkNiIP?n:kIrNS1tr[,n+d(c
%=6XuJC48nX'%-]Bh&goTS!=O#CB63;XgpKAC@.h<BT;Bo#g+tc,4cV9fL^#cE'O)5`k:DMF$Jh-8t[eTO(QRiOAZjII#,I+H7$0c
%Y]<tdGaf9noXu^(&hET.\2f]_fX[$CZJHHQOt9@pdJ"DmR!ij:I'hkuAig+.O@\6U7uGb=!qd5)&p/4&;2Yg)?T6:GE6Le6i^S>p
%]<UP7%VY#3=jReR9l94UXOu+L(RO:CVBr,QD7M4,iGiV&kNt9pkQNOj9saTk0(@4lT'5[i&Ia)q%ZdrbE"WHH>/a"nbn9E@=Z/ut
%Zk:(VS&/GbV(3cY.5[IiFI"`u_cZUp9aY2N?Z\u,!^af;"Lj"/\i"PrAkL7lDHRi+Q3^9gM7IQN@F@L'H5m>HSD"+L`mV!e"u!*m
%Zu!]qE7!S['XjKU:_Ko2H\=GN2D1f\e!2/55IRbrq^0/1au3KY!QEB/mo_Y4lm7tRGr0*?7uh"tH:5X8FC%#:SDfU0nUUINV4%sA
%dS,/BE%fr?mG7D+_:l*D9q1658J-Sd0k0<%k8PpG>l^&!e<7+7nIE!QentK&7'BWAjD^1,RG'tqDCmG_PQCf[\DNQ-/SE4K"g'#B
%-qSAA:8gh#R.g%:W1?.3,@skF%b&l&=\Y7)i,KAf!<a%(aVLbbID1#qfoa2*VtU:o$bM0g;01[;a.J7)8A"Qt`H]W2(51<tfc;J`
%dE?#qg4G_?TDJX;,b0jVm,CIM^&+[Od:c>J]B>PE^/i"lgiAkZRrO0j0rd:gKUK8(7bAnu-k%"F]j3%=V"9ced2c';WYY`SGY/Gd
%V52?^&5r,ZM!\1<?o$Ej^$+D'R#+kPbO<$KZiDnSE?_8h%6msp$'DfNY"T&M+ue<Z+VAgj#TB[=&,Y1o*GnB+gD8F016bPFD?,<A
%E#[$M/'P$u39usAR^^8(_[*NMWAFGA2<.)+bs.@hL8^$%,-+9a.-;8.>Zj2qnMN2%H/ggMo[1Z--tL#J7;+/>E6d7aTQM5Ud3BkU
%C:#EVRr/Odqd/cd_n8-HrND('C;2iErR\4n9rQbXZcM_t*/?3P&9'*RZrqqVdGiTOUM^eL#aXg['M5YXHtj*")R<_1loaOd.EaVr
%!0`Jg8*&b3hV1d<[3_f+#5g>+AkGG[N/k];o1%dH<:ZO:4BkB"$r[h&%']?*o/LOeaBiKnKVZu\;rjZ:q=jgF7EQE1Gi^!T&HrJC
%p4dKl/R4SDmB_\E.d4Z2OOG<uN3=k*k_n%&?+T,f8^`\)<!@pDD(apt[d$F7!1$612MbSIEK]@4TL':E'E5E1H$?(GNct%n;CaDi
%s$]_/@bpe\./2="SW0d=1dp3L3^[PWAIPp)>`.iHcD4k^bp.&$7CtqXA_Jkc8o4^le@N#U4ArW?`U&!/:*+2Gpa=Uj=@Ja<2\LO,
%"?<4cRm4shoXk?"J9b;ALY,)rA=KJK*^4Ju]e+H5d`[U5C3.EU-?=n?Nhc<r/uFtWWPG;ZdP]DF'ZZZeUfOa0<,:c8/Xl06/sjr-
%;W<:'D@S^&1(N2#`f#"eU?d469'rZ)$<V8KME$h^7\V$7.+=qo[[Nq8DE<qt!<nqgflM3%;,0WX%EqQ"j`J9AC+PF3h7M.7kE,/l
%h5f&Wp$C%lAs&8_KM%Hn8t[`K-B,'_6"P/[1MSOgD0-Bg,$7P9N*gZ4!p25$#>uS2Y!BiaD-L:18`=Z5RiTjF6_WihA6C.h;XC*i
%B+*Olm-ErmmE5Zg4V@o&qqa3II="-)jaK'Mr&(nk^QjN*?QI\5WN$]R)G2l,)9_,I.Uo`QZ]p83XR95n.TS>+<5$l<d?_s:'"*Er
%BeR:=PZshugd.)(E2g$^%.kT,Tj>)Sg,Z4oJmm=B*FX"dYLtRCU_-NA)'W]KE:@Y\#bYbEIhc3HSt-"(i5)Vod^o*fjFNT!)VXF+
%FL"QSH$[sO/aZM6N]nI28/0V7_s7e.c>bET;cn&Qgr0UV`?93Q&22c(XW=tO-?IiVo]+uIp-_,?);GeaKkq4+TdMYW+9VKIcJ6c'
%q?)W"WJU//cWX^'[\RY>H@UdZD>DMSit;u0Ta7%+ajNJ/?E6Sb0GC>pMMGZS<J1C9E+t]aYFeK;8=-6]7;B;t!50L,(Af7MH6oe`
%<((-A5T<f#<U,gd7QDJL!f9G)qT3TbZ<#XYb[9"K5bJrqW9+@:P@r%L<%*"h,is>ppEmS%CRd68%Ir]TKuP=s?W8EY,B+OGQ+V)5
%hh'DVI7BIt%99cI`LOsm]7`u^kT_gV=gQJ.('")_oK^="$/pLEn;.GHYc)'8Q3)`IQ<%nIZm@iRnrYH\%`PQBdTOZu_K+lW6`OY,
%;`(eYU/r$8,XI$CXKL]']W-p&VL0r<<f.:F7nrCdfeP/"C<TRh2YEJn,#pFa4G>P5.VMiT!7Z1.@o1oBM*GVu_6?@>c3\)ph&BgA
%Z^;60-3aIsVkWWj=(+$c"uLg+dT^0dSO$eS<LO@>lo?%h1@I8M;O0E7QBPUh'$-tgeg**VHANQR/16@(U#uo/I'DDOA!6`/YI#)\
%VI>4lpbujNK$(bL[8"JM9U.)73_`o9V`K<i3a-'")Yh`o*b2_VVD9XW-lZ$S[%SV^@0<3C%FX0pm0u5n>%jIoChTJ>?30'0ajmgg
%[FUk<8j9;"_"Gi6$OEcL,Y?3<<[[&(0[\@DDkB/=<(Pck[gPiBQr7+s_r-fBnbJK0)3LLf7eDO8:0cJFYi9@41bA*g/ZgP_8)#Sq
%o;ou)XB*U2]$2oRW$G;N)SIuiiaZ_<qUcC;)`3JaF\p)iIr[e(=U',=iW??Fk1`rk]X-mo@TY>9O^*-;Vo4/8+%u.`Y\2$oNuN=D
%k&Cn%F=RLrD=Z24<lPotl""POTp*^6YK:kr2ElAY6NUpu]r7&q3rA@$\hD6J>d[sr83(eS@2RY:+=XTn.02eEg+X!ASAU'aI/*#@
%e)TcXWj)VN$l@?uO;'XE6]R7"RjGuX$DY!k-e6EP.up?9KB8;8o%hg(B5)^Q"bceF>WS^ueW+9=?lj<PF-Zn#f^sPl1eU]S0)0[d
%lTOmgcVIBRQMooSjM,>gEpUi.d"#FM`SW5K<G,=f!8.l1=TFJ''"3J?m)53?.H4j[!f8/S'T$7Bhh67j?<W,is#cWln/E@UN"PqY
%0W^;b]/*Q4Nl`cI\\gN5+<j@R;KK"I!^-:S5F>"bD.@MEg(n0R-Gs?&qC3/0=fS@2VgQKOd%VYOCSuD-:(r.b[nSdD:NB@mnD/aL
%2VF,jfs9-X5Rf88OlDQi%@.kf>?Gn?E2#e@Vq9`'2tn`QArN:02s&/JmST"`lrZ[f'KT8]PUMu>Bqf9mg9P.!\(FtlTIK;()sK4n
%.m_m>DD=\MK&3eaH`+"+oK_.R!hQihUK@-(3oP8)kT+F@hOg-$#FJ,s)!R8M7c3;6$JhToUKQpDc5-um,"51KOLf5m6.J%#1sOrr
%(emrSe'\TW6^TZ*KF8ePR[O<!0GT=4@9YMh9l#TTNBNqY*gRRn8jfJ=o]RW()#I9*U>_9G-$M5"Xgt-UGsgh%]b8D_Du?>^a'<`P
%U$*@:aO-c,":09$3,FC_jQfdSV5hg-_m8<!8GREo4'Ut^%-0$n'$*#:5QWM+7WSaQ1c)es=k=I&gs"h.AYSLiHT[uBbY'*U=<]TM
%fP2hPm4n#fZ_SH4,o"HL1X+3-bdDF,$4IV69^E.8GL&<e2t`P!0%K#P:^^k_!iQT)k)a5iHMca<\D<pa9+\keWHBmWSO1],MR=3N
%06HMJG.t9N1&/gsa)6S,fdP90.to<l:H804bD(#Z@?,NEE'8uID89H_D]m:a&9[EJEU&.XZ%<k%NY5.A3d!kN'LQS]U0(Cd2XANg
%S_-&iV](*@PdNQR)q#-cL@]N-0<3LDdt;,lV'$D8oo!rE1[pDcXqE1E:Xs5BT[8I9\1Ld^fF508fqI-4<e?(&6@FnO4LA++1'("m
%dm$u$A"qh-*4jHqc=.6(@j#`1J.ou$.p#(A&-cB(LM(P9Sh#ARWZ:W[40BhD:0n6OpdU>71pEh&p7;(X>O(qWaPlB\Cp(mJm#Ee(
%h=nD)YBRlspuop#63.P8nHtGQ*2gSWhA=oeh):ItjOcEZaKBFg\mlL92SNtF!?$m882(@()L7;R^?&O(Ok!+A95H5HLCI7FQodLP
%!%5Q!'[iQK!gl88kB'tO`VR>oZrV4k<'Za?K/ujYJ4[.X\0,t=F_282>+par:8%bIYPce=&X>"QB/0Wk3ap!24f4JM3\^[g(P0+N
%3X#$shuYgBgN!d7eXBO'HJ6YP-C%37bq%4r\Pi>G2Z1!^:0N`UQs4%rkI04X<u?KBC4ZVoSXMrK<H[p=)LTu)1(&R`MPabOnaJ52
%I?\J3l1'-o`,%L_$Ag@-Su,L(R^Z<L#rkG>Xre+5B#HI>o2WA.8_4.;Z*m&W%YcHFYdK-6X?rTNZIVgS!r1B)KOaUA!lAC^n`-CQ
%l4B!9=6<\^.MrI.ilXht1!UCEE^qN%=)5QmiOZ6Q-#8q8O9f@WKS1BTLh5mY8]cf:+!J[]OGm:8)^d]MiT=/!K*`C5O+.tr^C8.J
%UF-ptPk>,$p_:JM+cU0ED$5fq1!VrTUUr8Q!\I[ZU1#R)5rrQ&8LM^1PhQ3ZW*@1b'?Z=Vh[$.<QUu#eEJSE-l[A)=GH*46buC,t
%C_R1RS8)d_WR4`Q+J`u%Io(a:`u8d)e(2BeN;?>YU3,n1dSu)NeJhG)3^:\"j0CW2p0cF"%7@YFk+kc@!,!Np4?t!UKXH]s-lLd4
%QFMc4`^D1'')K)add3;#S9%RO"_MRW1Cpj_J!<gLVLlA-8egC6KN?.aKZ:U.fK_1t6Lt0g,rUiGl-PCG(Zlke:3Inf'Vb_.F(\A;
%,2:Q?(=6LsP6d0c)Zd)9`^[rO.VY_\KZT\[=_38S!Q'E0#Ua`\ldm>2D.,(A"jn>^)g&g:liY*cXn*R<:F3rNdIb^oUCrnf[M`KV
%[K39o7b\'/a*)tBN&\X.Bf5SR4l"$N3R&SNH"%dX7mgamZpAYk0@Y$,M]e>>L1`OS29A?GU1)EB"68#m*jlqi?:J*hq*SB*&X8VS
%Cl!IM"GJ_UD=&GQVO$cKjFDZfQZ3F*&b*4-p4h"U`G2j'6oG[X(?HG26qfu?Vca*NM:E'?TrM6,1R/(c#d5eJ)(Dl3GO!$'`q_WY
%^OqciPZ8oU+EJ8?7V7@d.e7%PY$<F.p7Q^Kju_4\]k3BIhO(ak1`Aj0W6n:LRdW/D[[cVRe=*/7(5G"(rB%(DD9dA:Ogm)hTcmR^
%1T-k@DF`GbYp'@Q%;(ofF$%d6XZ.*/Apr_#!)i8bX[VMkcRW=j]6a3kK[ZCC3$j]UDXp_.Y-MiEUEqhR7!WOd'jc\ID0s2eEB"fA
%#Y<tW53@QsQpoa7XPCp/<(3^&[&qO(&?"DQ[[qe]*scp,hQCXhOhep4Elu(fS*s-LPikFB+X`/"=Ic$&ptRj^0oi%C4i7Sn'UK(>
%-=r&tIo<1@RkiL`jOd(L1X76&es)\;nYWBI/q[G.]f'FOdt,&hfT])_T3[_o1R=&Eg9+0'[/i?M7GoG+r8K-TV/\Xm#Hi7,Of&@l
%3R"OADp%Y3Bo=^K]VD1]I?\F5)`!bE*Tl(m'I/BXG*4s>Qr6$oQ.dkM][aA*!R#(4Tl&tLKbUT`/Bf+QWC+UgOYor=#htm?Wu)Wo
%JN-stX],;rD_ZpJ&X9epe6&9HrSrnC[Uclq6nl/4bp(T#1HnQA'$O8_IG"Q#a/2M?[3m^da4@Ms.(g>OSqQ,/+f%A)2$nRRqS<=C
%!nWuA492Q:GhO&u_n[sAR^n_(PMtYW+;\u*GKc@?dq6G*C>&ds-D^gl2h3p``b+d.YpLIc2d2@>iFb&;&sr<a8'bGsIsSRoQ:GT;
%b/nM!UZ@;+8TR$i)j*?Hk3Ancd9.<eq.d1#(#Z^:'FpB&``ffSFJiY=:'(inGGR+)fRiZeBhMN=6QuAZ]b0GgDsZ#ng>GHV9N'>K
%?aZ-53PHanXGgFI%Wbm`>DZL*1HTI8354^`&\u,K\RH=R0rp$]9[YCK<([)=;l,gb$)P?ZBs/78[A_Y9p+)R%`)M`bEC(N[]:Ag3
%6ksh_K;2[\5j)4YSA=6V6EjZtAc%]XZE*-Jl^jfpO]^1iWA8&E8fstWkL'lZL(=1T0a$sbgN\kVF(HH7q6kI09m<ldT4Zdqdn0lZ
%X2iV@`aq>CUl.&i1H8:+)He]$BIpBQ'bS>?S':LFY&$$G@oeO=OO1@=eYULW<oSg$2@]:eSna+qo>P7&QsHH>gOS6THJUh1KuqOm
%T/';<k1F&4iQP1q'0^JJicFYr`ao50q;M9Ge"_FFDnDrJV]0j?M1MhR_-X7]FL_(WZS?\W\F]Pb=QdMDf4](lr;7mGkhi*EqXSNJ
%GZi)9A,-$8i0BqO9$6D&dPRAsVFaVmf[>%d3HoRV1+:[EFmKS^L#%XJ69@TT_m.mpNR>IRp8g<d_or1fLn^'KZ4]YU:>BCN.I;it
%k4R'Wer_A_P$Y]aR&<!$/ShQCJ_e<i'\I0XhC=Pc=U*WmH%h+m_PafGh^!M-bLXn$Mn"OOBu&Ep.iPm!:VdhN7/\'SB<;NI9ak\2
%31DlAhk%fQM6MHf5ni=Z3GQ*%2GtC5BfI)C6P9S@Y\PH`,G5Dq)FSABSZ`NpM*li>cfiTLGIMNL90!ATD6$OG"Y7Pa@;RN>f>[Q7
%f4FCIf%UGM1NW.h)]VW:E(:F(o!grP)t_Q:f74?W6VEU?*B'd%0KicRBL(3hEkrO(Ae,IN%YFe7Gpi%Q(e2?s_V-"**r*e?.Ar/?
%8aKD92,1_[O4,<[c0IcoqM>9*?nL6+&KUFA&Eq!\"1.nL0c[.i+0f07>CHQh5^3j7m4.sb`c3J$46L+2KFPPZOY%Td0*i6_#?,:(
%MW5gH-B#BMi>fEf9:8I4PWR&9,VP1]1lEOngG0clOeB7$al%r^p;M)A]l9F<U^qIAe;u36nnd&lqRRX>"LLj9!S8!rV)UWbVFq0l
%A24VF(q-B8KktXq51\</6?J_g(t'[$DK/VIio!/VOmX0Q(iO/^.4lC\)FWWN+BMeuW@;\YY]sFGEeE%(Arp<ZKpXQ;W3@#'huWN0
%JCMu/Y$cD45o4rboP*="Ynb_U"_hL#HQ!q*Xd0=qIN2doa$lsZ&tQ)Y%'/!7g=n!50.8pW$BrF3FjKPn\%BW,@9udQ\BM>)P!,ie
%qtqeq@"C1Oo*g@_]OfE^"C:Oa$:ec%T"]JmDKe-:&O@-fW?n])@O[Y\kQ*5:`&A5$9Kd@:>fqjQ%WIe<moRW!lmk/Q>%Jj21<css
%e2PNNU:P.=s35sbX(=kGhV=e(O;!0l?,ZUpPS4oC"no`Qe!(6ni06XQaQVOYI#f$>4At"+VcpfYcqqFHS?qZj&Nb0S>2KEqnCeoF
%AdR)7\bW"Q@_n!8iJZ>SMm9eHGX"%mVPmoK*d)E\6ZfZhd5IUb!`+=B\;:boL:R1kXQKLE%SoIcj-/o?-pR_)m2OVZ'"bD??5Q0"
%hgeh+V-bN"D-ImS281?sJDup6,c7R3+M@,q@TWl9'LH0#a>tQ3Ko<kbT%Z>`KrV/_fb=Qu=PctueNga=?_8](VS?HXSSn@BZ/kui
%K.8i4-)>WI\,S>#@VD3_>=\MDoa!/lNX?PXk"b%Y`S7T$8VMceq)2.ghd3[;W[,`2IoL_$-cb,fq[_#CqSTl\5;Fhj<'0toW'=>J
%O[sME@jB,fhctN_Q2Jf+*PZ(Fq(BdN!ALsX#[j&]r:S_q_i[Lj2knPh%Rn#=`bL?SF6/V1fJl?+[hXJRr32)1S6V>fV[S\*9sFTe
%T">D]3<CmnTjF7.!8JIBO.J*7Y!CGM[GZr^V23q;jmddOQ6E7B4fF*AXNYer>Fs+DClUK/<3jUs+[(FlaO4s-[gcNjUm;Gk";MPc
%"<m>XU>XbH;S[.p?o/?;E0\W$1AWYR'c\&g>`lT5Coiq$I$E:7mu6^&_t#_dmFY)`])O[We^SIAoL_/o`C%B7VO9\';+q"k^/VWZ
%>I7N>B^:3!ZFBoDhbGcBm6^>fa;c<UM(M+Npjh=pOo:R,0uYi+XF>?&p_O:oIf"f!,hW0LSt]Bh.%!*uFm^0`SaKah9HKZH'grDf
%c.rNN;6ks"cU/(??i[qTa2j^j9,n(s\1]VUSARLX++qj$-Nmr<3gSH,RL])[679ifqT61`&#aLfLTC0Scf<\i`c:uK[qCG6VT3l6
%U'[A'SsT;smFs@lWaX)_L;E2;(JtA(T@>Tc892f1TM2ck<s$VFo*LR2a[c/[[l]?2$;3Lh;U40\m1O49O)jA5$B;mYk;aaYXfjC>
%6Xm)Y=H3O]Vl+2XkQlD0TosGTDuWBV2Gh+X$HuFHR=aGA?3^h\@XJZciO#eLa3P:@U+@E$k;6l`d4?3qV@DHR\%C`hEb0Jnk4%pr
%=>)pU`;U<1;@XN4?aOoa2k!5JgdImA+9,g@33enaSJ';MhGi1$&4BO)B2In,X'$B=_J#=,I%g:-3uCY<Jr7pp*>0GDkd(sV]9Qr:
%OS&;:=I&:`.Yh$C7IWfM%)i!;J!^S)6956"YFBK>)t"jOQn?9F4LO0_ck;DXmEWVnnd@r`4C2*'?#Z#Z*dd'b>Q$fX4qf"YbAY!E
%]au#0Q[ELo28.!`H\X`ljr#7F=6!.)(D<tQ5-^<_@`TEfN9BT+=H*LUmd!td+$RdJQd!e&4BsbjW7%``?OeTaY>Gqc@2?P^.-JK!
%+Pq>p,AJ=jQJXd\<[c-hB!()]6>RO"$KNLQ:#3q[^Sf3Q?>9E[/\Sn!Y)b!l)QR^@4$06%VT]uLOsc;'e\(#Zg)N[KJElC#_W4?K
%1ef<8_"]/r[j<nhJL+r4^uO\=^\fh%I0%6%jmdtRqnGC=%9VQJH/.\ILnH0M\dL#hB0@so=m]rdW[*('%;sSs6WdG6ETmAK<._1.
%.<1A!dIZY(LM/2q_GcQm-,tMq%/%"&K02iubrP2ms/&o@gETk6?N<iJqnX1rp_%;<X&-+7&OE\/H7Pl@(`gq$YiRs9At0&%'GYVa
%fJ+F'"YET4H$i<]"!@WN8N%f<eV<ZPH:&Ah:f,f"e`((cL\u]#WCOO'5SB)[Z-`/7hO(S%'MB&=K/mQ!BcdSG>['nsZJtg\IJYPH
%QjGAAbH%L5Z_9t=JF'Z$LJ.2ZOSni!W8ZT#Q.[d?51NL.#:4<=[#r-G5)g'X^YY_dHbG4mgP[Uo;17]`Ao9conKH`WXE!o-V:sh:
%^eH_SYu(SB[0MtSg^h&s'/bTY)(D!#4ZY!;HThhr$AfbE@#bp@AX\'hc$%IPqF-oc-At(6fD_;`)_a3VIsM@!-%MD^NfL`M6M)4;
%b]KCJ_,\M?Nli.&^GWlrWuLUqc3n*hEoEF"Xg?fGBR8jlD#tHp\f.uiS5!]o@XQ`BX_?I/(9na!Hk$@I,D9ihA(=-+6U&fpF))_\
%^s.ZMD@n9W'jcMC*+GcAmqfj<X_`JH`-/0P*:u;&Tt!f0I!'`c]=_\G1%,Wg*:UYBS1F<+H\#G@ZTT[CM2GeSFUSWCWa0\IfR?DH
%84RFW52f@%c1A*Pd]Ujhf$juEgg0I8=Oa.inOKG.Z1E["=R+'aJJ9U\p0tR8oG=Y;QZ8T:eWWjufmN99G)kBcY:4.88;Xq6#`h,X
%=u=Qi0#+%1e:%:E7c.W^e2MMXJ*TFUIb:)A2HhSDigc-Z10LOQ9J^U?Fr(5jYX;H`.p%A8M+WU3*Y,%1`@!.)<'b-al_Qi/1,dB>
%ia89c";K0TYPTrP:`fSRR\u+;To@5u`b6Y95:VIKd]oeY/p[LFkgS4Q9[fgL$r9N9,%%'^i74T/#>XMV?'476(+\6)0T&sc]21)(
%kWQF3/YeMmo_''Z>[=TPQ>J/Rp#]+%g;C6J`75WtW@;.oFSO36#U*GY.CjK7C8)bLc)o#s5,S9u'ar3/?*X+p!a^3+Ep=tN&k_PK
%F\l*2l[f*OWA6kNQ3Re>U131sfeJn1ao6X*"'n$/kGcCn_)GW.TA+-9/aaKkNHe]URs]P#;U>/d>A-N'/:+stb#n(6eC?^Z\(=c1
%DXDHk<:A;pW@fKo7/*):1&UF:[!hn%2W%]ShNS<FN@Pi*%.*9o@_)Y0>bgpT;)m]35V9"@.QQHmbng`@Y,mLUZiO)V@1s(-VVf%'
%3&mT4hUO92m@gQ.o<ggG)C>ePs)^4iDa,fZ&!fg4XB;6(RUX#&,lr>3<kNPU;GH\^2$^6D`CES!7,XdENKZ3I%&OBe(q)2,^$.nX
%N("jGFNpb>63jReB`,#]XpkIf78)*PE0B1"!aXis4MFOM[:&UoG[)$7mZt^glu^0lN+K-]oh'rL@]P`O+I!4k(:2+ILQebN+81rC
%a1QnM_S=t4mTd$A1FuZnNk(LY9$de8*!(A(jc#FR47tT4K/kD!:kU-7L3[-hYHuaT>q!>35ld.)E6gjqGF$2;-QO80GeHZ!Sm'rY
%q9()k35[8n%Z?G<VD*;Q)CeA?:THc:PiQb7;(:X)+<QLs`!e:RDD<Hsq:sFTi[J_O^RrdF(9roC_QkRV]oo\2\SmhiSOD0IL1?Z:
%4U+OdMcfcj?pM.-(TX%!Y(;jh,I_oR1@nnp[=XT(b[$jDr]/RbC4#Mk<*S>,RZe*,N[cl-is>=62(hshSZ3DIo#8As<UY^4'D8R@
%/#cYb[<a74l;M%Q6:BWbo48)kV^HWUTO[?8,^BA5=rP>u8+HoVY/YT2H.FWhOfXAe#RB<W>/*2$VYjd,"lGmXnla#*=Vgo7BV!6g
%%Fa7>5B.ulLiJas5=T(1NMg#F-N12[2GjcCf*`'!?%,q(j31^S+uaWg(7NE^a$<@[>tQgu3un!\gM!&LK^%tBp\(@)LCd-`<#=TL
%>?,;58Yg:IG_tnb7??8uDf;%.J/qdQ1^.P*XQ6K1[jI(J-$G+e.Lma[IJC'%@RR,Sll)nX6SOan15N@#WnUJ+^4&;9n#^$5;,QO?
%1-`]+G&b?@%i9U3q$u6Bc8Cf>S196*&DQ!2+VmL]F@9",2Q9EkYN#Y)6`a%jZMB)X?bUaS:Uu/;DeJ[1IsVA8-NHe,Sg=t\XRB+4
%7\N&b#T6Mk)U(=!V"dr!+`ZH(>d$V\:D%)c$?!,%R`JQkO<=<b*fBPl,\)o/5Z6G>G)h/pT&C!kK+T1mP_I)8JRZ,'_++f!2E$8u
%9?K&L/AM]IbD#hfeiI7hb4LTk6H%;QHN=3;_1BOY,.`XG_8(fiq`1!=Btn#ofF@6F>VO5H3"<D;K"4D4HS$D45/=-M,t<c-!FdW_
%D&"nb)'A7jZb4HH'"?7\aI870cag[*WXd0&3uUE=%6$UaMHch"?!f;Agu_:c:lG0^1_jXc2(]_19i_SM&<.:D.A,9M!^SOgNC5cI
%U;a@goTu25p@\<nHuBI@&'aqif.c]+=Ge`X]tcoq=@c#T=$R12.k5.&n.RL_lo^sK5QSX+YKI]iC6-/3cJ_'h!^rs&C@T':Mgs#0
%N!^R$gJQk4$T%UI/;ZBU9a0tt)NL)*5'7\WBR&_8agUR'OkD+_gq\%'Q'MXVr8e]QGdL'+\qEdIT4WOg'"A>,WZlRu/.Fs$MM)1c
%:%AVsf+BVZo$YAD;LsTIRThLGerE=*$Xn0qQ'-h)F,?T,]plXJ=RY<-306ekCUT,KPdWCBFdJMgF8:piLBT68aDn@a_PSX^%(1K)
%Zu*[lX-stUOiK.uO%Gq0cH79XJ^Ge"7r[b"e%]NNd8kmYfXT^qeR6cHe4rVKr&&2D9FD:NR(T[+`JUROls5:@'T>=Us,^G<h[26D
%oVm-:M)k&-(oPl9r5PHYYEPGg_c,!tIQs1f/R\$eGCJjDP1'0o;9eP-"hX`Dq+9X_6iOI[4GfaHF;pR@<G<MR+B2@_fhPOj,Y%R:
%dpNQXqpVr;jncqC3/)9j59!h%3,Gctm\8CWkP`>HkHjL-6u:X=,kOXUcJ&fr+b^^hOkOcP^Nq0PDsW$*!gHOk1a(>7o@YC)"B&VG
%[QYPXr5GW%)(M-n%U'bn9ViOG->)e*YspEKDZAAfg0+#.":n*/j,ZegLMkVer^2GUeR3nkgql0'T"NLMd?Z;&kc)2/V"6&*0CT?.
%D/mO@iF,dZCsu!G>aYVONnqNp9VLeaCIaM<!ZTOGm4"q3M<3kapGUGSG=-2(#S]S"nL*F4LQU*-%"YAAkW[n-Rf)*FR4acCiKY.(
%f\+?M/rCulA5i/sfKD=Ie%3mNX/N4YMWTjXOo9g5E5QoogXkm@o=[TZ4a-73gkF.f5Wi"R=3GU`]hL8GZqD$c!Z'6r.9;:'V_WZT
%278Acj\qUQ_F>bt`W0LU`Jg=M_pn5Hg7NBpURmMn6@m0JlH[f,g2hrc>659_juZoo;'@jlV2cnE987euH)/*_.SV8!P=.h[-AfdP
%Y9'BOdK!)D!gNg4b<B=M8UakqBsN&DfMOVtQimmGX'8u(+OrXq$0;2G'%J\T3Tom(5VLS[.KHnZ91(8L=Q]$J9?lHOj"c"9)a`J#
%F.]%.?!)f9>X#"_@2fDpc8!TJK,[//c+RWT'g%b>^'Je7;<,\q[M[t,;$!A?JqL[;FH4FBrSBAS2[1/hl7`U]I3f?d3(C>\:9!6/
%9:^`6'['(E=(kibenRg$9';l[Tb$:T<CX,J2>,R"4/UOq;J@%!af&T2</53p[OcjLg07+P5A='fn$Z9=J"0t<[@Y@;PJN.iB$HY=
%(bu=bYG_`q%5DZ6=%NKSUF&\$!iMlADY1p*gXHc(U\/`n:V0XZFj\d[Smn7gJj+<Y=>>"N[^I9::$ot=4-'Q0L!N7Z\.RK_C!k#=
%=fQU)RiT<&=K@0;=Ps^ZdP4Qf/fLG:of<skc!gF[KL@r]q:im[/@@A*[lqMiB<P?YA[bl9%6=j<e3#QR>:Oj3\45oc6d&/p+&u'(
%QjWdq&N1/_$OD<c9=mLZONPVF5;#s/(bPakGD<[g!:P=P<i4tmN0n`@@H+BZ2\sV)&gs.&iSq$cX7=RaqZhLD50(1b&Zc+?8`t0?
%I'U\qcka"ui6fos1f<!-3R8KN0$fn^.4koQFh.8+-Wg&b/oX"GS&=V`<jO+erh^OH2"V#]EK4IN]4pP,FdC2"@[uP<!_X/#Vu'^_
%V>\*8mNYQ3PV:sW&J,5p9jB"c6EIE_HJ=at#ck9S@X1r)5*H0kin'MB!t(5CP>8Qs<U:a3on7G\;!Il=idZ'X,:dNSq>\4Hcakat
%&h?b7=u$H8F=rKU/(N1TPd]o$iYaNk4!l=IbVSZn!`4h5Xol.\[]Ve":fT(D:\Y'XX-T9"J-nop(-*>`"(GV%Dppn>4N5Z8+8O?e
%Qj54iZn-j+[?m"".2S&-Gkh%abHatpLX%:VLo4j51(e!=FP-6kHT^+F;A=V,PG);.0'e^$rigUgI*)7qM')<$fs`YTBAX\(,Me,l
%;Uee/ORsgJmAU(;?q\8XX3>@9nF2f?h&(#a8($5'd-mK):q3EN28[%[nm!Z,_:_kN^SqOc=:Ka5W6u3m-%L]HE!Xn'g5'C@Gt`"F
%0m-C8[<#"DS<D]pUI^r2Ih+D!]!^%D*]]Z/\.Xdo(euf\QGFqM110VOhLbJ3Q0Gbrma/id;BO[!K0QVbW!7[&p9@<i/@?>r?$!7-
%Ae@pj!6Q*E/>2>BQUthcA0liUoolW7W]"46])(SpnK8[TFdmKUMXu.U@8E9"^0JW`[Pnc.[Q5?j>tHLlDEa,!b&("<"imS&'Xs2F
%bN4bg]3=.?>llXoHrl@I8^C(MDSm%[IS0Gb->\0Pk`pf7N&8%`U#@[!eGUaQZkpLRb?;]![sLe!Y!#73'SZ76Lp>1L0eTJNXA72u
%^J*t@LIAl;r,Hp^+Z&<Yhmfj,P*t'1<(p'E.hqKZE[j6t8LHM:'q!6D?:q/\C*SIFK'j$$^_+-]^4ghaj+W"g-Yo[B%n.\:57h$\
%m^3ZqMpOMjm4cN>YoR71*h^qYGm_PEk&$BD4nG(!/r"f;8c%,TqXj$Ecfc%0%_MTNP*UH5a)^<G%7uWnj;d5*rm\2gUu!O$3]%[+
%Onb7dH>d6i#hf7n[jHNC=&D$.DZ\KNLMfCk?mHi9!:s59#eGmSHefI>26K.-in39]/[:]k3_m[SV8e\Hlbu*O\sPeWc\?YoA<n(L
%r95^_N@IP3j-KCZW",Bh5UMDt>).Nu1:M+Ld)"XEMR=((/ioOMBoL&ul&<i*OiD<oOcOYjJA9^?eJ*<3W:\dr?UB)61/-[kA!4Oc
%PubArTm51"4I*,s>W@oBI^TYI1:l_f=N2O6F_#=o^9OOR2bml<Ls#,qecK[fh'MV<kDt$hckVa#0QC_[,ZIpX_G&N=P)dDI6a9X5
%*5q/WhW<9Y1,Nq1j@?%s(b,@R6"OGKPf&cW:C&o"(h[7bYdLVD;<-4$YDNA1h.!dCUJt#a[O'R668RZfc,uaHGOP<JNg)Y:*f)!E
%>H8KgI8uPt+DKhTR]/<S`p)3PL:JOuZhZrY3PN\t9@D^$l0:dc$b.Kh5m5)g(.[4."ps"&!Z,gBYP'?O<d("qME<f,(\S$#at7pq
%e:J(TP<!ToB:k>.0E*sJ3Zu&'mLhRkD4DhhpZp@<eGrLS$C<5B!,"l,$e[L+%>=O71M=BVYu\*aW2qI4j6J-tVpo6>kc<O6HWmJr
%NNFR</XBW]EP=0('NB[-N]0jN7'o]i(Fc/c4MY`VO3m+<S]pRINY?>2*sT2GR0]CEbURJ6AakPUUcfqkos-s+CL3Djn@>tKZh]dZ
%k;+b+ACXXs=!_=8Hj+Y)V7WHW.'OeXknM#FEF*dD/Wj,]R14X5>pnjA[].9u=1#\?O/!5GeoGR.!B7:XJA3I%=88(IU\us/]SrC*
%)\/'@KqY1mq];PU[:o'X731X=AuV*>)F/onSC#cDO1/7A/@bFTI:>s^#7P'J(LLfI%*SE&*8nt,17sd0hI?4&1^'&Q`@]_%<s9$6
%2<rn$<j,u+KDK-(!;N`C*!-EuloJ[fl3p]![2+LGF\4q$CoSd,<g@@CpTFKEQTMKmZjVE^Hp>o+c+<9ibZGIPBbMP#c,VtLOks6P
%1QeM"BEl>_:"Rf`LK(#A_<<GQRpE93"[ZO0Wm(RFiF[toXMlcA,(!:p*/9pfA+bcTZUAM2&B!blrH*m-T]K..Fm-;H!dos23Vs`d
%7YT'G/RS*_M?JKHP[H5.$,lbKMosSIi)U,-c]4mNjBX6BZMjhFTpM[`P#dX3Ml3&R'k(^SO*qYNK4[Ln#/p@CG=`O?D,Z>,S'E@>
%-WmS.N252[/B)p-q0[PUR.mXuHc[Te[CD,Oq`a@!hehZW9$C2j"Q?pSH<F]bI$Br-==rVjEUk!1<OV@pmHSUKD;_nJS`DW;+qt1l
%?74kU+liKAG,kKqQ-W$ODlrmB\cT;>MI[+RVpsF/Xu$`,dGcVW#Bfp4&HYf5Fp$Q:=au@lXFfdqqjl_Jl&[-sP,]$LZeYfo4^J#-
%Y'#9&:"GoO.u33_-&OM5?!(8hP)DU*R[tNj`tSiJ%]lFs/@A<5>Us"na'2il9+*9%IZb[5H^V^ajE6LR=U@2-h^2@M''%:`N<)l!
%K,ugk`[X'@d[OG"$gKc^/HWJjQH(BIFQ(&NmrgHj.3(pG[!k<IB7gi%dXlj@XAZk+8uX1T+]hh1f6<k0Q`NCQjmX81HlTZ*(mGEl
%_m&'R75ttA0JJ.q[:b9#Y;7S2<Z@8Y:555EP0T2Q;DY,/8ked)`oRKV>'7jM*kqJ3WY$KE\6j7J&PM4XNTEkA<BC%T/"uH@3]bqG
%rgjuY]G\dhpbB4!S;3#r:oe11s&.1g`Z4ZgDQYcE/0[Qef(PKSQaFN:gjK=361/!e593Lg,LdCs&uSi6c%+H)#7Wh(@QYfE/m9A+
%fI@te5d"nlFXJ;U76`i"oWWnci5lb9LUE-sf\NAgk=W33qSRZu:+S;G5X6b;MDCEq3f;;'OhSN0QYpj*ZaYKfR=\G=D8Zho<M+QD
%0[!_A-dWODU4S^D9FDn$;n@K`cpbs3k;i3a*#n3ggOgL"rUj_jZn06#?E&6KdhYW,A&![(1%``"9l1nWgj!<!>c<h,o767uZAgRp
%BEMB^b[hDAC;J_;ni>fm4$#FbH.!:qpW_YrqRR%j=%tk89VH&BM$(KF522@R[%u^k91EctaT7EQi]@1up)TeUGP5PT)IEF(C,$g=
%Y_/T=b]jPrqG2q?,Okrc$4iU3fB2Tr;O-6?e.aC5`h.=R>p'KtpE"Sj42c?>(Q'/=)J.8Q;Tu%Hb4.N->(TkORtMkMJ'?tHdbe9h
%5(`^JC8ScW_d5(FPpiu.+h%eUXkCX1EUKoMgZ=2>1*M1ad?Y&YjZp6'2,_Um*innaMgrll%X5X0E$%>Lj`X8S<="]m]A+ue+G^RZ
%H8e5s1E5BH#5V,@S!Q/`;8*=\lrY^]^Y#P(Ojk_90<Z?Hc;]sb`arat<Y!DuUc9IaANgf:oGak_fYXq]#/o3Ebphr?m;l"uTkN%`
%(%?%:j:D?Kf,jQI75!#QOV$Wl*K,Xe9S"Eult@TRC\Ge"^*NWe,uIeD&tq.Dgj'mm9nsU];n(5RR><2b1bq-,Q`cRu2GGT;H+?d?
%HC>'frns$[4h^f0$PP$Q*n=c5Ri<lQ/Eb-d"M"K]S^F%3XAmZ%Yq83="*SVX#ZVE)DE7\5CFX*NQN^Z=h9h6<E>XMl<2)sh*4m5_
%YBIu(23Kt0-E.,eQcPM`^UM@6#Wi*Af>RIf*u.FU2>S;.q#Rq2fos)sENA&)eu16Qg*S0O]TU^Js299kOd@<t,tbNpY[g,Ie]Yor
%-fc-,C)65'_)d[8#RbYm@DsjERo8Xu2?Z$P/5UF6+;OqAi\lDq;1BNW35m5W7>PHp(sO$-p@PYib.JT!k[HALBdP;X-%8^Ij0;$V
%N/KUqXp0RAMKRS'(82h3nY5P*!ZXuAN<T4]n.p0/-^mu8Oq[E7XG97E6T`gEK*'L/k:'YL8T+pkQ=Qn&igcU(q3^o3[1;pRoIHFd
%EGI9[7A/ZH/(XhC,IWHT7PTBRe5eDP5hH_3(jE']54dK;QA^TOcP_2#"iC3VK.>)"B0KOFM&Ug!7[6shk=K>+ePb/D9NonK7^[@X
%m'[X-.VH'K;j/_f*h4tR&t;OT5H<GgJE@+Q[rQ0U\B!,$0bNQ^)XB*O9dOE$Q-6)4^UN!H#f-SSe]"[q!@<)!`h8`OcS-qbibm-K
%R*@Tub0%*Sn$G/JOb.Iel5E)An>l1f-,V\M*X*18*Q)6er](cWS5Q?m9W1"mc50(`CL'f"^"91p$Es%^lAeuZ'6$:'QU)cVeYN,k
%j.g1D8"G+g^bJ>(F<GNhS]t1L<@D%@.B;TXCt6NY/sZ#6Q])pjXK>HdbGnR#5JB7m6fpe@F<4nNd4b@UjHjngFn6)<ra$XdG*]H_
%rMjd%=l]9Sj%?o'lKoZoM=QnPa,E7NlC`Wmr<KQY*eaGCY[`?OjsiMh\gf,XV;Vg7>T`nQ8<YS)D&HLo^m=(aYLUSbjsh\F1rnHF
%!d^I/iFniWQA""H?+Y#f7GiM#CN2CRl[Ba7%%Osmc82iEG.X?dV$8qU)@*uu*Sh7'%D%C7e/qFS1Yp6qlOj;mU8c1XLD+nbr@sEf
%3Ibt8qdFB]O8Sb`j-]G)^\t'sA[J_4KI/3['HU?'gHP'a;aCL5GKf/588>-B#pG.J.`Sce"bmH)d[t#&.,5#eCO14*j]nrElqV.%
%6eN3Oe5j(#1Mfb%0`$U0.*HO?6#TV=l8**Z#C)BW?=9PI^F\KoV>[g2AEid[(3n&LXm2mEVuon+N'CELSQR1_esF=Q&?"2ZY/b<Y
%Kcu8\mGVf)CiQfT41Y:c7pZM*;]u+0mB45"?/fXKPs>$A6*TXC-'ljsMD[4B<;d/mA&YU_3*q`5M"$qh7mMBjX"'KZjC6>Po\1m,
%S7CM/e*r@O=kUo5oZa1>Sc#k*IM)4ed,6o;'F7/u#C-")AY>*ZR?M56J"mjGIG5g0oCXB?2Cb8<;8uD7kt5G7dak,VN:(\f+=uS_
%$U'`"RdM.7XmHosOSE/Qq1GI>DcZW4#4J#8kk75bE4L>T_uJnGe%M3GKa6dSdaJ9@Pl8c+n>(6Fk[,[V+@\LG<*)h-Va5kW.eqMJ
%"q4.Jl]iMs/:hGM,0]$e^"i9]H>K3aJWAbfnhMf'3e4$]D1M\,<8IUiP0#N",0A@?HgC(hWUn(+Al!V!3uia\4g(1o8)?d<b!"`%
%Y<D]OHe[^79pe'?Fl41=?7SP?::de\@`oMt^onG0nD6Nr%3WHV>XHb2NT;:h,9O=uR5Z0j7[.\L=5$%q0tD[;lEE4tf#%kPLbtjb
%ae^IGgAKga;SdbaI]C]_8^J'$:!D?gr%"ZRp4M04LK;=.i+X,.lX.X5Dbu25_X_7CEi.kGhtQ)']C$D3"S.q7n*,e%aU#*"L/#F'
%$J%?2g]<lrf!a7kecX:-9?Tqu#rO&Y*O]C!)d"Yja[)L3++lnsaXu"aFq@F"?u/s>m1;A9;sq#kiN$e:T!UX)pb5i_XbQm3f,$l&
%P&5`DFkE<98UO'+HQN:Z-QE_;^ssP:8M(%]h$*Y*4@*(>+=sfR)Pueq6:63U)9%[o%8PG83_m"M,77l10/`-qG)R8Lm*o=8irTbQ
%HJH0YT<ET%#'QC$EQn5`j.j55-MMN!7K=nl"N*<^WcpZ3Q*kA79SOY+l"B[N[#$0SdA]d`98u)Q\H*_RADEJP^G0UZ]Ba-K"Y?_i
%3D+$j-`Xh2k(PV(NSM>9Wn6gJ,`"pEduK].W$)Y/g*j:EFe?Uk$(iu=L:g4RAg#2:dp(s'g*81(I!U<==Vq^6Wu"N[]u\oF6LeML
%4D(cmjC8]1'(s^(5p%6t"eMo2U3N@;f`XD1fh?G!/I[SH>?QrPVm2ea)m%Z>\A]dKhEAKI(>FY>:m4m/iE:_RlZD-oY#1Ie;8^Cl
%`ZcO,JjpJXT2\a6rcM<g28^,c:b#QLA??9*Qk@=j78d5!&BOAqcp0#iN4Bb>d.3&G_]%:YCejdmUZpLYK\UA=:j[PK]3piQ3\G7#
%m>,IdJt;kQ-=k4I-JpAGHmoeK>+<fjoINepjd!H9=8+-ubEF$;U(\g_db:dt+BDuF[>lLO&CWFALJ;]ZN<pOEmaPe.NQjL1PH^#S
%^*m>fj9dS7oJ>B;]gk;UH[Y`DP't,(AI@<#'X1"+_s0Kq@Y?T!>^3oa(gW0e6^1@)hmd8U)S=)]!k&YU=UHhk1E[^&]mQ,$UZi/b
%h=*`]P?>I$UbmT,?t[NOSs=M[T=8=V#FY;5_LNXSd)g4Taj3#u6:V_Lfd-j5=Kb*iCY,$dU<^ZJ#q^i5g+E%TB/??%LDp^:@/0Ri
%Cr5g6H+EdL/@=AST6Zfr5CaXMk4%$.qD#(=hXH?_m9:Y6_(rIYl"EBiB^sT"R]N0Lhd,_K`eo0'-8r>&#,(Q1*HA=W=e3S\CCZ,P
%8KS38i.t#"BS#iDUtrZ9+Z;+\F,^t3r\aVC9+S%MkomN!dJ>r#moF;qg>l!:[f!"b_k^%bkJ7MC!F2RYX%)')Z;Nbl[c^mZV>]@9
%`Cm*D(HdFg+F(=7P>CKX4to]n:Vtk+UkVAmPlU=5s0NMGIfF-,j+P9tFY&7bDtiS;k/nIO-u6jJ,%fWkC-*0"JeDI9%`f725[m%+
%cY2LHYlb:N+`njCH_0._IVsl/*:f6P<spmI2'],Xr(VoLYBg$ArH,bdC%W(6I87/S6LMQ0;_(C8-$q)r%Ulf=;T58#rPI18@4,3o
%I?oEH_oYKMdYi^16_!;pPJqPH`V.&fohW/ZdJDW"7b%DEl`[m#\I0oGqMNqtq4T^glARe>bXkV-psi'-YfW3G2?'_0M'p-j"TYZZ
%)`aMf*_Q7G:/E1Z65D)t-'k:mZ+O$i0cm2@Z4s^\fGVf'>[ngr^l\!Q_(k--?V]kdl-J\uQ%6Aup-6Ht>\h?]?QtlI:tnJgb":;B
%1jMXS;r/T41(_jN:SQjo^,`AT$')7IX:\A9N/OsO_!M#\1G$!AdN&fnlQdui9QR3Jn7/ku].K@*G;tUjl6fqPmqea).r\rm8D>,h
%UVM-_:Go9e*m+O\2oG3"-itk6dgWg0Qa9\]RSc3^3:Ves1EJF\,E/mroXM`TR:1\..5)DBg%!]%:3)]EQaFNX3p7[5+iSFNcX:@D
%@5>QsGpA!g6o>j,#nMr.TlR*a=Mmfb^dFm*d;h-dk&tG&3mM;^*,T't#jZlOpuboN#_O&3\jG`QS&86Th@Wd^D["+-ldZX,=fh3S
%akH^tiBk*\5\S]?CoXr%E3#\bjILVS2Rnf'(TZ0UI&9$N[Cbh#[srCNd,/$Hgi5:VmfEDf<^$LmNG9%];6geg4dk&I40804_F=>c
%,("J/R\m9mVGq>1MId='Z\1mAp"PaX2\F1;p240ILKm$>rF*6(,s\AW?I*,5h3][W4T/lgJ0plcSPnVgVs^f?]rdKafmQ:a)bp2c
%9M'`d3.lUJ<]f)D=LI0>*Ign"nUT-aHh*+X[o3.Nbi":$>cdH$AFt.^8i$i.B>VIK'2aBFM,s=!N9'b66K^0IK#9N*M0.'Hqte!*
%^:.VL#XfWXr"9*aWdbPBd9(DkQ3P)`KJ\EV5.9A"l)^=hQ0d"TC1+SE@&\9ioFlY':`u,<PQa'kSr1GGeN`4(#2n&UYO@d\k"[DS
%mWM\elXMa5>Ml;W,F5M'CgCI6Yd9qrN?4J1kIi0SWTu,Gf;5l\`#d9rXVU1DKiK8r&::i:^OWTeaW6Z24jTu3L$%sFKkVQ4D[G8E
%'i),A[UNO"W+ZgH;d1Yipt=/2e0e=X_2P]FHp<P.mrJhV"tf+fPJbFVoVqFT.Nc"r\6ho"2qR^hBSfkdTuTp5)TG7kiFc$A)5ur=
%X"DA@%1S^"MegpVP(MTj6aHL'5cge';g7n`h3ieAr1fd7_U:/*7D=f#]6WU@+M%<$fstObEZ'pt]en;9/nE$Q_JS%Joa4SYh;$+h
%+n;MK+/R'TpX8d.qq6@8(&JR.KoVbZZmER@s5%1+o)#MKO:$1F*K5Y^$2H+n8B1u_CP&@)hU5L0]&=?f-`DG6]B]L?,pq70`BWN0
%efh&qa/M^lm@2"1Bb>Dg0gWDcF%G+kL8(J.7E&]BLf;hI4f0M6*Lid"'%%>7oPRb``ojdK\"^j=H3HL$F*Je6_7C5-dA?q0+iRXi
%K+Sap[)D#rNZRI!Umka+;eqs-]@D95\#*p-MH4t0*Q\AG`)nRR[!Gj.E>"3BSIdndEK;T,G7'a&kOC"_%kAK7?mOVGJS6b^8S\,7
%<ha[/N=eh,fFTnOkhHdKV[h%b@H3#8/1%Wk6M2[(bDW!nc)(5!%E_+AKM5/;mTD1h0KG/PQk(G&;e?AG@UGk@.SQfU5'$$Q7sk"c
%[.Hj%X=1C.B8Gtl3H=*</CT*G=Mp\QhsMqXBNKB+S3>4]Y29/JH(6]8PqQ9in%e`B>gf3mdVK%8Ug*6lrO0QA#Pq)AYj'G&r%\[p
%9T;HZ#+f0lPp,!G*D"I@B'dWPTc<^AL0#a-l1O&.FJ/fKO=M6J.d\d/Ye'!SN3Hb[G>=b,FA*UHME+0EX'S3#<k>W6-.+##8'OC%
%5(%AoVa9#]J:5-#B\LjWh[62Zr/3(`o4fsY>^UX2Qng`[;e)6OQ@g*X<WjOnKF@.^_9XpOP7%G*8?sI1W&F[D?0:Dm]h@0T9&l?Z
%3N6^'aY>C1BM=5qplNV<Ud$JS8RgYi*_s!q-Dd[&Lmc:(cRgJ\j[uQ1LgcbOgTG6`Hc5<MQNeWi4=!MfW(nO.bhH'<m+&HurCJ;u
%\cfN.0j3g'XI$!HCNK,nY"k`<L9&Id(oQ%s8>U6FMpZK:A!5+e%K'?+l>7[m0d3!8E\("BVn@HVIQHB@XaQ$'#7:fe^n=0Masid]
%H?Hd!Me;O%-,<.Z,F6B_Y'$C"Idq,#)^Yr*d_J+!.>$LR>jO2X?Mnjs@]5d'l6g'CmI2^EdUe4g@n@M"`EX[^cE:Y;[^;E;.t1J'
%Tg?t^!?>)[A^l:rRI^Ch7b'%$4H3eQ.`8ZEi9d&p(O+6VB:.7[2!T%e2?H<D#hqZ'*YQ!`<b>*Z-)aU^&7>E_PEqtQ3Ve6r\qmPf
%mW[I3Yrfadil7Gq;`!&(SB7\)5F0N>:_kfTdS:g(BX@'(dd3b08"!X<.tXVU[W9'^,Z_,8Fm0Bt;U=g&U5h)46/,-D'C/5M):(5S
%$?2i\qB[pQgf,bp1;qG-EZ8eP$I<bXNIH\lAd;:CrC6$57#G*^SFN=&`Ih#6[#DtB-KC\<gT_"J=/g*+*N@[@h2[Su^<beK]&28?
%I>FCt\)E/d:nZ*^oB*X/_k#FP3XS#96E*P$0pFj)<^WQA\nm"$`:bKbR*1uX&r'4/l[ASLp!:1in_d])p,/UnJoKWE0!(GKY)N$5
%)WVQHf?l/4)*cjI)MJ2g[kh1XAf+Q%@:7YYfZN5R-'8SPb]I#k[qG<:@q70OT<-^nU7Ph3j'XZqrhRE`!&iHH];YolJG'fC)S<N3
%;@KL8oUt\i@Jd8Jg)fh?j6NPLbLikc,OI*Dm((mf5S:'ZQW-.\rGemHIl]]kNVeSfWN!;;YYVnDC>HqID;R"hM-idGWJ(L79YFg\
%F`,67p3HIWQ<nR;iQ[DK[.#9'iNH"'eRU_On_q2c2XKoM/D`,ndfG\=p6"md=]Gn&3gOai"ELD3A[S<aW@Ll;>PGV9^q.lYhfQ6G
%[o_?m]m:T!('9/]<PCgd@`2fg1AR=/pQiCOOQe(0mpZIeFYFo\Yg@5V&)6j8W'I7q)[t@uXt<5D>64b#BFVNs7H`&H?:#[\:8#.7
%rcmhV\^$o3DDsK3`E(o++KEiD?'ql2X$tVX!21:3N?5:]a]D(3VE+m2#3Zdq5,5pu,P'LYW!D]53^\Ic;1QSsjl;_2E=&RpUh'(_
%k\FFL<Gb(3/c,h4:lRS9PdDnuoL(u;D-_+PD>#=1J(u"e(.?XrWAK"U]MIJV:OO;WgYo'n[UC"FcqJ4=kOC"_Y@*D((UT>-@2->_
%R!!5;!(2m81Una0`'Kjkg^\N?!@E\da'/OV6!!oA,F]/%+U3A+gga_;R`77dP?N;l]4NXE3LcrRFT3?aAf%R@[qWAV[psF/_mH5;
%89RW"aQKi]TZCt?lE>PA_?lnNT2XTRIn\VKmj@Y._s$k$3s@*a>%J+o.le\?fh/)=mbl3YJll,jZ%()c&)1rJ^K_7%"oo2$!Dm_H
%<"T2)=[*20e"`u?GjWhfHi[4nfRKc0WB4r&pN[QTW4%.a(9SZ%3]"2sg"Re>BnUWq>Z<[4MBs]l5tBKN5nQBVX+2W3cNmuM_AXsd
%?b%G*Hgb/6[M,m`j&CoL'(A^R8=F6`6Q*%_7mLusOfsR^OQh"9.@ISHbha?AZ4[EuHCUn!e]jb3j,),8n\19TmkXWG't^2Hk@67h
%e,HS)!NMt+"u"X&dG<V986I0AVRDkO#KP;67VW*DA+"XA[Zmg'OCW<FhWH\c/QIV`6hBR4p-Kh`la*/R-[DH!h*$-dS3'V3r3jBa
%2L:b#d`ao$V^.hF+Yc@73H_,$E`!<1R9iuMW78b.QuYoi'6/&IlIVBk-1:*noD.5up*%L]YU2b@b.oXScm9\l3.'_1OTm8Gcr'C0
%,b?,:7m*PnKpP_1HBi9`<d,CCX)&,p9IlEFICf:<>fb8mhrX2qqRhK:e]WiS@Vs[0o<#LM<l@>VE-'k)YN@hsQ<ISi!60^--ZI-P
%Moom8*>TFoMR0q3^'"jt>,k4;;gs)i8P/YgqHSd/jDBlZ/ZO:u38Q\2C4TfY%mub\]#+;kDeFaHlA)<2@Q.b%ZA?H3(&d4]WbCAL
%($J\).=6ZJ<BS%E./P<[O,8?gau36B4XDhdca_b:&bRb-[s0\2k>*=C4nA<ejp44/H'm"5W@^MOjXC^5*4>D>J'$a+D3R)$SK8Go
%kn_\]8J3M`.rMD#n$#9=F$)].2*!1^8<+SEEc]1PB/rn^@sDh8fk3YX;S2?ceKmAN.>FXbl<eA^%D$=&[ip73c8]T'i:J%r.J!7s
%o!aXLj53e?A,IcLn,E;!qIajBi@<8%oX@]!f\t6ZR$@)@E1R6ZY^s)\D*_66\&/DT2@FD^0G(dKC[WU=k=2QiI'eSuC1jNSTmu.j
%;^O2ghek:$F0ntn=@.CD=tFbqRIB*^]Zc*`/_i[4FPFbaVg=dd>>o4tp=:7"DL4]6jp6J;N"k*X["f[:DL^!c\'AraZ5??"X[dbe
%]C^fBR"B/M]PO84YU'La-(W$86JOLV-`<6K>9gn'!8l0Uc[EE8$j;qS4_e55L1Cl6-BagtO@Vdf8Ye*H=N1VJ#Z"<YUn&nf4hO(2
%)n&/uTM.qb\I/9F.5!qZ.B(7*?l?8,"pg]EUp'CT?iD5pr\bmFd]MA4!'C2B.HfY@I]@=9_oC,8qt\b'(ktqnNr;eFgXi5mg*5QB
%\sER^j\STZ[00Vf!J#Xtoh\;YqPmS']H38RaCHKgh4`o(==j*'SbqV6iRhp@GV'QJ4=C/6d'*.jfCK+;^LK-XU;X?d6^O-<6gBuj
%WffriP;]IUYluZ>=(VmQ`YgNBH2459D>te=%Z3gi$F(HME!WXlVRc^&U[_$U9j^:o`iRm9$usYU:*K5W$f/BZRl7qumk.q[;2@AS
%=2iFkgCs-VmGY8pWOW?93H]JDQC^2PDf`$r-5*l1>H\%@Cg2Uq*+.T_FIdu*MlR7qr"r%tkkF>r.'7S[Bf5LgUU"8n.C:`9)A-8@
%D&6Fq*tS9NSjo&`;SVX/O,rE0@qnc=$;In^PDeV:&sn<dUZUHp$3>^IgT/J6GLNt"83'u%$?H(@=P`F@\2LI'fkXcq`G<=5\HpB&
%I"d#klT(9r'cJAKHqlJ:A_Sa.OK2q>8AlU`D.NPu9V:-kdb37(o/UZN*N/RSGOGf@hL=OD92_"A(tV]qKB59qpQaG]f<&%^WLcsf
%g&_)g>DeeIA:%n%%>Tid2+boX@m\,;H7knf3N47hMKheEbAu2Y5f#I\4^>8T[G'TXWR8(VB5orQ67ZBE]4dG<fh@g(Y9(%'/R>tj
%dZQ]e%(F#WCcAf!Y6hV4OO^Bco$b<\W$0"?E%0rVM54Kd6PV<n"%S%T,n2*P]nb82QgI$MF$k7X"]D0H!B(Kf6]4<<k^[hKn:g;N
%oI#Ea9Xn8+mn.K0hXCo?nXAI?Uj?U@;@s!2`X;:HoBiCFXED.n.04B$H)b;Q02D1p.V=$prN?aS4+#-)U%Vu0poQhdK,!@NV.R^P
%]qH7M/1e-,#D=HIXVEnI&p8%F$eUd-fK0;?65cY(*k4g(X-Jd1"ui22pTIZuUPJ%D;_`34<3j_^a_hY6>U2Q"-keqD!\t<8,MPJ/
%+<,?_U_C@)lu7+5BG!+M15VPc.%IaED*m*XrSD&Uf918GWUa>!,hT:F3%!tNYU.fbCs%t-(QWlV+WOg"(CF"QU&,(q<uR[aQ\QrL
%l:%Do*R[:#?4.]S&'Z!7H<(t+Z-ad\2D&AnG<8sNqW+*.D7D@sP4Q^Q;uoP-[kQMn,(7\I-r[N4V/Vhg^3[%o&t_-;<0>^.ajM(m
%'6%qWVQDMsb.rlDQg[-Z):.'FF0<ehUX)"#S.Z,RM,a5W,bY_!6(B2=-kje`b'iTN,rD.f(f>\iX)D]bhO&o@&XC/c/Y'laj@=Re
%i879l6a7N_D"EID29Hka3fV[;nQNq[8EFp<h`=!JO$F:%mHg.]\i.*lO'=A")uXb?L3<B)`8aRc^eVj'Ob>tj$dB[rPEb[jDsj(S
%J_e09Q@6[:V*F2oLBI6,Tmc>D[/lZ]KPg;0bcKH@8_slk7D9*Z><opI4^pd96f\[%i&8,$+P(<&!uLd=0!uF)/7%'mjd"EjBM>C0
%2e\A343tlG3A+3ja7fLW-0#$U#o;sGI<qm(*=_A-grPr&kKFirc<2+<,@./$%tEd0ja<n6!QmEdf8,UNCQ&[-.st[dPM6I8mNMVm
%<5)uCELl,1XtQ+JoXFFHmIt&/b)-<[RAE5H2#CTla`g>$0d@!4`$Z4,=u$*0TcPL&M'3RI3l]pfV&\@G48[_fDG7KJ]Wi>$g=/HL
%[.HP0^DZB!-$AVk%oVtSAd](_q:U7W&N.=q]3KikKu&*dna8tD7I;]AnhQdG+R@$P)S,$d7)%g]]nPlACh^\$kh2sOq3Vb93&)u=
%F=2+2)sICHO(O[sD<JgG1d!>1a*)]>Brcg\41'"a1=&3mZc2q?l/J=VW?Z#(=oG&2hVam@B^O]2<OE[uGJ:I>l@`taB4HZ`Gpd7R
%bJi>n!q72W4l%'(H2)]W/Z*k*_ZsKsHT4XB/u'bZlFBfijOibPO6UTN(IQ\GGgZ[](P5k-n\D:tPuWkT?+1Q[X2s@'cPn<tiAPb;
%;d"7+M@:S/=;j1TF;9OH(neP;K7pnmVt)/"%ng3+9Q,q[3;53WXiu51Au\lb,;Mg#GLC\-X?f*&7TQpVUqNlo2d5k_ho$W.]03$8
%m\?<@DJ92Li2$7_=BBll;M9T[-Cla,EbX\>RS2k>N(kI9**.F1*#Y[49Imh3s.FWrSh.<kTqlQL5!&;GDs*kKNY&HQ6\2aGcd6J*
%>VV`=\mBI2`O_tK^UMjDLc\=8Jp`J?N8!>Of,[I_/aCpQ"Q475hr+I#ZonX=XI9^W_KHS?Tsaig.oDDC!OZ<i]BY'Q=8n^?>m"=c
%eBA.o-/T]F;NutkdkQ2jX>\Yh>!HoYkjY/"7@08e_qsL<rY&HA>&%q0^3ugZ*(UcM89J!m"oF0.UhE[-b>,$Z2fpU?63I2(?TdI>
%@R-$q/35,aRFo6,gi1fQS%QWs)`htb%;6oql%C#8ik;Nd&lf0>KcXqrL13B)E*ZQ)U0sOk)K_=iQb5O!=E?"<<l2PhYRKb47[Pns
%(3FIto<DN'Qr4,S(u^.>h.d/B1>t`]mYt3MO&as<kdn0nHcsj%,Y,W7in^%0BP&O1[M;E]pQ!-fUHtgBoSN-_L^ct"l<27Nl.b@c
%bagZ;\D0;FOs9nNLOVL/@(9QX*HumQ:WF^_LtE[j]6VqIVo4u?"pDs]bSb/cOnk>0H>dNq&18D.BOhj22L`-D=+b*Yk?2AK)2VRQ
%FOTejQDdW6p;$&HB+=$'_T-7r_mlhV;5]ij/IjuF9Ip\Nla8t?i^asF(-32-(*d!qh,fj:==GT[/pmj.X9a]%ZCSsOPW8Bp)(]#3
%&_"0*O"_l0q/pJr!-T,5ndt3F?3^"o^b.Ct[8qoU`\S.4Nd(5j;2*pE%si)AnMNm7P7,?h(_)MY!!&"Y2m3O5Ro%17/(r?//f5&'
%DB_M;P;T<B7=Ios@5;t'B:(OW`5^"3WI3"e_n$,)Y8qg@E*k=FA(:B0@qi%d$/A94D>a$:O*-f=1.1k+Va_)ohb78B55=\onY[,M
%f[.l8gW=1c$,k`]XPDYah7'f'QdjEWZ8M]_Xd11LH<C\,$H/B&=WkY+8L7u.Bcn>?ks(Bkf(s(/T+2^5-5a<H1NJUE;]JkrABl0Y
%WKl*@74)B)rn]^1_n_YSa?#YSB0=$%fD?N6`j54UYjuS%NIaqO%Ci^H:_oEK/K%5rmlZ='k&1aO^dJ*17-COk(4KSmrAg4Tc@V&Q
%BJbDAk!o#A?S]KWPu4W@T/Sjs*Al:-],Yls8K*k_jfkl?2"X./Sblur%YReB7>qq_?[VCuH`4OG?_-0?c6/UF9,[/<7SZmP_-]=g
%;pF)c%s:'eY^r4V\4X<qiCh$-`\Jds)u*97&VDN44HrG2@he_#l:&[P2'P?LS.5t^a<toZ+"_V!k40hcO2kNS=N#=:/aNecjbm>Q
%R*"V/(L&5h,$*NS`Nh>']EW0[_lJDP2L`UA-%`]JCMaoI;0t8*iYbT3&k6Br2U[[,$tq2<DRRJ*'['o\fKm*14q7?q_ded4D=K0^
%mgb5H'iurFrmg&77(>n5Zu![LN24qNDN$:OdMPV5]$2'YSj8[R<W'lj1%+J8q3(OIQFi2S&cfXU9.Ymj9%,Fa(gtX#BD%rn3s>"N
%+>`0BBjd$VB"18KnVT]u^)F2H[brU-<j&+O$ek<#n^"c(62YOMP83dFkS`>Hlt2LXkk9jg;%r-5+?mtp$2H,4TQt,W!=ZQP+LYm+
%4p\LV\#HVYPY2?G!AC8#8!-B.;ET_3?bNfF9$+ndqkLj"@ght:&a&bs#hk&7?pEctXA2'?c1:pH]IN1PIl.?hqI"d`Wc,:7N[g)d
%:gU2hCeB4'B,#id\>G=I*U57Pk%iZm(-LAi?D3+Xc/*-`"J#3pAo$K@\!D-_^^Kos,cu28[e13P.#WfH6+Eb*/Kui,H9-`HauWRU
%GXtRJ18X:2(Y-l7W3\QD;t-An8>75bBn\$%D9G9p0j?e89;0beR69_O<9LNE9/-I%8<*[GD2gB@*nffA-.[ANi<VZ-VG5?(1F*rQ
%SB][(^UN-L"O2R!na9teiYW@uiDH$Y1Wmd./GEI&5uH/:6=$OXbZ%4PG;m%rC_I)ojKf7@Rb8*80BuKM>l/RpGF]igKAAVt\5<F#
%/[SosbEe5,%n3F["Y!P/Z11FnY<&.8&&HbZ;'/+kAn&.fY0k5\cRVF-$#l$"Q*i5@.%9BD),d2gdL<jeJ,30MT=K1dVb5H5<a=Q&
%QI>j?Q;:^nYH23J$$s."%rB#kB38:]@s4&h,[<So&FMhKA"-=MPKQ]:?PEFKZ_P'qDd^m*F#J^oD1n=VelV@MN4a]/5fD@^4<)[\
%_c^)iH%$Q$-#etDjW7@4L9MnpN>Wh."q723'-]JAgF[$1R3T1F\iO'%##T3'lHr6fW1;kgYq`]IYHcCPlVmG^UCSIFq$d5\Y/tJf
%11]rK,40A?#L+eO_Vj1:3QX&^A@h.4gpAi_ank<']sf,5"FV(t$9KTNQOEB=;'O,]R8?([ogY@@D7#1pfOUb#8i(I7*DA[t!sKWu
%n;OA8(uT#2&HS#$YPgI_7%OqL:J^pg"^h^<k?Z`<Jad$<K)7fIUD=5IPRoA(8Ou%AJ76L/0BnE#[>W_/@WP<gS[&>U62f$sQe^lP
%%_>CQloeTXU1g/6%FVg</$bci+3X!`f'_KT%[.1W\uf*:4C<-XA+5ALrmA'Udj-Y?Yd-0oT_7Mi85R#q<m/4a>q/!pjfonJq3q#t
%iZ@1-S*qLo5^43noe+BdmCI%C:i4tcPO5l"eEL%4qj_97<'T1MF#[VT-$r>F%d6noY9RNfWL7c:Vl`&1KGW_JpBX3s"e%:%;&8GO
%7M2ALG)FXu<%pAkr=UJp%d<J)8BiZ6E\ELO:hL\KDM\eMV7N6k[pAq!Xu@R(S/KV$b2Z.3hcf0^7qet0Ii)W3$`,k#C?df2"Nsae
%fjX%-V?/7K;JDTX]$=.W0W,XW.X;l-=_g.N\&4P`ZVO[&S-p?V:35-:4Y7%k&nI9I^'jP`G?pdrF!PC4*''>5mdSsg+!Hf`-]$ul
%ApP0;a+=Lf4:[m='&?u&8\pXM`iAb)h:B4`%*oV=(?$kcC^Y)"nkt-X[C,,`.YFoZ+BC'LJlbi6?S:'G>S#3Kg9['c;"+C1[!cG-
%/qukKAXo:dF"-4+1qmT"Z*AYfe`(:5*V^H^_W+BjTYZe<j=]B_amrc"C(K/9_1(>_h#_VaEj<+6D)F.,0pcj6ggsfjk1Y\k<@._s
%pj5sF_SQ;*1'?rFNlC"05digb<>keob44Sfh?fjk]uH#q>&#m_.g;>1VTAPriRH+W!\3&jP<j:c>^XP%?l<)A5Iic1V=HY0mk&T&
%Tpc3m>&2A%o@3,P$AqU)ET5lHRkIT)c%_"(#>5ecb!NAnbnj$W=M^<C,=H4.Ao#]jesZ:*ih(:WX4cDBkl=CqGq8F]G>Ss-8";*<
%fEDF>H?&Xm.6q[XE-%_5WgQL%D.uGP?k>.pG.`C*_AVf\>cC5Q.<g6SB%^RkSl8%O/b2k[V';3r+MkrP<I0`Do@cS*@qQua5[/=^
%$+^n#SZgXT5V%.U"oi7(Nfmf9J@Y*3U$uZr=_iF2DYTtZW*IGl8c-D'LDe(62N(`sUHi./8U"$dWckbji!P3_hP8#g/e4>;cR\X<
%HWLE.OH-?:ClE/8b;EobIPM,(8J%G]Vd+-i#fS=$>XZeD#)[-PUP=\QKd0*.-04c,roe5CRS(UTVE`BdIdS1$;2f2s.:e(j@<1$Q
%#J-Fc,!AEG2\%OQ'&`"'0iLcETbkb7bic(B\(H+"o)`.Pfg8ME"RNQrH(Fk.W^!Rp@+R;(qP,^HrK,4Okl_.2)Z@1Y`>R0kE,kcq
%?!B5%Z;FKY4'2HPWu[7QfrqmfJ\[:R`2cjcHh(C!6`k=NO3Q2,p$@CUajD$O40U&80Od(S;07Gu-^)bBqk3A-7,mrBFV/GKm1]pr
%7_tCjWrm*?]OFRigFjW+jFTG>(1.o`GU/*WQ#ETfT8(uE)K)B[PNKF:&r3VgCcLjBVp`$6F#+5;)&B]GGt\.c7rJp;I*VQ*9#pKo
%G,Fh&r<u8_2+iOiWB$$NbiT3CH^Z^k_(lKd'hQZpqLN?31T1,+UPu#Qn9)'I5n10l(nZm1iSBr@UM*ZH4:p\@#q2Ksf;&(jI5;=U
%)6Vap6`sFK<Ba!U-t"Enk*\67-fpG5hima]&rN6oFZMH>$H4nfZH(Uf(NS7>&f]S4cRIr7,+C6BIrDal@4'!Tr:lmN56%+8/ao`L
%F>t,IgKWXS(*&C?B>"\2!AK`7Nd2-k!-0iXAZ('J=)H<6-cm)*e#C$tOAJlH-LH\tIdsf>R$IocSM5Fs+3@B[jVd"mWklB_Gh.+f
%p\87*T-q7!ppr$<W2S1/V.]RV7K)DXbB%pP)2JCFJ+1jS>a_;p#%MERlOlI9&iqg_,_*MOi/JO)MtkE$r3t:'LNd^,Z/@U]dM:=r
%]q__bGTJG2iZFOtjh4:XDk(EY)!F-T6Mg1cQ550;ZI\,$$UA1%6/c/`;MV$l2U!DiU>^AO"6;b72LSD4Hf0Va:n\W_P%P6Z=D#V^
%2b@*Wp*+'3@+tJL:\Hogo2$p@prU'!mJ5UKDNpAQYrs&f@g=&3qeJ*[BD&$)^C?98\:pV`=Za>M=_=<X;K7;+H\cgY??=?`b-rdK
%Ebs('?7G<"X,!Q;LR-%8*XlrZ'p\tSJ/`ht%`HPXrV14+iC<9s1emsK20&ZkO1%8[2XBQ+GROH:J+!@8n,D9qr;?GArUg]9qqWjn
%fDkO<J,ehaqnqn&fDkjC%tF6orr/O>s"D-9q>EPU"87#TrmU8,^ARpOIf8I0o8eCroufT"c[Yl-Lu:qh$\/-,J+m=LdpN'/rs)J1VV2~>
%AI9_PrivateDataEnd
